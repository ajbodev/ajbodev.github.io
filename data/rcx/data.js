data({
  "data": [
    {
      "name": "css-layout-basic",
      "input_html": "{\"index\":{\"name\":\"index\",\"ext\":\"jade\",\"mode\":\"text/x-jade\",\"src\":\"doctype html\\nhtml\\n  head\\n    style(data-include='_reset')\\n    style(data-include='index')\\n  body\\n    .container\\n      .header Header\\n      .content\\n        .content__left(data-include='_content')\\n        .content__right(data-include='_content')\\n      .footer Footer\"},\"_content\":{\"name\":\"_content\",\"ext\":\"html\",\"mode\":\"text/html\",\"src\":\"\\nSed sit amet molestie diam. Etiam adipiscing dictum eros, vitae feugiat augue convallis sit amet. Nunc quis massa non dolor dictum condimentum.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque turpis diam, tincidunt nec convallis vitae, dapibus vitae enim. Nam bibendum nisl in risus imperdiet vestibulum.\\n\\nSed sit amet molestie diam. Etiam adipiscing dictum eros, vitae feugiat augue convallis sit amet. Nunc quis massa non dolor dictum condimentum.\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque turpis diam, tincidunt nec convallis vitae, dapibus vitae enim. Nam bibendum nisl in risus imperdiet vestibulum.\\n\"}}",
      "input_css": "{\"index\":{\"name\":\"index\",\"ext\":\"css\",\"mode\":\"text/css\",\"src\":\"\\nbody {\\n  background-color: #000000;\\n}\\n\\n.container {\\n  width: 960px;\\n  margin: 0 auto; /* center */\\n  background-color: #ebebe0;\\n}\\n\\n.header,\\n.content__left,\\n.content__right,\\n.footer {\\n  float: left;\\n  padding: 1em;\\n  height: 100%;\\n}\\n\\n.header,\\n.footer {\\n  width:  100%;\\n  height: 100%;\\n  background-color: #ebebe0;\\n}\\n\\n.content {\\n  float: left;\\n  height:  100%;\\n  width:  100%;\\n  background-color: #ccccb3;\\n}\\n\\n.content__left {\\n  width:  65%;\\n  background-color: #ccccb3;\\n}\\n\\n.content__right {\\n  width:  35%;\\n  background-color: #b8b894; \\n}\\n\\n@media screen and (max-width: 960px) {\\n\\n  .container,\\n  .content__left,\\n  .content__right  {\\n    width:  100%;\\n  }\\n  \\n}\\n\"},\"_reset\":{\"name\":\"_reset\",\"ext\":\"css\",\"mode\":\"text/css\",\"src\":\"\\n/* reset */\\n\\n* { \\n\\t-moz-box-sizing: border-box; \\n\\t-webkit-box-sizing: border-box; \\n\\tbox-sizing: border-box; \\n}\\nhtml, body, div, object, iframe, fieldset { \\n\\tmargin: 0; \\n\\tpadding: 0; \\n\\tborder: 0;\\n} \\nol, ul { \\n\\tlist-style: none;\\n\\tmargin: 0;\\n\\tpadding: 0;\\n} \\ntable { \\n\\tborder-collapse: collapse; \\n\\tborder-spacing: 0; \\n}\\nheader, footer, nav, section, article, hgroup, figure {\\n\\tdisplay: block;\\t\\n}\\nlegend {\\n\\tdisplay: none;\\n}\\n\\n/* reset end */\\n\"}}",
      "input_js": "{\"index\":{\"name\":\"index\",\"ext\":\"js\",\"mode\":\"text/javascript\",\"src\":\"\\nalert(1);\\n\"}}",
      "date": "27/07/2016",
      "id": 1
    },
  {
    "name": "rcx",
    "input_html": "{\"index\":{\"name\":\"index\",\"src\":\"\\nmixin Index(o)\\n  //-\\n  doctype html\\n  html\\n    head\\n      meta(charset='utf-8')\\n      title RCX\\n      link(href='rcx/v0/lib/rcx-vendors.css', rel='stylesheet')\\n      link(href='rcx/v0/lib/rcx.css', rel='stylesheet')\\n      //-style(data-include='index|main|admin')\\n    body.skin-black-light.sidebar-mini\\n      .wrapper\\n        .content-wrapper(style='min-height: 906px;')\\n          #app\\n      script(src='rcx/v0/lib/rcx-vendors.js')\\n      script window.app = {Component: {}, component: {}, require: {}};\\n      div(data-include='_bundle|bundle')\\n      //-script(src='bundles/rcx/v0/bundle.oj.js')\\n      script app.component.init();\\n      iframe#_form-target(name='_form-target')\\n\\n+Index({})\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"bundle\":{\"name\":\"bundle\",\"src\":\"\\nmixin Script(o)\\n  //- \\n  +Script_Init({ })\\n  +Script_Lib_Props({ })\\n  +Script_Lib_Samples({ })\\n  +Script_Stores({ })\\n  +Script_Templates({ })\\n  +Script_Component({ })\\n  +Script_Index({ })\\n  \\nmixin Script_Index(o)\\n  //- \\n  +_Index({ name: 'index/lib/index/lib', prop: 'lib'})\\n  +_Index({ name: 'index/lib/index/stores', prop: 'Stores'})\\n  +_Index({ name: 'index/lib/index/templates', prop: 'templates'})\\n  +_Index({ name: 'index/lib/index', prop: 'index'})\\n  +_Index({ name: 'index', prop: '{}'})\\n  \\nmixin Script_Component(o)\\n  //- \\n  +_Component_Constructor({ })\\n  +_Component({ name: 'component/lib' })\\n  +_Component({ name: 'component/store' })\\n  +_Component({ name: 'component/boot' })\\n  +_Component({ name: 'component/main' })\\n  +_Component({ name: 'component/admin' })\\n  +_Component({ name: 'component/util' })\\n  \\n  +_Component({ name: 'component/lib/console' })\\n  +_Component({ name: 'component/lib/date' })\\n\\n  +_Component({ name: 'component/store/data' })\\n  +_Component({ name: 'component/store/setting' })\\n\\n  +_Component({ name: 'component/boot/config' })\\n  +_Component({ name: 'component/boot/default' })\\n  +_Component({ name: 'component/boot/layout' })\\n  +_Component({ name: 'component/boot/meta' })\\n  +_Component({ name: 'component/boot/option/run' })\\n  +_Component({ name: 'component/boot/option/store' })\\n\\n  +_Component({ name: 'component/main/editor' })\\n  +_Component({ name: 'component/main/ext' })\\n  +_Component({ name: 'component/main/file' })\\n  +_Component({ name: 'component/main/frame' })\\n  +_Component({ name: 'component/main/include' })\\n  +_Component({ name: 'component/main/input' })\\n  +_Component({ name: 'component/main/lint' })\\n  +_Component({ name: 'component/main/load' })\\n  +_Component({ name: 'component/main/mode' })\\n  +_Component({ name: 'component/main/output' })\\n  +_Component({ name: 'component/main/result' })\\n  +_Component({ name: 'component/main/run' })\\n  +_Component({ name: 'component/main/save' })\\n  +_Component({ name: 'component/main/script' })\\n  +_Component({ name: 'component/main/urlhash' })\\n\\n  +_Component({ name: 'component/main/run/default/html' })\\n  +_Component({ name: 'component/main/run/default/css' })\\n  +_Component({ name: 'component/main/run/default/js' })\\n  +_Component({ name: 'component/main/run/markdown/marked' })\\n  +_Component({ name: 'component/main/run/preprocessor/less' })\\n  +_Component({ name: 'component/main/run/preprocessor/sass' })\\n  +_Component({ name: 'component/main/run/preprocessor/stylus' })\\n  +_Component({ name: 'component/main/run/template/jade' })\\n  +_Component({ name: 'component/main/run/transpiler/babel' })\\n  +_Component({ name: 'component/main/run/transpiler/coffeescript' })\\n  +_Component({ name: 'component/main/run/transpiler/livescript' })\\n  +_Component({ name: 'component/main/run/transpiler/typescript' })\\n\\n  +_Component({ name: 'component/admin/element' })\\n  +_Component({ name: 'component/admin/header' })\\n  +_Component({ name: 'component/admin/list/data' })\\n  +_Component({ name: 'component/admin/list' })\\n  +_Component({ name: 'component/admin/route' })\\n  +_Component({ name: 'component/admin/sample' })\\n  +_Component({ name: 'component/admin/select' })\\n  +_Component({ name: 'component/admin/src' })\\n  +_Component({ name: 'component/admin/tree' })\\n  +_Component({ name: 'component/admin/tree/data' })\\n  +_Component({ name: 'component/admin/view' })\\n\\n  +_Component({ name: 'component/util/format' })\\n  +_Component({ name: 'component/util/export' })\\n  +_Component({ name: 'component/util/export/data' })\\n  +_Component({ name: 'component/util/export/input' })\\n  +_Component({ name: 'component/util/export/output' })\\n  +_Component({ name: 'component/util/import' })\\n  +_Component({ name: 'component/util/import/data' })\\n  +_Component({ name: 'component/util/import/input' })\\n  +_Component({ name: 'component/util/import/output' })\\n  \\nmixin Script_Init(o)\\n  //- \\n  - var __ = {};\\n  - __['meta']                              = '../../../../../meta.json'\\n  - __['lib/props/lib']                     = '../../../lib/props/lib.ls'\\n  - __['lib/props/store']                   = '../../../lib/props/store.ls'\\n  - __['lib/props/boot']                    = '../../../lib/props/boot.ls'\\n  - __['lib/props/main']                    = '../../../lib/props/main.ls'\\n  - __['lib/props/admin']                   = '../../../lib/props/admin.ls'\\n  - __['lib/props/util']                    = '../../../lib/props/util.ls'\\n  - __['lib/samples/html-css-js/html']      = 'raw!../../../lib/samples/html-css-js/index.html.txt'\\n  - __['lib/samples/html-css-js/css']       = 'raw!../../../lib/samples/html-css-js/index.css.txt'\\n  - __['lib/samples/html-css-js/js']        = 'raw!../../../lib/samples/html-css-js/index.js.txt'\\n  - __['lib/samples/jade-css-js/jade']      = 'raw!../../../lib/samples/jade-css-js/index.jade.txt'\\n  - __['lib/samples/jade-css-js/css']       = 'raw!../../../lib/samples/jade-css-js/index.css.txt'\\n  - __['lib/samples/jade-css-js/js']        = 'raw!../../../lib/samples/jade-css-js/index.js.txt'\\n  - __['store/static/js']                   = '../../../store/static/js/store.ls'\\n  - __['store/browser/indexeddb-dexie']     = '../../../store/browser/indexeddb-dexie/store.ls'\\n  - __['store/browser/localstorage-lowdb']  = '../../../store/browser/localstorage-lowdb/store.ls'\\n  - __['store/server/ajax-jquery']          = '../../../store/server/ajax-jquery/store.ls'\\n  - __['store/server/dom-jquery']           = '../../../store/server/dom-jquery/store.ls'\\n  - __['store/cloud/firebase']              = '../../../store/cloud/firebase/store.ls'\\n  - __['template/layout/layout-split']      = '../../../template/jade/template-layout/layout-split.jade'\\n  - __['template/layout/layout-split-vtab'] = '../../../template/jade/template-layout/layout-split-vtab.jade'\\n  - __['template/layout/layout-combined']   = '../../../template/jade/template-layout/layout-combined.jade'\\n  - __['template/admin/tree-data']          = '../../../template/jade/template-admin/tree-data.jade'\\n  - __['template/admin/list-data']          = '../../../template/jade/template-admin/list-data.jade'\\n  - __['component']                         = '../../component/jquery/component.ls'\\n  - __['index/lib/index/lib']               = './index/lib.ls'\\n  - __['index/lib/index/stores']            = './index/stores.ls'\\n  - __['index/lib/index/templates']         = './index/templates-jade.ls'\\n  - __['index/lib/index']                   = '../lib/index.ls'\\n  - __['index']                             = 'index'\\n  - global.__ = __\\n  script window.app = {component: {}, require: {}};\\n  script(data-include='meta', data-prepend='window.app.require[\\\\'#{__[\\\"meta\\\"]}\\\\'] = ')\\n  \\nmixin Script_Lib_Props(o)\\n  //- \\n  +_Lib_Prop({ name: 'lib/props/lib'  })\\n  +_Lib_Prop({ name: 'lib/props/store' })\\n  +_Lib_Prop({ name: 'lib/props/boot'  })\\n  +_Lib_Prop({ name: 'lib/props/main'  })\\n  +_Lib_Prop({ name: 'lib/props/admin' })\\n  +_Lib_Prop({ name: 'lib/props/util'  })\\n  \\nmixin Script_Lib_Samples(o)\\n  //- \\n  +_Lib_Sample({ name: 'lib/samples/html-css-js/html' })\\n  +_Lib_Sample({ name: 'lib/samples/html-css-js/css'  })\\n  +_Lib_Sample({ name: 'lib/samples/html-css-js/js'   })\\n  +_Lib_Sample({ name: 'lib/samples/jade-css-js/jade' })\\n  +_Lib_Sample({ name: 'lib/samples/jade-css-js/css'  })\\n  +_Lib_Sample({ name: 'lib/samples/jade-css-js/js'   })\\n  \\nmixin Script_Stores(o)\\n  //- \\n  +_Store({ name: 'store/static/js'                  })\\n  +_Store({ name: 'store/browser/indexeddb-dexie'    })\\n  +_Store({ name: 'store/browser/localstorage-lowdb' })\\n  +_Store({ name: 'store/server/ajax-jquery'         })\\n  +_Store({ name: 'store/server/dom-jquery'          })\\n  +_Store({ name: 'store/cloud/firebase'             })\\n  \\nmixin Script_Templates(o)\\n  //- \\n  +_Template({ '__': __, name: 'template/layout/layout-split', includes: [\\n   'template/layout/layout', \\n   'template/layout/lib', \\n   'template/layout/lib/boot', 'template/layout/lib/main', 'template/layout/lib/util', 'template/layout/lib/admin', \\n   'template/layout/lib/boot/option', 'template/layout/lib/boot/option/run', 'template/layout/lib/boot/option/store',\\n   'template/layout/lib/main/input', 'template/layout/lib/main/output', \\n   'template/layout/layout-split'\\n  ]})\\n  +_Template({ '__': __, name: 'template/layout/layout-split-vtab', includes: [\\n   'template/layout/layout', \\n   'template/layout/lib', \\n   'template/layout/lib/boot', 'template/layout/lib/main', 'template/layout/lib/util', 'template/layout/lib/admin', \\n   'template/layout/lib/boot/option', 'template/layout/lib/boot/option/run', 'template/layout/lib/boot/option/store',\\n   'template/layout/lib/main/input', 'template/layout/lib/main/output', \\n   'template/layout/layout-split-vtab'\\n  ]})\\n  +_Template({ '__': __, name: 'template/layout/layout-combined', includes: [\\n   'template/layout/layout', \\n   'template/layout/lib', \\n   'template/layout/lib/boot', 'template/layout/lib/main', 'template/layout/lib/util', 'template/layout/lib/admin', \\n   'template/layout/lib/boot/option', 'template/layout/lib/boot/option/run', 'template/layout/lib/boot/option/store',\\n   'template/layout/lib/main/input', 'template/layout/lib/main/output', \\n   'template/layout/layout-combined'\\n  ]})\\n  +_Template({ '__': __, name: 'template/admin/tree-data', includes: [\\n   'template/admin', 'template/admin/tree-data'\\n  ]})\\n  +_Template({ '__': __, name: 'template/admin/list-data', includes: [\\n   'template/admin', 'template/admin/list-data'\\n  ]})\\n\\n+Script({})\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"lib/samples/html-css-js/html\":{\"name\":\"lib/samples/html-css-js/html\",\"src\":\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style data-include='index'></style>\\n  </head>\\n  <body>\\n    <div id='app'></div>\\n    <script data-include='index'></\\\\script>\\n  </body>\\n</html>\",\"ext\":\"html\",\"mode\":\"text/html\"},\"lib/samples/html-css-js/css\":{\"name\":\"lib/samples/html-css-js/css\",\"src\":\"\\n#app {\\n  background: red;\\n  height: 50px;\\n  width: 50px;\\n}\\n\",\"ext\":\"html\",\"mode\":\"text/html\"},\"lib/samples/html-css-js/js\":{\"name\":\"lib/samples/html-css-js/js\",\"src\":\"\\nalert(1);\\n\",\"ext\":\"html\",\"mode\":\"text/html\"},\"lib/samples/jade-css-js/jade\":{\"name\":\"lib/samples/jade-css-js/jade\",\"src\":\"doctype html\\nhtml\\n  head\\n    style(data-include='index')\\n  body\\n    div#app\\n    script(data-include='index')\",\"ext\":\"html\",\"mode\":\"text/html\"},\"lib/samples/jade-css-js/css\":{\"name\":\"lib/samples/jade-css-js/css\",\"src\":\"\\n#app {\\n  background: red;\\n  height: 50px;\\n  width: 50px;\\n}\\n\",\"ext\":\"html\",\"mode\":\"text/html\"},\"lib/samples/jade-css-js/js\":{\"name\":\"lib/samples/jade-css-js/js\",\"src\":\"\\nalert(1);\\n\",\"ext\":\"html\",\"mode\":\"text/html\"},\"template/layout/layout\":{\"name\":\"template/layout/layout\",\"src\":\"\\n//-include lib.jade\\n\\nmixin Layout(o)\\n  //- layout\\n  +_Header({ \\n    title: 'RCX', fa: 'codepen', href: '#/', \\n    version: global._meta['rcx'].version, Header_Items: 'Header_Items',\\n  })\\n  - if (o.layout !== 'combined') {\\n  +_Content({ \\n     layout: o.layout,\\n     Input_Menu_Top:     'Content_Input_Menu',\\n     Input_Content_Top:  'Content_Input_Content',\\n     Others_Menu_Top:    'Content_Others_Menu',\\n     Others_Content_Top: 'Content_Others_Content',\\n     run_dir: global._meta['rcx'].dir,\\n  })\\n  - } else if (o.layout === 'combined') {\\n  +_Content({ \\n     layout: 'combined',\\n     All_Menu:    'Content_All_Menu',\\n     All_Content: 'Content_All_Content',\\n     run_dir: global._meta['rcx'].dir,\\n  })\\n  - }\\n\\nmixin Header_Items(o)\\n  //- \\n  +_Header_Item({ title: 'Static', fa: 'database', id: 'header__data'})\\n  +_Header_Item({ title: '',       fa: 'table',    id: 'header__id'})\\n\\nmixin Content_Input_Menu(o)\\n  //- \\n  +_Content_Menu_Tab_Item({ id: 'input__html', title: 'HTML', fa: 'html5', class: 'active' })\\n  +_Content_Menu_Tab_Item({ id: 'input__css',  title: 'CSS',  fa: 'css3' })\\n  +_Content_Menu_Tab_Item({ id: 'input__js',   title: 'JS',   fa: 'jsfiddle' })\\n\\nmixin Content_Input_Content(o)\\n  //- \\n  +_Content_Input_Tab({ id: 'html', class: 'active' })\\n  +_Content_Input_Tab({ id: 'css' })\\n  +_Content_Input_Tab({ id: 'js'  })\\n\\nmixin Content_Others_Menu(o)\\n  //- \\n  +_Content_Menu_Tab_Item({ id: 'admin',  title: 'Data',    fa: 'database', class: 'active' })\\n  +_Content_Menu_Tab_Item({ id: 'output', title: 'Output',  fa: 'desktop' })\\n  +_Content_Menu_Tab_Item({ id: 'option', title: 'Options', fa: 'cogs' })\\n\\nmixin Content_Others_Content(o)\\n  //- run_dir\\n  +_Content_Admin_Tab({ class: 'active' })\\n  +_Content_Output_Tab({  })\\n  +_Content_Option_Tab({ run_dir: o.run_dir })\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"_bundle\":{\"name\":\"_bundle\",\"src\":\"\\n- window.global = {}\\n- window.global._meta = JSON.parse(parent.app.component.inputs.js.meta.src)\\n\\nmixin _Index(o)\\n  //- name, prop\\n  script(data-include='#{o.name}', \\n    data-prepend='var require = function(o){return window.app.require[o]};'\\n    data-append=';window.app.require[\\\\'#{global.__[o.name]}\\\\'] = #{o.prop};')\\n\\nmixin _Component(o)\\n  //- name\\n  script(data-include='#{o.name}', \\n    data-prepend='var require = function(o){ return function(o) {}};'\\n    data-append=';Component(window.app.Component);')\\n\\nmixin _Component_Constructor(o)\\n  //- \\n  script(data-include='component', \\n    data-prepend='var require = function(o){ return function(o) {}};'\\n    data-append=';window.app.Component = window.app.require[\\\\'#{global.__[\\\"component\\\"]}\\\\'] = Component;')\\n\\nmixin _Template(o)\\n  //- name, includes[]\\n  script(data-include='#{o.includes.join(\\\"|\\\")}', data-entity='html',\\n    data-stringify='window.app.require[\\\\'#{global.__[o.name]}\\\\'] = window.app.require')\\n\\nmixin _Store(o)\\n  //- name\\n  script(data-include='#{o.name}', \\n    data-prepend='var require = function(o){return window.app.require[o]};'\\n    data-append=';window.app.require[\\\\'#{global.__[o.name]}\\\\'] = Store;')\\n\\nmixin _Lib_Prop(o)\\n  //- name\\n  script(data-include='#{o.name}',   data-append=';window.app.require[\\\\'#{global.__[o.name]}\\\\'] = props;')\\n\\nmixin _Lib_Sample(o)\\n  //- name\\n  script(data-include='#{o.name}', data-entity='html'\\n    data-stringify='window.app.require[\\\\'#{global.__[o.name]}\\\\'] = window.app.require')\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/layout-split\":{\"name\":\"template/layout/layout-split\",\"src\":\"\\n//-include layout.jade\\n\\n+Layout({ layout: 'split' })\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/layout-split-vtab\":{\"name\":\"template/layout/layout-split-vtab\",\"src\":\"\\n//-include layout.jade\\n\\n+Layout({ layout: 'split-vtab' })\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/layout-combined\":{\"name\":\"template/layout/layout-combined\",\"src\":\"\\n//-include layout.jade\\n\\nmixin Content_All_Menu(o)\\n  //- \\n  +_Content_Menu_Tab_Item({ id: 'input__html', title: 'HTML',    fa: 'html5', class: 'active' })\\n  +_Content_Menu_Tab_Item({ id: 'input__css',  title: 'CSS',     fa: 'css3' })\\n  +_Content_Menu_Tab_Item({ id: 'input__js',   title: 'JS',      fa: 'jsfiddle' })\\n  +_Content_Menu_Tab_Item({ id: 'admin',       title: 'Data',    fa: 'database' })\\n  +_Content_Menu_Tab_Item({ id: 'output',      title: 'Output',  fa: 'desktop' })\\n  +_Content_Menu_Tab_Item({ id: 'option',      title: 'Options', fa: 'cogs' })\\n\\nmixin Content_All_Content(o)\\n  //- \\n  +_Content_Input_Tab({ id: 'html', class: 'active' })\\n  +_Content_Input_Tab({ id: 'css' })\\n  +_Content_Input_Tab({ id: 'js'  })\\n  +_Content_Admin_Tab({  })\\n  +_Content_Output_Tab({ })\\n  +_Content_Option_Tab({ run_dir: o.run_dir })\\n\\n+Layout({ layout: 'combined' })\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib\":{\"name\":\"template/layout/lib\",\"src\":\"  \\n//-include lib/boot.jade\\n//-include lib/main.jade\\n//-include lib/admin.jade\\n//-include lib/util.jade\\n\\nmixin _Content(o)\\n  //-\\n  section.content\\n    .row(style='margin-bottom: 12px')\\n      +_Content_Main_Buttons({ })\\n    .row#content__layout\\n      +_Content_Layout(o)\\n    | <br><br><br><br><br><br><br>\\n\\nmixin _Content_Layout(o)\\n  //- layout\\n  - if (o.layout === 'split') {\\n  +_Content_Layout_Split(o)\\n  - } else if (o.layout === 'split-vtab') {\\n  +_Content_Layout_SplitVtab(o)\\n  - } else if (o.layout === 'combined') {\\n  +_Content_Layout_Combined(o)\\n  - }\\n\\nmixin _Content_Layout_Split(o)\\n  //-\\n  .col-md-6(style='padding-right: 7px')\\n    +_Content_Input_Section(o)\\n  .col-md-6(style='padding-left: 7px')\\n    +_Content_Others_Section(o)\\n\\nmixin _Content_Layout_SplitVtab(o)\\n  //-\\n  .col-sm-12\\n    .col-sm-2(style='padding-left:0;padding-right:0')\\n      ul.nav.nav-tabs.tabs-left\\n        li.active\\n          a(href='#tab__input', data-toggle='tab') Input\\n        li\\n          a(href='#tab__others', data-toggle='tab') Output + Others\\n    .col-sm-10(style='padding-left:0;padding-right:0')\\n      .tab-content\\n        #tab__input.tab-pane.active\\n          +_Content_Input_Section(o)\\n        #tab__others.tab-pane\\n          +_Content_Others_Section(o)\\n\\nmixin _Content_Layout_Combined(o)\\n  //-\\n  .col-md-12\\n    .nav-tabs-custom\\n      ul.nav.nav-tabs\\n        +#{o.All_Menu || '__'}(o)\\n      .tab-content\\n        +#{o.All_Content || '__'}(o)\\n\\nmixin _Content_Input_Section(o)\\n  //- ?Input_Menu_Top, ?Input_Menu_Bottom, ?Input_Content_Top, ?Input_Content_Bottom\\n  .nav-tabs-custom\\n    ul.nav.nav-tabs\\n      +#{o.Input_Menu_Top || '__'}(o)\\n      +#{o.Input_Menu_Bottom || '__'}(o)\\n    .tab-content\\n      +#{o.Input_Content_Top || '__'}(o)\\n      +#{o.Input_Content_Bottom || '__'}(o)\\n\\nmixin _Content_Others_Section(o)\\n  //- ?Others_Menu_Top, ?Others_Menu_Bottom, ?Others_Content_Top, ?Others_Content_Bottom\\n  //- ?run_dir\\n  .nav-tabs-custom\\n    ul.nav.nav-tabs\\n      +#{o.Others_Menu_Top || '__'}(o)\\n      +#{o.Others_Menu_Bottom || '__'}(o)\\n    .tab-content\\n      +#{o.Others_Content_Top || '__'}(o)\\n      +#{o.Others_Content_Bottom || '__'}(o)\\n\\nmixin _Content_Menu_Tab_Item(o)\\n  //- id, title, fa, ?class\\n  li(class='#{o.class || \\\"\\\"}')\\n    a(href='#tab__#{o.id}', data-toggle='tab')\\n      i(class='fa fa-#{o.fa}')\\n      | &nbsp&nbsp #{o.title}\\n\\nmixin _Header(o)\\n  //- title, version, Header_Items\\n  section.content-header\\n    h1\\n      | &nbsp\\n      i(class='fa fa-#{o.fa}')\\n      | &nbsp#{o.title}\\n      small #{o.version}\\n    ol.breadcrumb\\n      +#{o.Header_Items || '__' }(o.header_items || {})\\n\\nmixin _Header_Item(o)\\n  //- d, title\\n  li\\n    i(class='fa fa-#{o.fa}')\\n    | &nbsp&nbsp\\n    span(id='#{o.id}') #{o.title}\\n\\nmixin _Form_Group(o)\\n  //- id, label\\n  .form-group\\n    label.col-sm-2.control-label(for='#{o.id}') #{o.label}\\n    .col-sm-10\\n      input.form-control(type='text', id='#{o.id}')\\n\\nmixin __\\n  //-\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/boot\":{\"name\":\"template/layout/lib/boot\",\"src\":\"\\n//-include boot/option.jade\\n\\nmixin _Content_Option_Tab(o)\\n  //- run_dir\\n  #tab__option.tab-pane.fade.in\\n    .row(style='padding-bottom: 5px;')\\n      +_Content_Option_Tab_Cmd\\n    .row(style='height: 649px;')\\n      +_Content_Option_Tab_Menu({ })\\n      +_Content_Option_Tab_Content({ run_dir: o.run_dir })\\n\\nmixin _Content_Option_Tab_Cmd(o)\\n  //- \\n  .col-md-12\\n    button#content__option__save.btn.btn-danger(type='button', disabled)\\n      i.fa.fa-refresh\\n\\nmixin _Content_Option_Tab_Content(o)\\n  //- run_dir\\n  .col-sm-10\\n    .tab-content\\n      +_Content_Option_Tab_Content_Store({ })\\n      +_Content_Option_Tab_Content_Run({ run_dir: o.run_dir })\\n\\nmixin _Content_Option_Tab_Menu(o)\\n  //- \\n  .col-sm-2\\n    ul.nav.nav-tabs.tabs-left\\n      +_Content_Option_Tab_Menu_Item({ title: 'Store',  href: 'store', class: 'active'})\\n      +_Content_Option_Tab_Menu_Item({ title: 'Run',    href: 'run' })\\n\\nmixin _Content_Option_Tab_Menu_Item(o)\\n  //- \\n  li(class='#{o.class || \\\"\\\"}')\\n    a(href='#tab__option__#{o.href}', data-toggle='tab') #{o.title}\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/boot/option\":{\"name\":\"template/layout/lib/boot/option\",\"src\":\"\\n//-include option/store.jade\\n//-include option/run.jade\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/boot/option/run\":{\"name\":\"template/layout/lib/boot/option/run\",\"src\":\"\\nmixin _Content_Option_Tab_Content_Run(o)\\n  //- run_dir\\n  #tab__option__run.tab-pane.fade.in\\n    .table-responsive(style='height: 607px')\\n      table.table.table-bordered\\n        tbody\\n          tr\\n            th(style='width: 10px;') Status\\n            th(style='min-width: 900px;') Run Mode\\n          tr\\n            td\\n              input#content__option__run__mode__front.content__icheck(type='radio', name='run__mode', checked='checked', value='front')\\n            td\\n              | Always run the front file in the HTML tab\\n          tr\\n            td\\n              input#content__option__run__mode__index.content__icheck(type='radio', name='run__mode', value='index')\\n            td\\n              | Always run the 'index' file in the HTML tab\\n      table.table.table-bordered\\n        tbody\\n          tr\\n            th(style='width: 10px;') Status\\n            th Vendor\\n            th Extension\\n            th(style='min-width: 600px;') URL\\n          //- Default\\n          //- Markdown\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'Marked', id: 'md' , ext: 'md', \\n            value: o.run_dir + 'vendors/markdown/marked/marked-0.3.5/marked.min.js' })\\n          //- Template\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'Jade', id: 'jade' , ext: 'jade', \\n            value: o.run_dir + 'vendors/template/jade/jade-1.11.0/jade.min.js' })\\n          //- Preprocessor\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'Less', id: 'less' , ext: 'less', \\n            value: o.run_dir + 'vendors/preprocessor/less/less-2.7.1/less.min.js' })\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'Sass', id: 'sass' , ext: 'sass', \\n            //value: o.run_dir + 'vendors/preprocessor/sass/sass-0.9.10/sass.sync.js' })\\n            value: o.run_dir + 'vendors/preprocessor/sass/sass-0.0.0-2015-03-22/sass.js' })\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'Stylus', id: 'styl' , ext: 'styl', \\n            value: o.run_dir + 'vendors/preprocessor/stylus/stylus-0.54.5/stylus.js' })\\n          //- Transpiler\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'Babel', id: 'babel' , ext: 'babel.js', \\n            value: o.run_dir + 'vendors/transpiler/babel/babeljs.io-2016-03-01/babel.js' })\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'TypeScript', id: 'ts' , ext: 'ts', \\n            value: o.run_dir + 'vendors/transpiler/typescript/typescript-1.8.0/typescript.min.js' })\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'CoffeeScript', id: 'cs' , ext: 'cs', \\n            value: o.run_dir + 'vendors/transpiler/coffeescript/coffeescript-1.10.0/coffee-script.js' })\\n          +_Content_Option_Tab_Content_Run_Item({ \\n            title: 'LiveScript', id: 'ls' , ext: 'ls', \\n            value: o.run_dir + 'vendors/transpiler/livescript/livescript-1.4.0/livescript-min.js' })\\n\\nmixin _Content_Option_Tab_Content_Run_Item(o)\\n  //- title, id, ext, value\\n  tr\\n    td\\n      input.content__icheck(id='content__option__run__#{o.id}', type='checkbox')\\n    td #{o.title}\\n    td(id='content__option__run__#{o.id}__ext') #{o.ext}\\n    td\\n      input(id='content__option__run__#{o.id}__src', class='form-control',\\n        value='#{o.value}')\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/boot/option/store\":{\"name\":\"template/layout/lib/boot/option/store\",\"src\":\"\\nmixin _Content_Option_Tab_Content_Store(o)\\n  //-\\n  #tab__option__store.tab-pane.fade.in.active\\n    .table-responsive(style='height: 607px;')\\n      table.table.table-bordered\\n        tbody\\n          tr\\n            th \\n            th(style='min-width: 250px;') Store\\n            th(style='min-width: 400px;') DB / URL\\n            th(style='min-width: 200px;') Table\\n            th(style='min-width: 400px;') Others\\n          tr\\n            td Data\\n            td\\n              select#content__option__store__data\\n            td\\n              input#content__option__store__data__db_url.form-control(value='')\\n            td\\n              input#content__option__store__data__table.form-control(value='')\\n            td\\n              input#content__option__store__data__others.form-control(value='')\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/main\":{\"name\":\"template/layout/lib/main\",\"src\":\"\\n//-include main/input.jade\\n//-include main/output.jade\\n\\nmixin _Content_Main_Buttons(o)\\n  //- \\n  .col-xs-4.col-sm-3.col-md-2\\n    button#content__run.btn.btn-primary\\n      i.fa.fa-play\\n    | &nbsp&nbsp\\n    input#content__run__auto.content__icheck(type='checkbox')\\n    | &nbsp&nbspAutorun\\n  .col-xs-4.col-sm-3.col-md-2\\n    button#content__save.btn.btn-default\\n      i.fa.fa-save\\n    | &nbsp&nbsp\\n    input#content__save__auto.content__icheck(type='checkbox')\\n    | &nbsp&nbspAutosave\\n  .col-xs-4.col-sm-3.col-md-2\\n    button#content__load.btn.btn-btn\\n      i.fa.fa-repeat\\n    | &nbsp&nbsp\\n    input#content__load__auto.content__icheck(type='checkbox')\\n    | &nbsp&nbspAutoload\\n  .col-xs-12.col-sm-3.col-md-6#content__layout__holder\\n    select#content__layout__select\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/main/input\":{\"name\":\"template/layout/lib/main/input\",\"src\":\"\\nmixin _Content_Input_Tab(o)\\n  //- id, ?class\\n  .tab-pane.fade.in(id='tab__input__#{o.id}', class='#{o.class || \\\"\\\"}')\\n    .content__input__top\\n      .content__input__top__create\\n        button.btn.btn-default(id='content__input__#{o.id}__file__create', type='button', data-toggle='modal', data-target='#content__input__#{o.id}__file__create__modal')\\n          i.fa.fa-plus\\n      .content__input__top__file\\n        select(id='content__input__#{o.id}__file')\\n      .content__input__top__ext\\n        select(id='content__input__#{o.id}__ext')\\n      .content__input__top__destroy\\n        button.btn.btn-btn.pull-right(id='content__input__#{o.id}__file__destroy', type='button')\\n          i.fa.fa-trash\\n    //-.row \\n      .col-md-1.col-sm-1.col-xs-12\\n        button.btn.btn-default(id='content__input__#{o.id}__file__create', type='button', data-toggle='modal', data-target='#content__input__#{o.id}__file__create__modal')\\n          i.fa.fa-plus\\n      .col-md-8.col-sm-8.col-xs-12\\n        select(id='content__input__#{o.id}__file')\\n      .col-md-2.col-sm-2.col-xs-12(style='padding-left: 0; padding-right: 9px;')\\n        select(id='content__input__#{o.id}__ext')\\n      .col-md-1.col-sm-1.col-xs-12\\n        button.btn.btn-danger.pull-right(id='content__input__#{o.id}__file__destroy', type='button')\\n          i.fa.fa-trash\\n    .row\\n      .col-md-12.col-sm-12.col-xs-12\\n        textarea(id='content__input__#{o.id}__editor')\\n    +_Content_Util_Tab_Buttons({ id: 'input__' + o.id })\\n    +_Content_Input_Tab_Create({ id: o.id })\\n\\nmixin _Content_Input_Tab_Create(o)\\n  //- id\\n  .row\\n    .modal.fade(id='content__input__#{o.id}__file__create__modal', tabindex='-1', role='dialog', aria-labelledby='#{o.id}Label', aria-hidden='true')\\n      .modal-dialog\\n        .modal-content\\n          .modal-body\\n            form.form-horizontal\\n              .form-group\\n                label.col-sm-2.control-label(for='content__input__#{o.id}__file__create__text') File\\n                .col-sm-8\\n                  input.form-control(type='text', id='content__input__#{o.id}__file__create__text')\\n                .col-sm-2\\n                  input.form-control(type='text', value='#{o.id}', disabled)\\n              .form-group\\n                label.col-sm-offset-2.col-sm-10\\n                  button.btn.btn-default(type='button', id='content__input__#{o.id}__file__create__button')\\n                    i.fa.fa-plus\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/main/output\":{\"name\":\"template/layout/lib/main/output\",\"src\":\"\\nmixin _Content_Output_Tab(o)\\n  //- ?class\\n  #tab__output.tab-pane.fade.in(class='#{o.class || \\\"\\\"}')\\n    .content__output__top\\n      .content__output__top__urlhash-button#content__output__index__button__holder\\n        button.btn.btn-default#content__output__index__urlhash__button(type='button')\\n          i.fa.fa-hashtag\\n      .content__output__top__urlhash#content__output__index__select__holder\\n        select#content__output__index__urlhash\\n      .content__output__top__ext\\n        select#content__output__index__ext\\n    .row\\n      .col-md-12.col-sm-12.col-xs-12\\n        #content__output__index__holder\\n          iframe#content__output__index__frame\\n    br\\n    .content__output__bottom\\n      .content__output__bottom__import-export\\n        button.btn.btn-btn#content__output__index__export(type='button')\\n          i.fa.fa-download\\n        | &nbsp&nbsp\\n        span.btn.btn-default.btn-file\\n          i.fa.fa-upload\\n          input#content__output__index__import(type='file')\\n      .content__output__bottom__result\\n        select#content__output__index__result\\n      .content__output__bottom__lint\\n      .content__output__bottom__mode\\n        select#content__output__index__mode\\n    .row\\n      .col-md-12.col-sm-12.col-xs-12\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/admin\":{\"name\":\"template/layout/lib/admin\",\"src\":\"\\nmixin _Content_Admin_Tab(o)\\n  //- ?class\\n  #tab__admin.tab-pane.fade.in(class='#{o.class || \\\"\\\"}')\\n    .content__admin__top\\n      .content__admin__top__left\\n        button.btn.btn-success#content__admin__select__create(type='button', data-toggle='modal', data-target='#content__admin__select__create__modal')\\n          i.fa.fa-plus\\n        | &nbsp&nbsp\\n        button#content__admin__select__refresh.btn.btn-default(type='button')\\n          i.fa.fa-refresh\\n      .content__admin__top__mid\\n        select#content__admin__select\\n      .content__admin__top__right__aux\\n        .content__admin__top__right\\n          //-button#content__admin__select__clone.btn.btn-default(type='button')\\n            i.fa.fa-code-fork\\n          button#content__admin__select__edit.btn.btn-default(type='button', data-toggle='modal', data-target='#content__admin__select__edit__modal')\\n            i.fa.fa-edit\\n          | &nbsp&nbsp\\n          button#content__admin__select__destroy.btn.btn-danger(type='button')\\n            i.fa.fa-trash\\n    .row.table-responsive#content__admin(style='height: 606px;')\\n    .content__admin__bottom\\n      .content__admin__bottom__import-export\\n        button.btn.btn-btn#content__admin__export(type='button')\\n          i.fa.fa-download\\n        | &nbsp&nbsp\\n        span.btn.btn-default.btn-file\\n          i.fa.fa-upload\\n          input#content__admin__import(type='file')\\n      .content__admin__bottom__format\\n        select#content__admin__format\\n      .content__admin__bottom__space\\n      .content__admin__bottom__view\\n        select#content__admin__view\\n    +_Content_Admin_Tab_Create({  })\\n    +_Content_Admin_Tab_Edit({  })\\n\\nmixin _Content_Admin_Tab_Create(o)\\n  //- \\n  .row\\n    .modal.fade(id='content__admin__select__create__modal', tabindex='-1', role='dialog', aria-labelledby='123Label', aria-hidden='true')\\n      .modal-dialog\\n        .modal-content\\n          .modal-body\\n            form.form-horizontal\\n              .form-group\\n                label.col-sm-2.control-label(for='content__admin__select__create__text') Data\\n                .col-sm-10\\n                  input.form-control(type='text', id='content__admin__select__create__text')\\n              .form-group\\n                label.col-sm-2.control-label(for='content__admin__select__create__button') Add\\n                .col-sm-10\\n                  button.btn.btn-success(type='button', id='content__admin__select__create__button')\\n                    i.fa.fa-plus\\n              .form-group\\n                label.col-sm-2.control-label Template\\n                .col-sm-10\\n                  select#content__admin__sample\\n              .form-group\\n                label.col-sm-2.control-label Store\\n                .col-sm-10\\n                  select#content__admin__src\\n\\nmixin _Content_Admin_Tab_Edit(o)\\n  //- \\n  .row\\n    .modal.fade(id='content__admin__select__edit__modal', tabindex='-1', role='dialog', aria-labelledby='456Label', aria-hidden='true')\\n      .modal-dialog\\n        .modal-content\\n          .modal-body\\n            form.form-horizontal\\n              .content__admin__top__select__edit\\n                .content__admin__top__select__edit__left\\n                  label Data\\n                .content__admin__top__select__edit__mid\\n                  input.form-control(type='text', id='content__admin__select__edit__text')\\n                .content__admin__top__select__edit__right\\n                  button.btn.btn-default(type='button', id='content__admin__select__edit__button')\\n                    i.fa.fa-save\\n              .content__admin__top__select__clone\\n                .content__admin__top__select__clone__left\\n                  label Clone\\n                .content__admin__top__select__clone__mid\\n                  button.btn.btn-success(type='button', id='content__admin__select__clone__button', style='width: 42.5px;')\\n                    i.fa.fa-code-fork\\n                .content__admin__top__select__clone__right\\n                  input.form-control(type='text', id='content__admin__select__clone__text', disabled)\\n              .content__admin__top__select__replace\\n                .content__admin__top__select__replace__left\\n                  label Replace\\n                .content__admin__top__select__replace__mid\\n                  button.btn.btn-warning(type='button', id='content__admin__select__replace__button')\\n                    i.fa.fa-paste\\n                .content__admin__top__select__replace__right\\n                  input.form-control(type='text', id='content__admin__select__replace__text', disabled)\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/layout/lib/util\":{\"name\":\"template/layout/lib/util\",\"src\":\"\\nmixin _Content_Util_Tab_Buttons(o)\\n  //- \\n  br\\n  //-.content__input__bottom\\n  .content__input__bottom\\n    .content__input__bottom__import-export\\n      button.btn.btn-btn(type='button', id='content__#{o.id}__export')\\n        i.fa.fa-download\\n      | &nbsp&nbsp\\n      span.btn.btn-default.btn-file\\n        i.fa.fa-upload\\n        input(type='file', id='content__#{o.id}__import')\\n    .content__input__bottom__format\\n      select(id='content__#{o.id}__format')\\n    .content__input__bottom__lint\\n      | &nbsp&nbsp&nbsp\\n      input.content__icheck(type='checkbox', id='content__#{o.id}__lint')\\n      | &nbsp&nbspLint\\n    .content__input__bottom__mode\\n      select(id='content__#{o.id}__mode')\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/admin/list-data\":{\"name\":\"template/admin/list-data\",\"src\":\"\\n.col-md-12(style='padding-top: 5px;')\\n  input#content__list__id.form-control(type='text', placeholder='ID', style='width: 100%;')\\n.col-md-12(style='padding-top: 10px;')\\n  input#content__list__name.form-control(type='text', placeholder='Name', style='width: 100%;')\\n.col-md-12(style='padding-top: 10px;')\\n  input#content__list__date.form-control(type='text', placeholder='Date (DD/MM/YYYY)', style='width: 100%;')\\n.col-md-12(style='padding-top: 10px;')\\n  #content__list_wrapper\\n    table#content__list\\n\",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/admin/tree-data\":{\"name\":\"template/admin/tree-data\",\"src\":\"\\n//-.col-md-12(style='padding-top: 5px;')\\n  input#content__tree__id.form-control(type='text', placeholder='ID', style='width: 100%;', disabled)\\n.col-md-12(style='/*padding-top: 10px;*/')\\n  input#content__tree__name.form-control(type='text', placeholder='Name', style='width: 100%;')\\n//-.col-md-12(style='padding-top: 10px;')\\n  input#content__tree__date.form-control(type='text', placeholder='Date (DD/MM/YYYY)', style='width: 100%;', disabled)\\n.col-md-12(style='padding-top: 10px;')\\n  #content__tree\\n  \",\"ext\":\"jade\",\"mode\":\"text/x-jade\"},\"template/admin\":{\"name\":\"template/admin\",\"src\":\"\\n\\n\",\"ext\":\"html\",\"mode\":\"text/html\"}}",
    "input_css": "{\"index\":{\"name\":\"index\",\"src\":\"\\n#_form-target { visibility:hidden;display:none }\\n\\n/* ? */\\n\\n#content__layout__holder {\\n  max-width: 250px;\\n  float: right;\\n}\\n@media (max-width: 767px) {\\n  /* Layout */\\n  #content__layout__holder {\\n    padding-top: 20px;\\n  }\\n}\\n\\n.btn-default {\\n  background-color: white !important;\\n  border-color: #ccc !important;\\n}\\n\\n.btn-btn {\\n  background-color: #d2d6de !important;\\n  border-color: #ccc !important;\\n}\\n\\n/* ? */\\n\\ntextarea {\\n  background-color: #222 !important;\\n  color: white !important;\\n}\\n#tab__list input[type='text'], \\n#tab__list .box-header select, \\n#tab__reports input[type='text'] {\\n  width: 200px; \\n  float: left;\\n}\\n.box.box-primary {\\n  border-top-color: white;\\n}\\n.btn-file { position: relative; overflow: hidden; }\\n.btn-file input[type=file] {\\n  position: absolute; top: 0; right: 0; min-width: 100%; min-height: 100%; \\n  font-size: 100px; text-align: right; filter: alpha(opacity=0); opacity: 0; \\n  outline: none; background: white; cursor: inherit; display: block; \\n}\\n:not(h1):not(h2):not(h3):not(i) {\\n  font-size: 16px !important; \\n}\\n/* IMPORTANT */\\n.CodeMirror span {\\n  font-size: 14px !important; \\n}\\n.content-wrapper, .right-side {\\n  background-color: #f4f4f4;\\n}\\n.messages-menu .dropdown-menu {\\n  /*max-width: 155px;*/\\n}\\n.content-wrapper textarea,\\n.content-wrapper select,\\n.content-wrapper table {\\n  background-color: #222 !important;\\n  color: #DDDDDD !important;\\n}\\n/* fix .. */\\n/*\\n:not(.selectize-input) > input[type='text'] {\\n  background-color: #222 !important;\\n  color: #DDDDDD !important;\\n}\\n*/\\n\\n#content__input__html__file__create__text, \\n#content__input__css__file__create__text,\\n#content__input__js__file__create__text,\\n#content__admin__select__create__text {\\n  background-color: #222 !important;\\n  color: #DDDDDD !important;\\n}\\n\\n#tab__option table {\\n  background-color: rgba(0, 0, 0, 0) !important;\\n  color: rgb(51, 51, 51) !important;\\n}\\n#content__calendar table {\\n  background-color: white !important;\\n  color: black !important;\\n}\\n.table-hover tbody tr:hover td, .table-hover tbody tr:hover th {\\n  background-color: #444;\\n}\\n#dashboard .info-box {\\n  box-shadow: 0 0;\\n}\\n#dashboard .info-box .fa {\\n  font-size: 45px;\\n  margin-top: 22px;\\n}\\n#dashboard a {\\n  color: inherit;\\n}\\n/* Header */\\n.main-header .navbar .nav>li>a>.label {\\n  padding: 1px;\\n}\\ntd a {\\n  display: block; height: 100%;\\n}\\ntd input:not([disabled]) {\\n  /*width: 100% !important;*/\\n  background-color: #222 !important;\\n  color: white !important;\\n}\\nspan[data-id] {\\n  display: block;\\n}\\n::-webkit-input-placeholder {\\n  color: #777777 !important;\\n}\\n.CodeMirror { width: 100%; height: 600px !important;}\\n/* For lists */\\n/*#content__list_wrapper .col-sm-12 { padding: 0; }*/\\n/* chartist */\\n.ct-chart-line .ct-label.ct-horizontal.ct-end {\\n  display: block;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  /*\\n  transform: rotate(-30deg);\\n  transform-origin: 100% 0%;\\n  */\\n  transform: rotate(-45deg);\\n  transform-origin: 100% 600%;\\n  text-align: right;\\n  max-height: 1.5em;\\n  min-width: 100px;\\n  /*max-width: 100px;*/\\n}\\n.CodeMirror-cursor {\\n  border-left-color: white !important;\\n}\\n/* import export */\\n.btn-file { position: relative; overflow: hidden; }\\n.btn-file input[type=file] {\\n  position: absolute; top: 0; right: 0; min-width: 100%; min-height: 100%; \\n  font-size: 100px; text-align: right; filter: alpha(opacity=0); opacity: 0; \\n  outline: none; background: white; cursor: inherit; display: block; }\\n.logo, .main-sidebar {\\n  width: 150px !important;\\n}\\n@media (min-width: 767px) {\\n  .content-wrapper, \\n  .main-header > .navbar  {\\n    margin-left: 0px !important;\\n  }\\n}\\niframe { width:  100%; height: 595px; border: 0px;  }\\n/* selectize .. later */\\n.selectize-input > input {\\n  background-color: white !important;\\n}\\n\\n/* Modal \\n.modal {background: none !important;}\\n.modal-backdrop {background: none !important;}\\n*/\\n\",\"ext\":\"css\",\"mode\":\"text/css\"},\"admin\":{\"name\":\"admin\",\"src\":\"\\n/* ? modal edit */\\n\\n.content__admin__top__select__edit, \\n.content__admin__top__select__clone,\\n.content__admin__top__select__replace {\\n  display: table;\\n  width: 100%;\\n  margin-bottom: 15px;\\n}\\n\\n.content__admin__top__select__edit__left, \\n.content__admin__top__select__clone__left,\\n.content__admin__top__select__replace__left {\\n  display: table-cell;\\n  /*vertical-align: top;*/\\n  width: 100px;\\n}\\n\\n.content__admin__top__select__edit__left label,\\n.content__admin__top__select__clone__left label,\\n.content__admin__top__select__replace__left label {\\n  float: right;\\n  padding-right: 30px;\\n}\\n\\n.content__admin__top__select__edit__mid, \\n.content__admin__top__select__clone__right,\\n.content__admin__top__select__replace__right {\\n  display: table-cell;\\n  vertical-align: top;\\n  float: left;\\n  width: 100%;\\n}\\n\\n.content__admin__top__select__edit__right {\\n  display: table-cell;\\n  vertical-align: top;\\n  width: 1px;\\n  padding-left: 14px;\\n}\\n\\n.content__admin__top__select__clone__mid,\\n.content__admin__top__select__replace__mid {\\n  display: table-cell;\\n  vertical-align: top;\\n  width: 1px;\\n  padding-right: 14px;\\n}\\n\\n/* ? */\\n\\n.content__admin__top, .content__admin__bottom {\\n  display: table;\\n  width: 100%;\\n  height: 44px;\\n}\\n\\n.content__admin__bottom {\\n  margin-top: 3px;\\n  margin-bottom: -7px;\\n}\\n\\n.content__admin__top__left,\\n.content__admin__top__mid,\\n.content__admin__top__right__aux,\\n.content__admin__top__right,\\n.content__admin__bottom__import-export,\\n.content__admin__bottom__format,\\n.content__admin__bottom__space,\\n.content__admin__bottom__view\\n{\\n  display: table-cell;\\n  vertical-align: top;\\n}\\n\\n.content__admin__top__left, \\n.content__admin__bottom__import-export {\\n  width: 94px;\\n}\\n\\n.content__admin__top__right__aux {\\n  width: 94px;\\n}\\n\\n.content__input__top__mid, .content__admin__bottom__space {\\n  float: left;\\n  width: 100%;\\n}\\n\\n.content__admin__bottom__format, .content__admin__bottom__view {\\n  width: 120px;\\n}\\n\\n.content__admin__top__right {\\n  float: right;\\n}\\n\\n@media (max-width: 767px) {\\n  .content__admin__top, .content__admin__bottom {\\n    display: block;\\n  }\\n  \\n  .content__admin__top__mid {\\n    float: left;\\n    width: 100%;\\n    padding-top: 8px;\\n    padding-right: 0;\\n  }\\n  \\n  .content__admin__top__right__aux,\\n  .content__admin__bottom__format,\\n  .content__admin__bottom__view {\\n    float: left;\\n    width: 100%;\\n  }\\n}\\n\",\"ext\":\"css\",\"mode\":\"text/css\"},\"main\":{\"name\":\"main\",\"src\":\"\\n/* Top */\\n\\n.content__input__top, .content__output__top {\\n  display: table;\\n  width: 100%;\\n  height: 44px;\\n}\\n\\n.content__input__top__create, .content__output__top__urlhash-button,\\n.content__input__top__file,   .content__output__top__urlhash,\\n.content__input__top__ext,    .content__output__top__ext,\\n.content__input__top__destroy\\n{\\n  display: table-cell;\\n  vertical-align: top;\\n}\\n\\n.content__input__top__create, .content__output__top__urlhash-button {\\n  width: 50px;\\n}\\n\\n.content__input__top__file, .content__output__top__urlhash {\\n  float: left;\\n  width: 100%;\\n  padding-right: 13px;\\n}\\n\\n.content__input__top__ext, .content__output__top__ext {\\n  width: 120px;\\n}\\n\\n.content__input__top__destroy {\\n  width: 50px;\\n}\\n\\n@media (max-width: 767px) {\\n  .content__input__top, .content__output__top {\\n    display: block;\\n  }\\n  \\n  .content__input__top__file, .content__output__top__urlhash {\\n    padding-top: 8px;\\n    padding-right: 0;\\n  }\\n  \\n  .content__input__top__ext, .content__output__top__ext {\\n    float: left;\\n    width: 100%;\\n  }\\n  \\n  .content__input__top__destroy {\\n    float: right; \\n    padding-bottom: 8px;\\n  }\\n}\\n\\n/* Bottom */\\n\\n.content__input__bottom, .content__output__bottom {\\n  display: table;\\n  width: 100%;\\n  height: 44px;\\n  margin-top: -12px;\\n  margin-bottom: -8px;\\n}\\n\\n.content__input__bottom__import-export, .content__output__bottom__import-export,\\n.content__input__bottom__format,        .content__output__bottom__result,\\n.content__input__bottom__lint,          .content__output__bottom__lint,\\n.content__input__bottom__mode,          .content__output__bottom__mode\\n{\\n  display: table-cell;\\n  vertical-align: top;\\n}\\n\\n.content__input__bottom__import-export, .content__output__bottom__import-export {\\n  width: 94px;\\n}\\n\\n.content__input__bottom__format, .content__output__bottom__result {\\n  width: 120px;\\n}\\n\\n.content__input__bottom__lint, .content__output__bottom__lint {\\n  float: left;\\n  width: 100%;\\n}\\n\\n.content__input__bottom__mode, .content__output__bottom__mode {\\n  width: 185px;\\n}\\n\\n@media (max-width: 767px) {\\n  .content__input__bottom, .content__output__bottom {\\n    display: block;\\n  }\\n  \\n  .content__input__bottom__format, .content__output__bottom__result,\\n  .content__input__bottom__mode,   .content__output__bottom__mode   {\\n    float: left;\\n    width: 100%;\\n    padding-top: 8px;\\n  }\\n  \\n  .content__input__bottom__lint, .content__output__bottom__lint {\\n    width: 100%;\\n    padding-top: 8px;\\n    padding-right: 0;\\n  }\\n}\\n\",\"ext\":\"css\",\"mode\":\"text/css\"}}",
    "input_js": "{\"index\":{\"name\":\"index\",\"src\":\"\\nindex           = require '../lib/index.ls'\\nComponent       = window.app.Component #require '../../component/jquery/component.ls'\\ncomponent       = new Component index\\nwindow.app.component = component\\ncomponent.debug = window._meta['rcx'].debug\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"meta\":{\"name\":\"meta\",\"src\":\"{\\n  \\\"x+1\\\":    {    \\n    \\\"version\\\": \\\"0.70.0\\\",\\n    \\\"version_vendor\\\": \\\"0.70.0\\\",\\n    \\\"debug\\\":   true,\\n    \\\"dir\\\": \\\"../../\\\"\\n  },\\n  \\\"rcx\\\":        {\\n    \\\"version\\\": \\\"0.50.0\\\",\\n    \\\"version_vendor\\\": \\\"0.32.0\\\",\\n    \\\"debug\\\":   true,\\n    \\\"dir\\\": \\\"../../\\\"\\n  },\\n  \\\"modern-hrm\\\": {\\n    \\\"version\\\": \\\"0.1.0\\\",\\n    \\\"version_vendor\\\": \\\"0.2.0\\\",\\n    \\\"debug\\\":   true,\\n    \\\"dir\\\": \\\"../../\\\"\\n  }\\n}\",\"ext\":\"js\",\"mode\":\"text/javascript\"},\"lib/props/lib\":{\"name\":\"lib/props/lib\",\"src\":\"\\nprops = {}\\n\\nif typeof module == 'object' then module.exports = props\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"lib/props/store\":{\"name\":\"lib/props/store\",\"src\":\"\\nprops = {}\\n\\nif typeof module == 'object' then module.exports = props\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"lib/props/boot\":{\"name\":\"lib/props/boot\",\"src\":\"\\nprops = \\n  layout:\\n    id:      'content__layout__select'\\n    options: [{value: 'Layout - Split'}, {value: 'Layout - Split VTab'}, {value: 'Layout - Combined'}]\\n  options:\\n    store_data:\\n      id:      'content__option__store__data', config: 'store_data',\\n      options: [\\n        {value: 'Static'},{value: 'Browser (LocalStorage)'},{value: 'Browser (IndexedDB)'},\\n        {value: 'Server (AJAX)'},{value: 'Server (DOM)'},{value: 'Cloud (Firebase)'},\\n      ]\\n      inputs: ['db_url', 'table', 'others']\\n    # Run:Default\\n    # Run:Markdown\\n    run_preprocessor_md:   id: 'content__option__run__md'     title: 'Marked'\\n    # Run:Template\\n    run_preprocessor_jade: id: 'content__option__run__jade'   title: 'Jade'\\n    # Run:Preprocessor\\n    run_preprocessor_less: id: 'content__option__run__less'   title: 'Less'\\n    run_preprocessor_sass: id: 'content__option__run__sass'   title: 'Sass'\\n    run_preprocessor_styl: id: 'content__option__run__styl'   title: 'Stylus'\\n    # Run:Transpiler\\n    run_transpiler_babel:  id: 'content__option__run__babel'  title: 'Babel'\\n    run_transpiler_ts:     id: 'content__option__run__ts'     title: 'TypeScript'\\n    run_transpiler_cs:     id: 'content__option__run__cs'     title: 'CoffeeScript'\\n    run_transpiler_ls:     id: 'content__option__run__ls'     title: 'LiveScript'\\n\\nif typeof module == 'object' then module.exports = props\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"lib/props/main\":{\"name\":\"lib/props/main\",\"src\":\"\\nprops = \\n  editors:\\n    inputs:\\n      html:\\n        context: 'inputs', entity: 'html'\\n        id: 'content__input__html__editor'\\n        type: 'text/html', ext: 'html'\\n        onChange: 'inputOnEditorChange'\\n      css:\\n        context: 'inputs', entity: 'css'\\n        id: 'content__input__css__editor'\\n        type: 'text/css', ext: 'css'\\n        onChange: 'inputOnEditorChange'\\n      js:\\n        context: 'inputs', entity: 'js'\\n        id: 'content__input__js__editor'\\n        type: 'text/javascript', ext: 'js'\\n        onChange: 'inputOnEditorChange'\\n    outputs:\\n      index: \\n        context: 'outputs', entity: 'index'\\n        id: 'content__output__index__editor'\\n        type: 'text/html', ext: 'html'\\n  files:\\n    inputs:\\n      html: \\n        context: 'inputs', entity: 'html'\\n        id: 'content__input__html__file'\\n        options: [{value: 'index'}]\\n        onChange: 'inputOnFileChange', onCreate: 'inputOnFileCreate'\\n        destroyable: 'inputDestroy', creatable: 'inputOnFileCreateModal'\\n      css: \\n        context: 'inputs', entity: 'css'\\n        id: 'content__input__css__file'\\n        options: [{value: 'index'}]\\n        onChange: 'inputOnFileChange', onCreate: 'inputOnFileCreate'\\n        destroyable: 'inputDestroy', creatable: 'inputOnFileCreateModal'\\n      js: \\n        context: 'inputs', entity: 'js'\\n        id: 'content__input__js__file'\\n        options: [{value: 'index'}]\\n        onChange: 'inputOnFileChange', onCreate: 'inputOnFileCreate'\\n        destroyable: 'inputDestroy', creatable: 'inputOnFileCreateModal'\\n    outputs:\\n      index: \\n        context: 'outputs', entity: 'index'\\n        id: 'content__output__index__file'\\n        options: [{value: 'index'}]\\n  exts:\\n    inputs:\\n      html: \\n        context: 'inputs', entity: 'html'\\n        id: 'content__input__html__ext'\\n        options: [\\n          {value: 'html'}, {value: 'md'}, {value: 'jade'}\\n        ]\\n        onChange: 'inputOnExtChange'\\n      css: \\n        context: 'inputs', entity: 'css'\\n        id: 'content__input__css__ext'\\n        options: [\\n          {value: 'css'}, {value: 'less'}, {value: 'sass'}, {value: 'styl'}\\n        ]\\n        onChange: 'inputOnExtChange'\\n      js: \\n        context: 'inputs', entity: 'js'\\n        id: 'content__input__js__ext'\\n        options: [\\n          {value: 'js'}, {value: 'cs'}, {value: 'ls'}, {value: 'ts'}, {value: 'babel.js'}\\n        ]\\n        onChange: 'inputOnExtChange'\\n    outputs:\\n      index: \\n        context: 'outputs', entity: 'index'\\n        id: 'content__output__index__ext'\\n        options: [{value: 'html'}]\\n        onChange: 'outputOnExtChange'\\n  modes:\\n    inputs:\\n      html: \\n        context: 'inputs', entity: 'html'\\n        id:      'content__input__html__mode'\\n        options: [\\n          {value: 'text/html'}, \\n          {value: 'text/x-markdown'}, {value: 'text/x-jade'},\\n        ]\\n        onChange: 'inputOnModeChange'\\n      css: \\n        context: 'inputs', entity: 'css'\\n        id:      'content__input__css__mode'\\n        options: [\\n          {value: 'text/css'}, \\n          {value: 'text/x-less'}, {value: 'text/x-sass'}, {value: 'text/x-styl'},\\n        ]\\n        onChange: 'inputOnModeChange'\\n      js: \\n        context: 'inputs', entity: 'js'\\n        id:      'content__input__js__mode'\\n        options: [\\n          {value: 'text/javascript'}, {value: 'text/x-livescript'}, {value: 'text/x-coffeescript'}, \\n          {value: 'text/typescript'}\\n        ]\\n        onChange: 'inputOnModeChange'\\n    outputs:\\n      index: \\n        context: 'outputs', entity: 'index'\\n        id:      'content__output__index__mode'\\n        options: [{value: 'text/html'}]\\n        onChange: 'outputOnModeChange'\\n  lint:\\n    inputs:\\n      html:\\n        context:  'inputs', entity: 'html'\\n        id:       'content__input__html__lint'\\n        onChange: 'inputOnLintChange'\\n      css:\\n        context:  'inputs', entity: 'css'\\n        id:       'content__input__css__lint'\\n        onChange: 'inputOnLintChange'\\n      js:\\n        context:  'inputs', entity: 'js'\\n        id:       'content__input__js__lint'\\n        onChange: 'inputOnLintChange'\\n    outputs:\\n      index: \\n        context:  'outputs', entity: 'index'\\n        id:       'content__output__index__lint'\\n        onChange: 'outputOnLintChange'\\n  result:\\n    outputs:\\n      index: \\n        context: 'outputs', entity: 'index'\\n        id:      'content__output__index__result'\\n        options: [{value: 'frame'}, {value: 'editor'}]\\n        onChange: 'outputOnResultChange'\\n  urlhash:\\n    outputs:\\n      index: \\n        context: 'outputs', entity: 'index'\\n        id:      'content__output__index__urlhash'\\n        options: [{value: '#/'}]\\n        onChange: 'outputOnUrlhashChange', onCreate: 'outputOnUrlhashCreate'\\n\\nif typeof module == 'object' then module.exports = props\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"lib/props/admin\":{\"name\":\"lib/props/admin\",\"src\":\"\\nprops = \\n  src:\\n    id: 'content__admin__src'\\n    options: [\\n      {value: 'Static'},{value: 'Browser (LocalStorage)'},{value: 'Browser (IndexedDB)'},\\n      {value: 'Server (AJAX)'},{value: 'Server (DOM)'},{value: 'Cloud (Firebase)'},\\n    ]\\n    onChange: 'elementOnSrcChange'\\n    option_store_id:     'content__option__store__data'\\n    option_store_inputs: ['db_url', 'table', 'others']\\n  select:\\n    id: 'content__admin__select'\\n    onChange: 'elementOnSelectChange', onCreate: 'elementOnSelectCreate'\\n    destroyable: 'elementDestroy', refreshable: 'elementRefresh'\\n    creatable: 'elementOnSelectCreate', updatable: 'elementUpdate', \\n    clonable: 'elementClone', replaceable: 'elementReplace'\\n    options_clone: [\\n      {value: 'Template - HTML, CSS, JS'}, \\n      {value: 'Template - Jade, CSS, JS'},\\n      {value: 'Clone'},\\n    ]\\n  route:\\n    routes:\\n      '/id/:id':                 'elementOnRouteById'\\n      #'/name/?((\\\\w|.)*)':        'elementOnRouteByName'\\n      '/create':                 'elementOnRouteCreate'\\n      '/update/:id/?((\\\\w|.)*)':  'elementOnRouteUpdate'\\n      '/destroy/:id':            'elementOnRouteDestroy'\\n      '/data/:adapter':          'elementOnRouteData'\\n      '/meta/?((\\\\w|.)*)':        'elementOnRouteMeta'\\n      '/meta-script/?((\\\\w|.)*)': 'elementOnRouteMetaScript'\\n  sample:\\n    id: 'content__admin__sample'\\n    options: [\\n      {value: 'Template - HTML, CSS, JS'}, \\n      {value: 'Template - Jade, CSS, JS'},\\n      {value: 'Clone'},\\n    ]\\n    onChange: 'elementOnSampleChange'\\n  view:\\n    id: 'content__admin__view'\\n    options: [{value: 'Tree'}, {value: 'List'}]\\n    #options: [{value: 'Tree - Data'}, {value: 'List - Data'}, {value: 'List - Input'},]\\n    onChange: 'elementOnViewChange',\\n  tree:\\n    data:\\n      id:  'content__admin__tree'\\n      eventable: 'treeDataMakeEventable', searchable: 'treeDataMakeSearchable'\\n  list:\\n    data:\\n      id:  'content__admin__list'\\n      searchable: 'listDataMakeSearchable'\\n      editable: 'listDataMakeEditable', checkallable: 'listDataMakeCheckallable'\\n\\nif typeof module == 'object' then module.exports = props\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"lib/props/util\":{\"name\":\"lib/props/util\",\"src\":\"\\nprops = \\n  formats:\\n    inputs:\\n      html:\\n        context: 'inputs', entity: 'html'\\n        id: 'content__input__html__format'\\n        options: [{value: 'editor'}, {value: 'json'}, {value: 'zip'}]\\n      css:\\n        context: 'inputs', entity: 'css'\\n        id: 'content__input__css__format'\\n        options: [{value: 'editor'}, {value: 'json'}, {value: 'zip'}]\\n      js:\\n        context: 'inputs', entity: 'js'\\n        id: 'content__input__js__format'\\n        options: [{value: 'editor'}, {value: 'json'}, {value: 'zip'}]\\n    admin:\\n      index:\\n        context: 'admin', entity: 'index'\\n        id: 'content__admin__format'\\n        options: [{value: 'json'}, {value: 'zip'}]\\n        onChange: 'formatOnImportDataChange'\\n\\nif typeof module == 'object' then module.exports = props\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"index/lib/index/lib\":{\"name\":\"index/lib/index/lib\",\"src\":\"\\nlib = \\n  props:             \\n    _title:      'rcx'\\n    lib:         require '../../../lib/props/lib.ls'\\n    store:       require '../../../lib/props/store.ls'\\n    boot:        require '../../../lib/props/boot.ls'\\n    main:        require '../../../lib/props/main.ls'\\n    admin:       require '../../../lib/props/admin.ls'\\n    util:        require '../../../lib/props/util.ls'\\n  samples:\\n    'Template - HTML, CSS, JS':\\n      input_html:\\n        index:\\n          name:    'index', ext: 'html', mode: 'text/html'\\n          src:     require 'raw!../../../lib/samples/html-css-js/index.html.txt'\\n      input_css:\\n        index:\\n          name:    'index', ext: 'css', mode: 'text/css'\\n          src:     require 'raw!../../../lib/samples/html-css-js/index.css.txt'\\n      input_js:\\n        index:\\n          name:    'index', ext: 'js', mode: 'text/javascript'\\n          src:     require 'raw!../../../lib/samples/html-css-js/index.js.txt'\\n    'Template - Jade, CSS, JS':\\n      input_html:\\n        index:\\n          name:    'index', ext: 'jade', mode: 'text/x-jade'\\n          src:     require 'raw!../../../lib/samples/jade-css-js/index.jade.txt'\\n      input_css:\\n        index:\\n          name:    'index', ext: 'css', mode: 'text/css'\\n          src:     require 'raw!../../../lib/samples/jade-css-js/index.css.txt'\\n      input_js:\\n        index:\\n          name:    'index', ext: 'js', mode: 'text/javascript'\\n          src:     require 'raw!../../../lib/samples/jade-css-js/index.js.txt'\\n    'Clone':\\n      input_html:\\n        index:\\n          name:    'index', ext: 'html', mode: 'text/html'\\n          src:     '\\\\r\\\\n\\\\r\\\\n'\\n      input_css:\\n        index:\\n          name:    'index', ext: 'css', mode: 'text/css'\\n          src:     '\\\\r\\\\n\\\\r\\\\n'\\n      input_js:\\n        index:\\n          name:    'index', ext: 'js', mode: 'text/javascript'\\n          src:     '\\\\r\\\\n\\\\r\\\\n'\\n\\nif typeof module == 'object' then module.exports = lib\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"index/lib/index/stores\":{\"name\":\"index/lib/index/stores\",\"src\":\"\\nStores = \\n  static:         require '../../../store/static/js/store.ls'\\n  indexeddb:      require '../../../store/browser/indexeddb-dexie/store.ls'\\n  localstorage:   require '../../../store/browser/localstorage-lowdb/store.ls'\\n  ajax:           require '../../../store/server/ajax-jquery/store.ls'\\n  dom:            require '../../../store/server/dom-jquery/store.ls'\\n  firebase:       require '../../../store/cloud/firebase/store.ls'\\n\\nif typeof module == 'object' then module.exports = Stores\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"store/static/js\":{\"name\":\"store/static/js\",\"src\":\"\\nStore     = (o) !-> # ?db_url, ?table, ?others\\n  @db_url = o.db_url || null\\n  @table  = o.table  || null\\n  @id     = 0\\n  @list   = []\\n  @_load  (o.others || '{}')\\nStore::   =\\n  constructor: Store\\n  \\n  create: (attrs, cb) !-> # cb item{}\\n    if   !attrs.id then attrs.id = ++@id\\n    else  attrs.id = parseInt attrs.id\\n    @list.push attrs\\n    item = attrs\\n    if cb then cb item\\n\\n  find: (id, cb) !-> # cb item{}\\n    item = {}\\n    idInt = parseInt id\\n    for let el in @list\\n      if el.id == idInt then item := el\\n    if cb then cb item\\n\\n  findAll: (cb) !-> # cb items[]\\n    if cb then cb @list  \\n    @list\\n\\n  findByAttr: (attr, value, cb) !-> # cb item{}\\n    item = {}\\n    for let el in @list\\n      if el[attr] == value then item := el\\n    if cb then cb item\\n\\n  update: (id, attrs, cb) !-> # cb item{}\\n    item = {}\\n    idInt = parseInt id\\n    for let el, i in @list\\n      if el.id == idInt\\n        for key of attrs\\n          if key == 'id' then @list[i][key] = parseInt attrs[key]\\n          else @list[i][key] = attrs[key]\\n        item := @list[i]\\n    if cb then cb item\\n\\n  destroy: (id, cb) !-> # cb id\\n    item = {}\\n    index = -1\\n    idInt = parseInt id\\n    for let el, i in @list\\n      if el.id == idInt\\n        index := i\\n        item  := el\\n    if index > -1 then @list.splice index, 1\\n    id = idInt\\n    if cb then cb id\\n    \\n  importTable: (table, list, cb) !-> # cb!\\n    @id = 0; @list = []\\n    for el, i in list\\n      /*\\n      if !el.id \\n        el.id = ++@id\\n      else \\n        ++@id\\n        el.id = parseInt el.id\\n      */\\n      el.id = ++@id\\n      @list.push el\\n    if cb then cb!\\n    \\n  importDb: (db, cb) !-> # cb!\\n    if cb then cb!\\n  \\n  groupByKey: (key, cb) !-> # cb group{}\\n    group = {}\\n    for let el, i in @list\\n      group[el[key]] = count: 0\\n    for let index, obj of group\\n      for let el, i in @list\\n        if el[key] == index\\n          group[index].count++\\n    if cb then cb group\\n\\n  autoload: (component, checked) !->\\n    load = !->\\n      console.log 'Autoload', component.id\\n      clearTimeout component.delays.load\\n      component.loadByIdAuto!\\n      component.delays.load = setTimeout (!-> load!), 1000\\n    if component.id && checked\\n      load!\\n    else \\n      clearTimeout component.delays.load\\n\\n  _load: (others) !->\\n    others = if others == '' then '{}' else others\\n    cb = !-> app.component.elementRefresh!\\n    try\\n      @others = JSON.parse others\\n      if (@db_url) && (@others.script) # script\\n        script     = document.createElement 'script'\\n        script.src = @db_url\\n        script.onload = cb\\n        document.body.appendChild script\\n      else if (@db_url) # ajax\\n        $.get @db_url, (list) !->\\n          if list['data'] then list = list['data']\\n          app.component.dataImportTable list: list, cb: cb\\n    catch e\\n      console.log e\\n  \\n\\nif typeof module == 'object' then module.exports = Store\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"store/browser/indexeddb-dexie\":{\"name\":\"store/browser/indexeddb-dexie\",\"src\":\"\\nwindow.db_dexie = \\n  rcx: new Dexie 'rcx'\\n  _schemas:\\n    rcx: {}\\n  _table:\\n    rcx: {}\\n  _version:  (db, version, schema) !->\\n    window.db_dexie._schemas[db][version] = schema\\n  _init:     (db) !->\\n    for version, schema of window.db_dexie._schemas[db]\\n      window.db_dexie[db].version version .stores schema\\n    window.db_dexie[db].open!\\n\\nwindow.db_dexie._version 'rcx', 1, do\\n  data: '++id, name'\\n\\nwindow.db_dexie._init 'rcx'\\n\\n#require './store-db.ls'\\n\\nStore     = (o) !-> # db_url, table\\n  @db_url = window.db_dexie[o.db_url]\\n  @table  = o.table\\nStore::   =\\n  constructor: Store\\n  \\n  create: (attrs, cb) !-> # attrs{}, cb(item{})\\n    @db_url[@table].add attrs\\n    .then (id) !-> \\n      attrs.id = id\\n      item = attrs\\n      if cb then cb item\\n\\n  find: (id, cb) !-> # id, cb(item{})\\n    idInt = parseInt id\\n    @db_url[@table].get idInt, (item) !-> \\n      if cb then cb item\\n\\n  findByAttr: (attr, value, cb) !-> # attr, value, cb(item{})\\n\\n  findAll: (cb) !-> # cb(items[{}])\\n    items = []\\n    @db_url[@table].each (item) !->\\n      items.push item\\n    .then !-> \\n      if cb then cb items\\n\\n  update: (id, attrs, cb) !-> # id, attrs{}, cb(item{})\\n    idInt    = parseInt id\\n    attrs.id = idInt\\n    @db_url[@table].update idInt, attrs\\n    .then !->\\n      attrs.id = idInt\\n      item = attrs\\n      if cb then cb item\\n\\n  destroy: (id, cb) !-> # cb(id)\\n    idInt = parseInt id\\n    @db_url[@table].delete idInt\\n    .then !-> \\n      id = idInt\\n      if cb then cb id\\n    \\n  importTable: (table, list, cb) !-> # cb()\\n    _this = @\\n    @db_url.transaction 'rw', @table, ->\\n      _this.db_url[_this.table].clear!\\n    .then !-> \\n      for el, i in list\\n        _this.db_url[_this.table].put el\\n    .then !-> \\n      cb!\\n  \\n  groupByKey: (key, cb) !-> # cb(group{})\\n    _this = @\\n    group = {}\\n    @db_url[@table].orderBy key .uniqueKeys!\\n    .then (keys) ->\\n      group[''] = count: 0\\n      for let key, index in keys\\n        group[key] = \\n          count: 0\\n    .then ->\\n      _this.db_url[_this.table].each (item) !-> \\n        group[item[key] || ''].count++\\n    .then !-> \\n      cb group\\n  \\n  autoload: (component, checked) !->\\n    load = !->\\n      console.log 'Autoload', component.id\\n      clearTimeout component.delays.load\\n      component.loadByIdAuto!\\n      component.delays.load = setTimeout (!-> load!), 1000\\n    if component.id && checked\\n      load!\\n    else \\n      clearTimeout component.delays.load\\n\\nif typeof module == 'object' then module.exports = Store\\n\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"store/browser/localstorage-lowdb\":{\"name\":\"store/browser/localstorage-lowdb\",\"src\":\"\\nwindow.db_lowdb = low 'rcx', storage: low.localStorage\\nwindow.db_lowdb._.mixin window._\\n\\n#require './store-db.ls'\\n\\nStore     = (o) !-> # db_url, table\\n  @db_url = window.db_lowdb\\n  @table  = o.table\\nStore::   =\\n  constructor: Store\\n  \\n  create: (attrs, cb) !-> # attrs{}, cb(item{})\\n    item = _.insert (@db_url @table).value!, attrs\\n    @db_url.write!\\n    if cb then cb item\\n\\n  find: (id, cb) !-> # id, cb(item{})\\n    item = _.getById (@db_url @table).value!, id\\n    if cb then cb (item || {})\\n\\n  findByAttr: (attr, value, cb) !-> # attr, value, cb(item{})\\n\\n  findAll: (cb) !-> # cb(items[{}])\\n    items = []\\n    items = (@db_url @table).value!\\n    if cb then cb (items || [])\\n\\n  update: (id, attrs, cb) !-> # id, attrs{}, cb(item{})\\n    item = _.updateById (@db_url @table).value!, id, attrs\\n    @db_url.write!\\n    if cb then cb (item || {})\\n\\n  destroy: (id, cb) !-> # id, cb(id)\\n    item = _.removeById (@db_url @table).value!, id\\n    @db_url.write!\\n    if cb then cb (item || '')\\n    \\n  importTable: (table, list, cb) !-> # table, list[{}], cb()\\n    @db_url.object[@table] = list\\n    @db_url.write!\\n    if cb then cb!\\n    \\n  importDb: (lists, cb) !-> # lists{[{}]}, cb()\\n    @db_url.object = {}\\n    for let i, el of lists\\n      @db_url.object[i] = el\\n    @db_url.write!\\n    if cb then cb!\\n    \\n  exportDb: (cb) !-> # cb()\\n    lists = @db_url.object\\n    if cb then cb (lists || {})\\n  \\n  groupByKey: (key, cb) !-> # cb(group{})\\n    _this = @\\n    group = {}\\n    @db_url[@table].orderBy key .uniqueKeys!\\n    .then (keys) ->\\n      group[''] = count: 0\\n      for let key, index in keys\\n        group[key] = \\n          count: 0\\n    .then ->\\n      _this.db_url[_this.table].each (item) !-> \\n        group[item[key] || ''].count++\\n    .then !->\\n      cb (group || {})\\n    \\n  autoload: (component, checked) !->\\n    load = !->\\n      console.log 'Autoload', component.id\\n      clearTimeout component.delays.load\\n      component.loadByIdAuto!\\n      component.delays.load = setTimeout (!-> load!), 1000\\n    if component.id && checked\\n      load!\\n    else \\n      clearTimeout component.delays.load\\n\\nif typeof module == 'object' then module.exports = Store\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"store/server/ajax-jquery\":{\"name\":\"store/server/ajax-jquery\",\"src\":\"\\nStore     = (o) !-> # db_url, table\\n  @db_url = o.db_url\\n  @table  = o.table  || null\\nStore::   =\\n  constructor: Store\\n  \\n  create: (attrs, cb) !-> # cb item{}\\n    $.post @db_url + '/create', attrs, (item) !->\\n      if cb then cb JSON.parse item\\n\\n  find: (id, cb) !-> # cb item{}\\n    $.get @db_url + '/find/' + id, (data) !->\\n      if cb then cb JSON.parse data\\n\\n  findAll: (cb) !-> # cb items[]\\n    $.get @db_url + '/find-all/', (data) !->\\n      if cb then cb JSON.parse data\\n\\n  update: (id, attrs, cb) !-> # cb item{}\\n    attrs.id = id\\n    $.post @db_url + '/update', attrs, (item) !->\\n      if cb then cb JSON.parse item\\n\\n  destroy: (id, cb) -> # cb id\\n    $.post @db_url + '/destroy', id: id, (item) !->\\n      if cb then cb JSON.parse item\\n  \\n  groupByKey: (key, cb) !-> # cb group{}\\n    @findAll (data) !->\\n      group = {}\\n      for let el, i in data\\n        group[el[key]] = count: 0\\n      for let index, obj of group\\n        for let el, i in data\\n          if el[key] == index\\n            group[index].count++\\n      if cb then cb group\\n    \\n  importTable: (table, cb) !-> # cb!\\n    table = JSON.stringify table\\n    $.post @db_url + '/import-table', table: table, !->\\n      if cb then cb!\\n    \\n  importDb: (db, cb) !-> # cb!\\n    db = JSON.stringify db\\n    $.post @db_url + '/import-db', db: db, !->\\n      if cb then cb!\\n    \\n  autoload: (component, checked) !->\\n    load = !->\\n      console.log 'Autoload', component.id.main\\n      clearTimeout component.delays.load\\n      component.loadByIdAuto!\\n      component.delays.load = setTimeout (!-> load!), 1000\\n    if component.id && checked\\n      load!\\n    else \\n      clearTimeout component.delays.load\\n\\nif typeof module == 'object' then module.exports = Store\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"store/server/dom-jquery\":{\"name\":\"store/server/dom-jquery\",\"src\":\"\\nStore     = (o) !-> # db_url, table\\n  @db_url = o.db_url\\n  @table  = o.table  || null\\nStore::   =\\n  constructor: Store\\n  \\n  create: (attrs, cb) !-> # cb item{}\\n    @_post attrs, (@db_url + '/create'), cb\\n\\n  find: (id, cb) !-> # cb item{}\\n    if id then @_get (@db_url + '/find/' + id), cb\\n\\n  findAll: (cb) !-> # cb items[]\\n    @_get (@db_url + '/find-all'), cb\\n\\n  update: (id, attrs, cb) !-> # cb item{}\\n    if id \\n      attrs.id = id\\n      @_post attrs, (@db_url + '/update'), cb\\n\\n  destroy: (id, cb) -> # cb id\\n    if id then @_post id: id, (@db_url + '/destroy'), cb\\n  \\n  groupByKey: (key, cb) !-> # cb group{}\\n    @findAll (data) !->\\n      group = {}\\n      for let el, i in data\\n        group[el[key]] = count: 0\\n      for let index, obj of group\\n        for let el, i in data\\n          if el[key] == index\\n            group[index].count++\\n      if cb then cb group\\n    \\n  importTable: (table, cb) !-> # cb!\\n    table = JSON.stringify table\\n    $.post @db_url + '/import-table', table: table, !->\\n      if cb then cb!\\n    @_post table: table, (@db_url + '/destroy'), cb\\n    \\n  importDb: (db, cb) !-> # cb!\\n    db = JSON.stringify db\\n    $.post @db_url + '/import-db', db: db, !->\\n      if cb then cb!\\n    @_post db: db, (@db_url + '/import-db'), cb\\n    \\n  autoload: (component, checked) !->\\n    load = !->\\n      console.log 'Autoload', component.id.main\\n      clearTimeout component.delays.load\\n      component.loadByIdAuto!\\n      component.delays.load = setTimeout (!-> load!), 1000\\n    if component.id && checked\\n      load!\\n    else \\n      clearTimeout component.delays.load\\n      \\n  _get: (url, cb) !->\\n    #app.component.response.script_cb = (resp) !-> cb resp\\n    $.getScript (url + '?cb=script'), !->\\n      cb app.component.response.script # ~ onload\\n      \\n  _post: (attrs, url, cb) !->\\n    app.component.response.form_cb = (resp) !-> cb resp\\n    form = $ '\\n      <form id=\\\"_form\\\" style=\\\"visibility: hidden;\\\" \\n      action=\\\"' + url + '?iframe=true\\\" method=\\\"POST\\\" target=\\\"_form-target\\\">\\n      </form>\\n    '\\n    for let i, el of attrs\\n      form.append '<input id=\\\"_form-' + i + '\\\" name=\\\"' + i + '\\\">'\\n    $ 'body' .append form\\n    for let i, el of attrs\\n      $ ('#_form-' + i) .val (el + '')\\n    form.submit!\\n    $ '#_form' .remove!\\n\\nif typeof module == 'object' then module.exports = Store\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"store/cloud/firebase\":{\"name\":\"store/cloud/firebase\",\"src\":\"\\nStore     = (o) !-> # db_url, table\\n  @db_url = new Firebase o.db_url\\n  @table  = o.table\\nStore::   =\\n  constructor: Store\\n  \\n  create: (attrs, cb) !-> # cb item{}\\n    _this = @\\n    id = @db_url.child @table .push attrs, (e) !->\\n      attrs.id = id.key!\\n      _this.db_url.child _this.table\\n      .child attrs.id .update attrs\\n      item = attrs\\n      if cb then cb item\\n\\n  find: (id, cb) !-> # cb item{}\\n    @db_url.child @table\\n    .child id .once 'value', (snapshot) !->\\n      item = snapshot.val!\\n      if cb then cb item\\n\\n  findAll: (cb) !-> # cb items[]\\n    _this = @\\n    @db_url.once 'value', (snapshot) !->\\n      val = snapshot.val!\\n      items = $.map val[_this.table], (value, index) -> \\n        value.id = index\\n        [value]\\n      if cb then cb items\\n  \\n  findByAttr: (attr, value, cb) !-> # cb item{}\\n\\n  update: (id, attrs, cb) !->\\n    @db_url.child @table\\n    .child id .update attrs\\n    attrs.id = id\\n    item = attrs\\n    if cb then cb item\\n\\n  destroy: (id, cb) !-> # cb id\\n    @db_url.child @table\\n    .child id .remove!\\n    if cb then cb id\\n    \\n  importTable: (table, cb) !-> # cb!\\n  \\n  groupByKey: (key, cb) !-> # cb group{}\\n  \\n  autoload: (component, checked) !->\\n    load = !-> \\n      console.log 'Autoload', component.id\\n      component.loadByIdAuto!\\n    db_url = component.config.store_data.firebase.db_url\\n    table  = component.config.store_data.firebase.table\\n    component.child  = new Firebase (db_url + '/' + table + '/' + component.id)\\n    if component.id && checked\\n      component.child.on  'value', load\\n    else\\n      component.child.off 'value', load\\n\\nif typeof module == 'object' then module.exports = Store\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"store/lib/_store\":{\"name\":\"store/lib/_store\",\"src\":\"\\nStore     = (o) !-> # db_url, table\\n  @db_url = new <Store> o.db_url\\n  @table  = o.table || null\\nStore::   =\\n  constructor: Store\\n  \\n  create: (attrs, cb) !-> # cb item{}\\n  \\n  #createMany: (list, cb) !-> # cb items[]\\n  \\n  find: (id, cb) !-> # cb item{}\\n  \\n  findByAttr: (attr, value, cb) !-> # cb item{}\\n  \\n  findAll: (cb) !-> # cb items[]\\n  \\n  #findMany: (ids, cb) !-> # cb items[]\\n  \\n  #findManyByAttr: (attr, value, cb) !-> # cb items[]\\n  \\n  update: (id, attrs, cb) !-> # cb item{}\\n  \\n  #updateByAttr: (attr, attrs, cb) !-> # cb items{}\\n  \\n  #updateMany: (ids, list, cb) !-> # cb items[]\\n  \\n  #updateManyByAttr: (attr, attrs, cb) !-> # cb items[]\\n  \\n  destroy: (id, cb) !-> # cb id\\n  \\n  #destroyByAttr: (attr, cb) !-> # cb id\\n  \\n  #destroyMany: (ids, cb) !-> # cb ids[]\\n  \\n  #destroyManyByAttr: (attr, cb) !-> # cb ids[]\\n  \\n  importTable: (table, list, cb) !-> # cb!\\n  \\n  #importDb: (lists, cb) !-> # cb!\\n  \\n  #exportDb: (lists, cb) !-> # cb!\\n  \\n  groupByKey: (key, cb) !-> # cb group{}\\n  \\n  autoload: (component, checked) !-> \\n\\nif typeof module == 'object' then module.exports = Store\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"index/lib/index/templates\":{\"name\":\"index/lib/index/templates\",\"src\":\"    \\ntemplates = \\n  layout:\\n    split:      require '../../../template/jade/template-layout/layout-split.jade'\\n    split_vtab: require '../../../template/jade/template-layout/layout-split-vtab.jade'\\n    combined:   require '../../../template/jade/template-layout/layout-combined.jade'\\n  admin:\\n    tree_data:  require '../../../template/jade/template-admin/tree-data.jade'\\n    list_data:  require '../../../template/jade/template-admin/list-data.jade'\\n    #list_input: require '../../../template/jade/template-admin/list-input.jade'\\n\\nif typeof module == 'object' then module.exports = templates\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"index/lib/index\":{\"name\":\"index/lib/index\",\"src\":\"  \\nwindow._meta = require '../../../../../meta.json'\\nlib =          require './index/lib.ls'\\n\\nindex = \\n  Stores:      require './index/stores.ls'\\n  templates:   require './index/templates-jade.ls'\\n  samples:     lib.samples\\n  props:       lib.props\\n  debug:       window._meta['rcx'].debug\\n\\nwindow.data      = (list) !-> \\n  if list['data'] then list = list['data']\\n  app.component.dataImportTable list: list\\n#window.meta      = (meta) !-> # app.component.meta**({ meta: meta })\\nwindow.script    = (resp) !-> \\n  app.component.response.script =  resp\\n  #app.component.response.script_cb resp\\nwindow.onmessage = (msg) !->\\n  app.component.response.form =  msg.data\\n  app.component.response.form_cb msg.data\\n\\nif typeof module == 'object' then module.exports = index\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component\":{\"name\":\"component\",\"src\":\" \\nComponent = (o) !-> # Stores, template, samples, vendors, props, debug\\n  @Stores    = o.Stores\\n  @templates = o.templates\\n  @samples   = o.samples || {} # ?\\n  @props     = o.props # (~ optional)\\n  @debug     = o.debug || true #\\n\\nComponent::  = \\n  constructor: Component\\n  \\n  init: (o) !->\\n    _this = @; if @debug then console.log 'Init!'\\n    \\n    window.require = (o) -> ((o) !->) # ?\\n    \\n    (require './component/lib.ls')   Component\\n    (require './component/store.ls') Component\\n    (require './component/boot.ls')  Component\\n    (require './component/main.ls')  Component\\n    (require './component/admin.ls') Component\\n    (require './component/util.ls')  Component\\n    #(require './component/user.ls')  Component\\n    \\n    @initLib!\\n    @initStore!\\n    @initBoot!\\n    @initMain!\\n    @initAdmin!\\n    @initUtil!\\n    #@initUser!\\n\\nif typeof module == 'object' then module.exports = Component\\n\\n# Jq (Jquery, Core), Cm (CodeMirror, Editor), Sz (Selectize, Select), Dr (Director, Router)\\n# Mm (Moment, Date), Jz (JSZip, Util)\\n# Fs (FileSaver, File), Fr (FileReader, File), Dt (DataTables, Table), Jt (JsTree, Tree)\\n# Md (Marked, Markdown), Jd (Jade, Template)\\n# Ts (TypeScript, Transpiler), Ls (LiveScript, Transpiler)\\n# Cs (CoffeeScript, Transpiler), Bb (Babel, Transpiler)\\n# Dm (DOM, Browser), Lg (LocalStorage, Browser), Ck (Cookie, Browser)\\n# Dp (DOMParser, Browser), Xz (XMLSerializer, Browser), Cn (Console, Browser)\\n# ..\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/lib\":{\"name\":\"component/lib\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initLib =   !-> @initLibJs!\\n  \\n  o.initLibJs = !->\\n    _this = @; if @debug then console.log 'Lib!'\\n    \\n    (require './lib/console.ls') Component\\n    (require './lib/date.ls')    Component\\n    \\n    @initConsole!\\n    @initDate!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin\":{\"name\":\"component/admin\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initAdmin =   !-> @initAdminJs!\\n  \\n  o.initAdminJs = !->\\n    _this = @; @consoleLog text: 'Admin!'\\n    \\n    @admin = @props.admin\\n\\n    (require './admin/src.ls')       Component\\n    (require './admin/route.ls')     Component\\n    (require './admin/select.ls')    Component\\n    (require './admin/sample.ls')    Component\\n    (require './admin/view.ls')      Component\\n    (require './admin/header.ls')    Component\\n    \\n    (require './admin/tree/data.ls') Component\\n    (require './admin/list/data.ls') Component\\n    \\n    (require './admin/element.ls')   Component\\n\\n    @initSrc!\\n    @initRoute!\\n    @initSelect!\\n    @initSample!\\n    @initView!\\n    @initHeader!\\n    \\n    #@initTreeData!\\n    #@initListData!\\n\\n    @initElement!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/boot\":{\"name\":\"component/boot\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initBoot =   !-> @initBootJs!\\n  \\n  o.initBootJs = !->\\n    _this = @; @consoleLog text: 'Boot!'\\n    \\n    @boot = @props.boot\\n    \\n    (require './boot/default.ls') Component\\n    (require './boot/config.ls')  Component\\n    (require './boot/meta.ls')    Component\\n    (require './boot/layout.ls')  Component\\n    \\n    (require './boot/option/store.ls') Component\\n    (require './boot/option/run.ls')   Component\\n    \\n    @initDefault!\\n    @initConfig!\\n    @initMeta!\\n    @initLayout!\\n    \\n    @initOptionStore!\\n    @initOptionRun!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main\":{\"name\":\"component/main\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initMain =   !-> @initMainJs!\\n  \\n  o.initMainJs = !->\\n    _this = @; @consoleLog text: 'Main!'\\n    \\n    @main = @props.main\\n    \\n    (require './main/editor.ls')  Component\\n    (require './main/file.ls')    Component\\n    (require './main/ext.ls')     Component\\n    (require './main/mode.ls')    Component\\n    \\n    (require './main/frame.ls')   Component\\n    (require './main/urlhash.ls') Component\\n    (require './main/result.ls')  Component\\n    (require './main/lint.ls')    Component\\n    \\n    (require './main/input.ls')   Component\\n    (require './main/output.ls')  Component\\n    \\n    (require './main/script.ls')  Component\\n    (require './main/include.ls') Component\\n    \\n    (require './main/run.ls')     Component\\n    (require './main/save.ls')    Component\\n    (require './main/load.ls')    Component\\n    \\n    @initEditor!\\n    @initFile!\\n    @initExt!\\n    @initMode!\\n    \\n    @initResult!\\n    @initFrame!\\n    @initUrlhash!\\n    @initLint!\\n    \\n    @initInput!\\n    @initOutput!\\n    \\n    @initScript!\\n    @initInclude!\\n    \\n    @initRun!\\n    @initSave!\\n    @initLoad!\\n    \\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/store\":{\"name\":\"component/store\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initStore =   !-> @initStoreJs!\\n  \\n  o.initStoreJs = !->\\n    _this = @; @consoleLog text: 'Store!'\\n    \\n    @store = @props.store\\n    \\n    (require './store/setting.ls') Component\\n    (require './store/data.ls')    Component\\n    \\n    @initSetting!\\n    @initData!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util\":{\"name\":\"component/util\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initUtil =   !-> @initUtilJs!\\n  \\n  o.initUtilJs = !->\\n    _this = @; @consoleLog text: 'Util!'\\n    \\n    @util = @props.util\\n    \\n    (require './util/format.ls') Component\\n    (require './util/export.ls') Component\\n    (require './util/import.ls') Component\\n    # backup, sync, services\\n    \\n    @initFormat!\\n    @initExport!\\n    @initImport!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/lib/console\":{\"name\":\"component/lib/console\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initConsole =    !-> @initConsoleJs!\\n  \\n  o.consoleLog = (o) !-> @consoleLogCn o\\n  \\n  o.initConsoleJs = !->\\n    if @debug then console.log 'Console!'\\n  \\n  o.consoleLogCn = (o) !-> # text\\n    if @debug then console.log o.text\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/lib/date\":{\"name\":\"component/lib/date\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initDate =    !-> @initDateJs!\\n  \\n  o.dateGet = (o)  -> @dateGetMm o\\n  \\n  o.initDateJs = !->\\n    _this = @; @consoleLog text: 'Date!'\\n  \\n  o.dateGetMm = (o) -> # format\\n    _this = @; @consoleLog text: 'Date:Get'\\n    moment!.format o.format\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/boot/config\":{\"name\":\"component/boot/config\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initConfig =     !-> @initConfigJs!\\n  \\n  o.configSet =  (o) !-> @configSetJs o\\n  o.configGet =  (o)  -> @configGetJs o\\n  o.configSave = (o) !-> @configSaveJs o\\n  o.configLoad = (o)  -> @configLoadJs o\\n  \\n  o.initConfigJs = !->\\n    _this = @; @consoleLog text: 'Config!'\\n    \\n    @configLoad!\\n    @configSave!\\n    \\n  o.configSetJs = (o) !-> # config, props, ?save\\n    _this = @; @consoleLog text: 'Config:Set'\\n    save = o.save || true\\n    @config[o.config] = o.props\\n    if save then @configSave!\\n    \\n  o.configGetJs = (o) -> # config\\n    _this = @; @consoleLog text: 'Config:Get'\\n    @config[o.config]\\n    \\n  o.configSaveJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Config:Save'\\n    @settingSet setting: 'config', props: @config\\n    \\n  o.configLoadJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Config:Load'\\n    settings = @settingGet!\\n    if settings.config then @config = settings.config\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/boot/default\":{\"name\":\"component/boot/default\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initDefault =          !-> @initDefaultJs!\\n  \\n  o.defaultMake =      (o) !-> @defaultMakeJs o\\n  o.defaultMakeBoot =  (o) !-> @defaultMakeBootJs o\\n  o.defaultMakeStore = (o) !-> @defaultMakeStoreJs o\\n  o.defaultMakeMain =  (o) !-> @defaultMakeMainJs o\\n  o.defaultMakeAdmin = (o) !-> @defaultMakeAdminJs o\\n  o.defaultMakeUtil =  (o) !-> @defaultMakeUtilJs o\\n  o.defaultMakeUser =  (o) !-> @defaultMakeUserJs o\\n  \\n  o.initDefaultJs = !->\\n    _this = @; @consoleLog text: 'Default!'\\n    \\n    @defaultMake!\\n  \\n  o.defaultMakeJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Default:Make'\\n\\n    @defaultMakeBoot!\\n    @defaultMakeStore!\\n    @defaultMakeMain!\\n    @defaultMakeAdmin!\\n    @defaultMakeUtil!\\n    #@defaultMakeUser!\\n  \\n  o.defaultMakeStoreJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Default:Make:Store'\\n    \\n    @store     = {} \\n    @setting   = 'settings_rcx_self'\\n    @id        = null\\n    @name      = null\\n    @child     = null # firebase\\n    @data      = {}\\n    @repo      = {}\\n    @response  = {script: null, /*script_cb: !->*/, form: null, form_cb: !->} # dom\\n  \\n  o.defaultMakeBootJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Default:Make:Boot'\\n    \\n    @boot      = {} # config\\n    @config    = # config, prop, params\\n      layout: 'split'\\n      store_data:\\n        index:        'static'\\n        static:       {db_url: '',    table: '',     others: '{}'}\\n        indexeddb:    {db_url: 'rcx', table: 'data', others: '{}'}\\n        localstorage: {db_url: 'rcx', table: 'data', others: '{}'}\\n        dom:          {db_url: '',    table: '',     others: '{}'}\\n        ajax:         {db_url: '',    table: '',     others: '{}'}\\n        firebase:     {db_url: '',    table: '',     others: '{}'}\\n      meta: {}\\n    @metas     = {} # ?\\n    @options   =      \\n      stores: {}\\n  \\n  o.defaultMakeMainJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Default:Make:Main'\\n    \\n    @main      = {} # config\\n    @editors   = inputs:  {html: {}, css: {}, js: {}}, outputs: {index: {}}\\n    @files     = inputs:  {html: {}, css: {}, js: {}}, outputs: {index: {}}\\n    @exts      = inputs:  {html: {}, css: {}, js: {}}, outputs: {index: {}}\\n    @modes     = inputs:  {html: {}, css: {}, js: {}}, outputs: {index: {}}\\n    @input     = html: 'index', css: 'index', js: 'index'\\n    @inputs    = html: {}, css: {}, js: {} #(JSON.parse @samples.main['md'].input_html)\\n    @frames    = outputs: {index: {}}\\n    @urlhashes = outputs: {index: {}}\\n    @results   = outputs: {index: {}}\\n    @output    = index: 'index'\\n    @outputs   = index: {'index': {}}\\n    @delays    = run: 0, save: 0, load: 0\\n    @debounces = inputs: {html: 0, css: 0, js: 0}\\n    @runs      = {} # md, html, ..\\n    @scripts   =\\n      # Default\\n      'html': true, 'js': true, 'css': true,\\n      # Markdown\\n      'md': false, \\n      # Template\\n      'jade': false,\\n      # Style\\n      'less': false, 'sass': false, 'styl': false,\\n      # Transpiler\\n      'ls': false, 'babel.js': false, 'ts': false, 'cs': false\\n    @onloads   = {} # md, html, ..\\n    @loadeds   = {} # md, html, ..\\n  \\n  o.defaultMakeAdminJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Default:Make:Admin'\\n    \\n    @admin     = {} # config\\n    @select    = {}\\n    @router    = {}\\n    @src       = {}\\n    @sample    = {}\\n    @view      = {}\\n    @tree      = {}\\n    @list      = {}\\n    @refresh   = !->\\n    @selected  =  ->\\n  \\n  o.defaultMakeUtilJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Default:Make:Util'\\n    \\n    @util      = {} # config\\n    @formats   = \\n      inputs:  {html: {}, css: {}, js: {}}\\n      admin:   {index: {}} \\n  \\n  o.defaultMakeUserJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Default:Make:User'\\n    \\n    @user      = {} # config\\n    @autcd     = true\\n    @autzd     = true\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/boot/layout\":{\"name\":\"component/boot/layout\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initLayout =                  !-> @initLayoutJs!\\n  \\n  o.layoutMake =              (o)  -> @layoutMakeJs o\\n  o.layoutMakeContainer =     (o)  -> @layoutMakeContainerJqSzDr o\\n  o.layoutSetValue =          (o) !-> @layoutSetValueSz o\\n  o.layoutGetValue =          (o)  -> @layoutGetValueSz o\\n  \\n  o.layoutMatchAliasToTitle = (o)  -> @layoutMatchAliasToTitleJs o\\n  o.layoutMatchTitleToAlias = (o)  -> @layoutMatchTitleToAliasJs o\\n  \\n  o.initLayoutJs = !->\\n    _this = @; @consoleLog text: 'Layout!'\\n    \\n    @layoutMake!\\n    \\n  o.layoutMakeJs = (o) -> # \\n    _this = @; @consoleLog text: 'Layout:Make'\\n    layout   = @config.layout\\n    template = @templates.layout[layout]\\n    $ '#app' .html ''\\n    $ '#app' .html template\\n    @layout = @layoutMakeContainer @props.boot.layout\\n    @layoutSetValue value: (@layoutMatchAliasToTitle alias: @config.layout)\\n    \\n  o.layoutMakeContainerJqSzDr = (o) -> # id, options, onChange\\n    _this = @; @consoleLog text: 'Layout:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        layout = _this.layoutMatchTitleToAlias title: value\\n        _this.configSet config: 'layout', props: layout\\n        if _this.router.destroy then _this.router.destroy!\\n        _this.init!\\n      create: false\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.layoutSetValueSz = (o) !-> # value\\n    _this = @; @consoleLog text: 'Layout:Set:Value'\\n    @layout.setValue o.value, ->\\n\\n  o.layoutGetValueSz = (o) -> # value\\n    _this = @; @consoleLog text: 'Layout:Get:Value'\\n    @layout.getValue!\\n   \\n  o.layoutMatchAliasToTitleJs = (o) -> # alias\\n    _this = @; @consoleLog text: 'Layout:Match:Alias:To:Title'\\n    aliases = \\n      'split':      'Layout - Split'\\n      'split_vtab': 'Layout - Split VTab'\\n      'combined':   'Layout - Combined'\\n    aliases[o.alias]\\n   \\n  o.layoutMatchTitleToAliasJs = (o) -> # title\\n    _this = @; @consoleLog text: 'Layout:Match:Title:To:Alias'\\n    titles = \\n      'Layout - Split':      'split'\\n      'Layout - Split VTab': 'split_vtab'\\n      'Layout - Combined':   'combined'\\n    titles[o.title]\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/boot/meta\":{\"name\":\"component/boot/meta\",\"src\":\" \\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initMeta =       !-> @initMetaJs!\\n  \\n  o.metaMake =   (o) !-> @metaMakeJq o\\n  o.metaAction = (o) !-> @metaActionJs o\\n  \\n  o.initMetaJs = !->\\n    _this = @; @consoleLog text: 'Meta!'\\n\\n    @metaMake!\\n  \\n  o.metaActionJs = (o) !-> # meta\\n    _this = @; @consoleLog text: 'Meta:Action'\\n    $ o.meta .each (el, i) !->\\n      _this.metas[o.meta] @dataset\\n\\n  o.metaMakeJq = (o) !-> # \\n    _this = @; @consoleLog text: 'Meta:Make'\\n\\n    data = (o) !-> # prop, db_url, table, others\\n      # prop = adapter\\n      if o.dburl  then _this.config.store_data[o.prop].db_url = o.dburl\\n      if o.table  then _this.config.store_data[o.prop].table  = o.table\\n      if o.others then _this.config.store_data[o.prop].others = o.others\\n\\n    ext = (o) !-> # run, url\\n      if o.url then $ '#content__option__run__' + o.run + '__src' .html o.url\\n\\n    @metas = \\n      # Debug\\n      'meta[data-debug=\\\"data\\\"][data-prop=\\\"index\\\"]': (o) !-> # debug\\n        if o.debug then _this.debug = (o.debug == 'true')\\n        console.clear!\\n      # Store - Data - Index\\n      'meta[data-config=\\\"data\\\"][data-prop=\\\"index\\\"]': (o) !-> # value\\n        if o.value then _this.config.store_data.index = o.value\\n      # Store - Data - Static\\n      'meta[data-config=\\\"data\\\"][data-prop=\\\"static\\\"]': (o) !-> # prop, ?dburl, ?table, ?others\\n        data o\\n      # Store - Data - IndexedDB\\n      'meta[data-config=\\\"data\\\"][data-prop=\\\"indexeddb\\\"]': (o) !-> # prop, dburl, table, ?others\\n        data o\\n      # Store - Data - LocalStorage\\n      'meta[data-config=\\\"data\\\"][data-prop=\\\"localstorage\\\"]': (o) !-> # prop, dburl, table, ?others\\n        data o\\n      # Store - Data - AJAX\\n      'meta[data-config=\\\"data\\\"][data-prop=\\\"ajax\\\"]': (o) !-> # prop, dburl, ?table, ?others\\n        data o\\n      # Store - Data - DOM\\n      'meta[data-config=\\\"data\\\"][data-prop=\\\"dom\\\"]': (o) !-> # prop, dburl, ?table, ?others\\n        data o\\n      # Store - Data - Firebase\\n      'meta[data-config=\\\"data\\\"][data-prop=\\\"firebase\\\"]': (o) !-> # prop, dburl, ?table, ?others\\n        data o\\n      # ..\\n      # Run - Markdown - Marked\\n      'meta[data-ext=\\\"md\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Template - Jade\\n      'meta[data-ext=\\\"jade\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Preprocessor - Less\\n      'meta[data-ext=\\\"less\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Preprocessor - Sass\\n      'meta[data-ext=\\\"sass\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Preprocessor - Stylus\\n      'meta[data-ext=\\\"styl\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Transpiler - Babel\\n      'meta[data-ext=\\\"babel.js\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Transpiler - TypeScript\\n      'meta[data-ext=\\\"ts\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Transpiler - CoffeeScript\\n      'meta[data-ext=\\\"cs\\\"]': (o) !-> # run, url\\n        ext o\\n      # Run - Transpiler - LiveScript\\n      'meta[data-ext=\\\"ls\\\"]': (o) !-> # run, url\\n        ext o\\n      # ..\\n    \\n    for let i, el of @metas\\n      @metaAction meta: i\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/boot/option/run\":{\"name\":\"component/boot/option/run\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initOptionRun =             !-> @initOptionRunJs!\\n  \\n  o.optionRunMakeLoadable = (o) !-> @optionRunMakeLoadableIcJq o\\n  o.optionRunLoadScript =   (o) !-> @optionRunLoadScriptDmJqIc o\\n  o.optionRunGetMode =      (o)  -> @optionRunGetModeJqIc o\\n  \\n  o.initOptionRunJs = !->\\n    _this = @; @consoleLog text: 'Option:Run!'\\n    \\n    # html\\n    @optionRunMakeLoadable @props.boot.options.run_preprocessor_md\\n    @optionRunMakeLoadable @props.boot.options.run_preprocessor_jade\\n    # css\\n    @optionRunMakeLoadable @props.boot.options.run_preprocessor_less\\n    @optionRunMakeLoadable @props.boot.options.run_preprocessor_sass\\n    @optionRunMakeLoadable @props.boot.options.run_preprocessor_styl\\n    # js\\n    @optionRunMakeLoadable @props.boot.options.run_transpiler_babel\\n    @optionRunMakeLoadable @props.boot.options.run_transpiler_ts\\n    @optionRunMakeLoadable @props.boot.options.run_transpiler_cs\\n    @optionRunMakeLoadable @props.boot.options.run_transpiler_ls\\n    \\n    # ?\\n    $ '#content__option__run__mode__front' .iCheck radioClass: 'iradio_minimal'\\n    $ '#content__option__run__mode__index' .iCheck radioClass: 'iradio_minimal'\\n    # ?\\n  \\n  o.optionRunMakeLoadableIcJq = (o) !-> # id, ?title\\n    _this = @; @consoleLog text: 'Option:Run:Make:Loadable'\\n    $ '#' + o.id .iCheck checkboxClass: 'icheckbox_minimal-red'\\n    $ '#' + o.id .on 'ifChecked', !->\\n      ext = $ '#' + o.id + '__ext' .html!\\n      if !_this.scripts[ext]\\n        _this.optionRunLoadScript o\\n\\n  o.optionRunLoadScriptDmJqIc = (o) !-> # id, ?title, ?cb\\n    _this = @; @consoleLog text: 'Option:Run:Load:Script'\\n    script = document.createElement 'script'\\n    ext        = $ '#' + o.id + '__ext' .html!\\n    src        = $ '#' + o.id + '__src' .val!\\n    script.src = src\\n    script.onload = !-> \\n      console.log 'Script loaded', o.title\\n      if _this.onloads[ext] then _this.onloads[ext]!\\n      _this.scripts[ext] = true\\n      $ '#' + o.id .iCheck 'check'\\n      $ '#' + o.id .iCheck 'disable'\\n      if o.cb then o.cb!\\n    try\\n      document.body.appendChild script\\n    catch e\\n      console.log 'Script error', e\\n      $ '#' + o.id .iCheck 'uncheck'\\n\\n  o.optionRunGetModeJqIc = (o) -> # \\n    _this = @; @consoleLog text: 'Option:Run:Get:Mode'\\n    val = $ '.checked input[name=\\\"run__mode\\\"]' .val!\\n    val\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/boot/option/store\":{\"name\":\"component/boot/option/store\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initOptionStore =                    !-> @initOptionStoreJs!\\n  \\n  o.optionStoreMake =                 (o) !-> @optionStoreMakeJs o\\n  o.optionStoreMakeContainer =        (o)  -> @optionStoreMakeContainerSz o\\n  o.optionStoreMakeInputsAutoConfig = (o) !-> @optionStoreMakeInputsAutoConfigJq o\\n  o.optionStoreConfigInputs =         (o) !-> @optionStoreConfigInputsJq o\\n  \\n  o.optionStoreSetValue =             (o) !-> @optionStoreSetValueSz o\\n  o.optionStoreGetValue =             (o)  -> @optionStoreGetValueSz o\\n  o.optionStoreMatchAliasToTitle =    (o)  -> @optionStoreMatchAliasToTitleJs o\\n  o.optionStoreMatchTitleToAlias =    (o)  -> @optionStoreMatchTitleToAliasJs o\\n  \\n  o.optionStoreSetDataHeader =        (o) !-> @optionStoreSetDataHeaderJq o\\n  \\n  o.initOptionStoreJs = !->\\n    _this = @; @consoleLog text: 'Option:Store!'\\n    \\n    @optionStoreMake @props.boot.options.store_data\\n    @optionStoreSetDataHeader title: do\\n      @optionStoreMatchAliasToTitle alias: @config.store_data.index\\n\\n  o.optionStoreMakeJs = (o) !-> # config\\n    _this = @; @consoleLog text: 'Option:Store:Make'\\n    @options[o.config] = @optionStoreMakeContainer o\\n    @optionStoreMakeInputsAutoConfig o\\n    @optionStoreConfigInputs o\\n    @optionStoreSetValue config: o.config, value: do\\n      @optionStoreMatchAliasToTitle alias: @config[o.config].index\\n\\n  o.optionStoreMakeContainerSz = (o) -> # config, options, id\\n    _this = @; @consoleLog text: 'Option:Store:Make:Container'\\n    configSz = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        adapter = _this.optionStoreMatchTitleToAlias title: value\\n        _this.config[o.config].index = adapter\\n        _this.configSet config: o.config, props: _this.config[o.config]\\n        _this.optionStoreConfigInputs o\\n      create: false\\n    $ '#' + o.id .selectize (configSz!) .0 .selectize\\n\\n  o.optionStoreMakeInputsAutoConfigJq = (o) !-> # config, id, inputs\\n    _this = @; @consoleLog text: 'Option:Store:Make:Inputs:Auto:Config'\\n    config  = o.config\\n    for let input, i in o.inputs\\n      id    = o.id + '__' + input\\n      $ '#' + id .on 'change', !->\\n        val     = ($ @ .val!) # db_url / table\\n        adapter = _this.config[o.config].index\\n        _this.config[o.config][adapter][input] = val\\n        _this.configSet config: o.config, props: _this.config[o.config]\\n\\n  o.optionStoreConfigInputsJq = (o) !-> # config, id, inputs\\n    _this = @; @consoleLog text: 'Option:Store:Config:Inputs'\\n    adapter = @config[o.config].index\\n    for let input, i in o.inputs\\n      id      = o.id + '__' + input\\n      val     = @config[o.config][adapter][input]\\n      $ '#' + id .val val\\n\\n  o.optionStoreSetValueSz = (o) !-> # config, value\\n    _this = @; @consoleLog text: 'Option:Store:Set:Value'\\n    @options[o.config].setValue o.value, ->\\n    adapter = @optionStoreMatchTitleToAlias title: o.value\\n    @config[o.config].index = adapter\\n    @configSet config: o.config, props: @config[o.config]\\n    o.id     = 'content__option__store__data'\\n    o.inputs = ['db_url', 'table', 'others']\\n    @optionStoreConfigInputs o\\n\\n  o.optionStoreGetValueSz = (o) -> # config\\n    _this = @; @consoleLog text: 'Option:Store:Get:Value'\\n    @options[o.config].getValue!\\n    \\n  o.optionStoreMatchAliasToTitleJs = (o) -> # alias\\n    _this = @; @consoleLog text: 'Option:Store:Match:Alias:To:Title'\\n    aliases = \\n      'static':       'Static'\\n      'indexeddb':    'Browser (IndexedDB)'\\n      'localstorage': 'Browser (LocalStorage)'\\n      'ajax':         'Server (AJAX)'\\n      'dom':          'Server (DOM)'\\n      'firebase':     'Cloud (Firebase)'\\n    title = aliases[o.alias] || ''\\n    title\\n    \\n  o.optionStoreMatchTitleToAliasJs = (o) -> # title\\n    _this = @; @consoleLog text: 'Option:Store:Match:Title:To:Alias'\\n    titles = \\n      'Static':                 'static'\\n      'Browser (IndexedDB)':    'indexeddb'\\n      'Browser (LocalStorage)': 'localstorage'\\n      'Server (AJAX)':          'ajax'\\n      'Server (DOM)':           'dom'\\n      'Cloud (Firebase)':       'firebase'\\n    alias = titles[o.title] || ''\\n    alias\\n    \\n  o.optionStoreSetDataHeaderJq = (o) !-> # title\\n    _this = @; @consoleLog text: 'Option:Store:Set:Data:Header'\\n    $ '#header__data' .html o.title\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/store/data\":{\"name\":\"component/store/data\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initData =            !-> @initDataJs o\\n  \\n  o.dataMake =        (o) !-> @dataMakeJs o\\n  o.dataCreate =      (o) !-> @dataCreateJs o\\n  o.dataUpdate =      (o) !-> @dataUpdateJs o\\n  o.dataFind =        (o) !-> @dataFindJs o\\n  o.dataFindMany =    (o) !-> @dataFindManyJs o\\n  o.dataFindAll =     (o) !-> @dataFindAllJs o\\n  o.dataDestroy =     (o) !-> @dataDestroyJs o\\n  o.dataImportTable = (o) !-> @dataImportTableJs o\\n  \\n  o.initDataJs    = !->\\n    _this = @; @consoleLog text: 'Data!'\\n  \\n  o.dataMakeJs  = (o) !-> # ?adapter, ?params{}\\n    _this = @; @consoleLog text: 'Data:Make'\\n    adapter = o.adapter || 'static'\\n    params  = o.params  || {}\\n    @data   = new @Stores[adapter] params\\n  \\n  o.dataCreateJs  = (o) !-> # cb(item{}), ?attrs{}\\n    _this = @; @consoleLog text: 'Data:Create'\\n    attrs      = o.attrs || {}\\n    attrs.date = @dateGet format: 'DD/MM/YYYY'\\n    @data.create attrs, o.cb || !->\\n    \\n  o.dataUpdateJs  = (o) !-> # id, attrs{}, cb(item{})\\n    _this = @; @consoleLog text: 'Data:Update'\\n    @data.update o.id, o.attrs, o.cb || !->\\n  \\n  o.dataFindJs    = (o) !-> # id, cb(item{})\\n    _this = @; @consoleLog text: 'Data:Find'\\n    @data.find o.id, o.cb || !->\\n  \\n  o.dataFindManyJs    = (o) !-> # ids, cb(item{})\\n    _this = @; @consoleLog text: 'Data:Find:Many'\\n    @data.findMany o.ids, o.cb || !->\\n  \\n  o.dataFindByAttrJs    = (o) !-> # attr, value, cb(item{})\\n    _this = @; @consoleLog text: 'Data:Find:By:Attr'\\n    @data.findByAttr o.attr, o.value, o.cb || !->\\n  \\n  o.dataFindAllJs = (o) !-> # cb(items[{}])\\n    _this = @; @consoleLog text: 'Data:Find:All'\\n    @data.findAll o.cb || !->\\n  \\n  o.dataDestroyJs = (o) !-> # id, cb(item.id)\\n    _this = @; @consoleLog text: 'Data:Destroy'\\n    @data.destroy o.id, o.cb || !->\\n  \\n  o.dataImportTableJs = (o) !-> # list[{}], cb()\\n    _this = @; @consoleLog text: 'Data:Import:Table'\\n    @data.importTable 'main', o.list, o.cb || !->\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/store/setting\":{\"name\":\"component/store/setting\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initSetting =        !-> @initSettingJs!\\n  \\n  o.settingSet =     (o) !-> @settingSetLg o\\n  o.settingGet =     (o)  -> @settingGetLg o\\n  \\n  o.initSettingJs = !->\\n    _this = @; @consoleLog text: 'Setting!'\\n  \\n  o.settingSetLg = (o) !-> # setting, props\\n    _this = @; @consoleLog text: 'Setting:Set'\\n    settings = @settingGet!\\n    settings[o.setting] = o.props\\n    localStorage.setItem @setting, JSON.stringify settings\\n  \\n  o.settingGetLg = (o) -> #\\n    _this = @; @consoleLog text: 'Setting:Get'\\n    settings = localStorage.getItem @setting\\n    if settings \\n      settings = JSON.parse settings\\n    else\\n      {}\\n\\nif typeof module == 'object' then module.exports = Component\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/editor\":{\"name\":\"component/main/editor\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n\\n  o.initEditor =                !-> @initEditorJs!\\n  \\n  o.editorMakeContainer =   (o)  -> @editorMakeContainerCmJq o\\n  o.editorSetValue =        (o) !-> @editorSetValueCm o\\n  o.editorGetValue =        (o)  -> @editorGetValueCm o\\n  o.editorSetProp =         (o) !-> @editorSetPropCm o\\n  o.editorGetProp =         (o)  -> @editorGetPropCm o\\n  o.editorSetMode =         (o) !-> @editorSetModeCm o\\n  o.editorGetMode =         (o)  -> @editorGetModeCm o\\n  o.editorToggleLint =      (o) !-> @editorToggleLintJqCm o\\n\\n  o.initEditorJs = !->\\n    _this = @; @consoleLog text: 'Editor!'\\n    \\n  o.editorMakeContainerCmJq =  (o) -> # context, entity, id, ?onChange\\n    _this = @; @consoleLog text: 'Editor:Make:Container'\\n    editor = CodeMirror.fromTextArea (document.getElementById o.id), do\\n      mode:         o.type || 'text/plain'\\n      theme:        'blackboard'\\n      gutters:      ['CodeMirror-lint-markers']\\n      tabMode:      'indent'\\n      lineNumbers:  true\\n      indentUnit:   2\\n      lineWrapping: true\\n      lint:         o.lint || false\\n    if o.onChange\\n      editor.on 'change', !->\\n        _this[o.onChange] context: o.context, entity: o.entity\\n    editor\\n    \\n  o.editorSetValueCm = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'Editor:Set:Value'\\n    @editors[o.context][o.entity].setValue o.value\\n    \\n  o.editorGetValueCm = (o) -> # context, entity, value\\n    _this = @; @consoleLog text: 'Editor:Get:Value'\\n    @editors[o.context][o.entity].getValue!\\n      \\n  o.editorGetPropCm = (o) -> # context, entity, prop\\n    _this = @; @consoleLog text: 'Editor:Get:Prop'\\n    @editors[o.context][o.entity].getOption o.prop\\n      \\n  o.editorSetPropCm = (o) -> # context, entity, prop, value\\n    _this = @; @consoleLog text: 'Editor:Set:Prop'\\n    @editors[o.context][o.entity].setOption o.prop, o.value\\n      \\n  o.editorSetModeCm = (o) !-> # context, entity, value, ?ext\\n    _this = @; @consoleLog text: 'Editor:Set:Mode'\\n    modes = \\n      # Default\\n      'txt': 'text/plain',\\n      'html': 'text/html', 'js': 'text/javascript', 'css': 'text/css',\\n      # Markdown\\n      'md': 'text/x-markdown', '++.md': 'text/x-markdown', 'remark.md': 'text/x-markdown'\\n      # Template\\n      'jade': 'text/x-jade',\\n      # Style\\n      'less': 'text/x-less', 'sass': 'text/x-sass', 'styl': 'text/x-styl'\\n      # Transpiler\\n      'ls': 'text/x-livescript', 'jsx': 'text/jsx',\\n      'babel.js': 'text/javascript', 'ts': 'text/typescript', 'cs': 'text/x-coffeescript',\\n      # Format\\n      'json': 'application/x-json', 'yaml': 'text/x-yaml', 'xml': 'text/xml',\\n      # Database\\n      'sql': 'text/x-sql', 'mongo.js': 'text/javascript',\\n      # Lang\\n      'php': 'text/x-php', 'rb': 'text/x-ruby', 'py': 'text/x-python'\\n      # Music\\n      'abc': 'text/x-abc',\\n      # Generator\\n      # Misc:Lang\\n      'ashx': 'text/x-csharp', 'java': 'text/x-java', 'go': 'text/x-go', 'rust': 'text/x-rust'\\n    mode = o.value || modes[o.ext]\\n    @editors[o.context][o.entity].setOption 'mode', mode\\n      \\n  o.editorGetModeCm = (o) -> # context, entity\\n    _this = @; @consoleLog text: 'Editor:Get:Mode'\\n    @editors[o.context][o.entity].getOption 'mode'\\n      \\n  o.editorToggleLintJqCm = (o) !-> # context, entity, state\\n    _this = @; @consoleLog text: 'Editor:Toggle:Lint'\\n    try\\n      @editors[o.context][o.entity].setOption 'lint', o.state\\n    catch e\\n      console.log 'Lint error', e\\n      \\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/ext\":{\"name\":\"component/main/ext\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initExt =              !-> @initExtJs!\\n  \\n  o.extMakeContainer = (o)  -> @extMakeContainerSz o\\n  o.extSetValue =      (o) !-> @extSetValueSz o\\n  o.extGetValue =      (o)  -> @extGetValueSz o\\n  o.extIsValid =       (o)  -> @extIsValidJs o\\n  o.extEnable =        (o) !-> @extEnableSz o\\n  o.extDisable =       (o) !-> @extDisableSz o\\n  \\n  o.initExtJs = !->\\n    _this = @; @consoleLog text: 'Ext!'\\n    \\n  o.extMakeContainerSz = (o) -> # context, entity, id, options, ?onChange\\n    _this = @; @consoleLog text: 'Ext:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] context: o.context, entity: o.entity, value: value\\n      create: false\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.extSetValueSz = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'Ext:Set:Value'\\n    @exts[o.context][o.entity].setValue o.value, ->\\n\\n  o.extGetValueSz = (o) -> # context, entity, value\\n    _this = @; @consoleLog text: 'Ext:Get:Value'\\n    @exts[o.context][o.entity].getValue!\\n\\n  o.extIsValidJs = (o) -> # ext\\n    _this = @; @consoleLog text: 'Ext:Is:Valid'\\n    valid = true\\n    exts = [\\n      # Default\\n      'txt', 'html', 'js', 'css',\\n      # Markdown\\n      'md', '++.md'\\n      # Template\\n      'jade',\\n      # Style\\n      'less', 'sass', 'styl',\\n      # Transpiler\\n      'ls', 'babel.js', 'ts', 'cs',\\n      # Format\\n      'json', 'yaml', 'xml',\\n      # Database\\n      'sql', 'mongo.js',\\n      # Lang\\n      'php', 'rb', 'py'\\n      # Music\\n      'abc',\\n      # Misc:Lang\\n      'ashx', 'java', 'go', 'rust'\\n    ]\\n    if (exts.indexOf o.ext) == -1 then valid = false\\n    valid\\n    \\n  o.extEnableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Ext:Enable'\\n    @exts[o.context][o.entity].enable!\\n    \\n  o.extDisableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Ext:Disable'\\n    @exts[o.context][o.entity].disable!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/file\":{\"name\":\"component/main/file\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initFile =                !-> @initFileJs!\\n  \\n  o.fileMakeContainer =   (o)  -> @fileMakeContainerSz o\\n  o.fileMakeDestroyable = (o) !-> @fileMakeDestroyableJq o\\n  o.fileMakeCreatable =   (o) !-> @fileMakeCreatableJq o\\n\\n  o.fileSetValue =        (o) !-> @fileSetValueSz o\\n  o.fileGetValue =        (o)  -> @fileGetValueSz o\\n  o.fileClear =           (o) !-> @fileClearSz o\\n  o.fileList =            (o)  -> @fileListSz o\\n  o.fileCreate =          (o) !-> @fileCreateSz o\\n  o.fileDestroy =         (o) !-> @fileDestroySz o\\n  o.fileIsValid =         (o)  -> @fileIsValidJs o\\n  o.fileDisable =         (o) !-> @fileDisableSz o\\n  o.fileEnable =          (o) !-> @fileEnableSz o\\n  \\n  o.initFileJs = !->\\n    _this = @; @consoleLog text: 'File!'\\n  \\n  # ?\\n  o.fileIsValidJs = (o) ->\\n    _this = @; @consoleLog text: 'File:Is:Valid'\\n    # ?\\n    \\n    # ?\\n    true\\n  # ?\\n  \\n  o.fileMakeContainerSz = (o) -> # context, entity, id, options, ?onChange, ?onCreate, ?destroyable, ?creatable\\n    _this = @; @consoleLog text: 'File:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] context: o.context, entity: o.entity, value: value\\n      create: (value) ->\\n        if o.onCreate\\n          _this[o.onCreate] context: o.context, entity: o.entity, value: value\\n    if o.destroyable\\n      @fileMakeDestroyable do\\n        context: o.context, entity: o.entity\\n        id: o.id + '__destroy', destroyable: o.destroyable\\n    if o.creatable\\n      @fileMakeCreatable do\\n        context: o.context, entity: o.entity\\n        id: o.id + '__create', creatable: o.creatable\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n  \\n  o.fileMakeDestroyableJq = (o) !-> # context, entity, id, destroyable\\n    _this = @; @consoleLog text: 'File:Make:Destroyable'\\n    $ '#' + o.id .click !-> \\n      file = _this.fileGetValue context: o.context, entity: o.entity\\n      _this[o.destroyable] context: o.context, entity: o.entity, file: file\\n  \\n  o.fileMakeCreatableJq = (o) !-> # context, entity, id, destroyable\\n    _this = @; @consoleLog text: 'File:Make:Creatable'\\n    $ '#' + o.id + '__button' .click !-> \\n      $ '#' + o.id + '__modal' .modal 'hide'\\n      file = $ '#' + o.id + '__text' .val!\\n      _this[o.creatable] context: o.context, entity: o.entity, file: file\\n      $ '#' + o.id + '__text' .val ''\\n  \\n  o.fileSetValueSz = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'File:Set:Value'\\n    @files[o.context][o.entity].setValue o.value, ->\\n  \\n  o.fileGetValueSz = (o) -> # context, entity\\n    _this = @; @consoleLog text: 'File:Get:Value'\\n    @files[o.context][o.entity].getValue!\\n  \\n  o.fileClearSz = (o) -> # context, entity\\n    _this = @; @consoleLog text: 'File:Clear'\\n    @files[o.context][o.entity].clearOptions!\\n  \\n  o.fileListSz = (o) -> # context, entity, value\\n    _this = @; @consoleLog text: 'File:List'\\n    @files[o.context][o.entity].options\\n  \\n  o.fileCreateSz = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'File:Create'\\n    @files[o.context][o.entity].addOption value: o.value, label: o.value\\n  \\n  o.fileDestroySz = (o) !-> # context, entity, ?value\\n    _this = @; @consoleLog text: 'File:Destroy'\\n    value = o.value || @fileGetValue context: o.context, entity: o.entity\\n    if value != 'index'\\n      @files[o.context][o.entity].removeOption value\\n    else\\n      _this = @; @consoleLog text: 'index cannot be deleted!'\\n    \\n  o.fileEnableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'File:Enable'\\n    @files[o.context][o.entity].enable!\\n    \\n  o.fileDisableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'File:Disable'\\n    @files[o.context][o.entity].disable!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/frame\":{\"name\":\"component/main/frame\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initFrame =                       !-> @initFrameJs!\\n  \\n  o.frameMakeContainer =          (o)  -> @frameMakeContainerJqDm o\\n  o.frameMakeUrlhashListenable =  (o) !-> @frameMakeUrlhashListenableDm o\\n  o.frameWrite =                  (o) !-> @frameWriteDm o\\n  o.frameWriteCustom =            (o) !-> @frameWriteCustomJq o\\n  o.frameSetUrlhash =             (o) !-> @frameSetUrlhashDm o\\n  o.frameBuildMarkup =            (o)  -> @frameBuildMarkupJs o\\n  \\n  o.initFrameJs = !->\\n    _this = @; @consoleLog text: 'Frame!'\\n    \\n  o.frameMakeContainerJqDm = (o) -> # \\n    _this = @; @consoleLog text: 'Frame:Make:Container'\\n    $ '#content__output__index__frame' .remove!\\n    $ '<iframe id=\\\"content__output__index__frame\\\"></iframe>' \\n      .appendTo '#content__output__index__holder'\\n    iframeInit = document.getElementById 'content__output__index__frame'\\n    iframe     = iframeInit.contentDocument || iframeInit.contentWindow.document\\n    iframe\\n    \\n  o.frameMakeUrlhashListenableDm = (o) !-> # onHashChange\\n    _this = @; @consoleLog text: 'Frame:Make:Urlhash:Listenable'\\n    document.getElementById 'content__output__index__frame' \\n    .contentWindow .onhashchange = o.onHashChange\\n  \\n  o.frameWriteDm = (o) !-> # write\\n    _this = @; @consoleLog text: 'Frame:Write'\\n    frame   = @frameMakeContainer!\\n    frame.open!\\n    frame.write o.write\\n    frame.close!\\n  \\n  o.frameWriteCustomJq = (o) !-> # id, content\\n    _this = @; @consoleLog text: 'Frame:Write:Custom'\\n    $ '#' + o.id .html o.content\\n  \\n  o.frameSetUrlhashDm = (o) !-> # value\\n    _this = @; @consoleLog text: 'Frame:Set:Urlhash'\\n    document.getElementById 'content__output__index__frame' \\n    .contentWindow.window.location.hash = o.value\\n  \\n  o.frameBuildMarkupJs = (o) -> # style, content, script\\n    _this = @; @consoleLog text: 'Frame:Build:Markup'\\n    '<!DOCTYPE html><html><head><style>' + (o.style || '') + \\n    '</style></head><body>' + (o.content || '') + \\n    '<script>' + (o.script || '') + '<' + '/script>' + \\n    '</body></html>'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/include\":{\"name\":\"component/main/include\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initInclude =          !-> @initIncludeJs!\\n  \\n  o.include =          (o)  -> @includeDmDpXz o\\n  \\n  o.initIncludeJs = !->\\n    _this = @; @consoleLog text: 'Include!'\\n  \\n  o.includeDmDpXz = (o) -> # content, tag, entity\\n    _this = @; @consoleLog text: 'Include'\\n    dom      = (new DOMParser!).parseFromString o.content, 'text/html'\\n    includes = dom.querySelectorAll (o.tag + '[data-include]:not([data-id])')\\n    for let el, i in includes\\n      attrs        = el.attributes\\n      name         = attrs['data-include'].nodeValue\\n      names        = attrs['data-include'].nodeValue.split '|'\\n      entity       = if attrs['data-entity'] then attrs['data-entity'].nodeValue else o.entity\\n      stringify    = if attrs['data-stringify'] then attrs['data-stringify'].nodeValue else false\\n      append       = if attrs['data-append'] then attrs['data-append'].nodeValue else ''\\n      prepend      = if attrs['data-prepend'] then attrs['data-prepend'].nodeValue else ''\\n      last         = names[names.length-1]\\n      content      = @runConcatFiles entity: entity, files: names\\n      content      = @run            entity: entity, src: content, type: 'compile', file: last\\n      #content      = prepend + content + append\\n      if stringify then content = stringify + '[\\\"' + name + '\\\"] = ' + (JSON.stringify content) + ';'\\n      el.innerHTML = prepend + content + append #content\\n    content = entities.decodeHTML ((new XMLSerializer!).serializeToString dom)\\n    content\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/input\":{\"name\":\"component/main/input\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initInput =                !-> @initInputJs!\\n  \\n  o.inputGet =               (o)  -> @inputGetJs o\\n  o.inputGetExts =           (o)  -> @inputGetExtsJs o\\n  o.inputSelect =            (o) !-> @inputSelectJs o\\n  o.inputCreate =            (o)  -> @inputCreateJs o\\n  o.inputUpdate =            (o)  -> @inputUpdateJs o\\n  o.inputDestroy =           (o)  -> @inputDestroyJs o\\n  o.inputFind =              (o)  -> @inputFindJs o\\n  o.inputFindAll =           (o)  -> @inputFindAllJs o\\n  o.inputReset =             (o) !-> @inputResetJs o\\n  \\n  o.inputMakeContainer =     (o) !-> @inputMakeContainerJs o\\n  o.inputOnFileChange =      (o)  -> @inputOnFileChangeJs o\\n  o.inputOnFileCreate =      (o)  -> @inputOnFileCreateJs o\\n  o.inputOnFileCreateModal = (o) !-> @inputOnFileCreateModalJs o\\n  o.inputOnExtChange =       (o)  -> @inputOnExtChangeJs o\\n  o.inputOnModeChange =      (o)  -> @inputOnModeChangeJs o\\n  o.inputOnEditorChange =    (o) !-> @inputOnEditorChangeJs o\\n  o.inputOnLintChange =      (o) !-> @inputOnLintChangeJs o\\n\\n  o.inputRun =               (o) !-> @inputRunJs o\\n  o.inputSave =              (o) !-> @inputSaveJs o\\n  o.inputLoad =              (o) !-> @inputLoadJs o\\n  o.inputLoadFiles =         (o) !-> @inputLoadFilesJs o\\n  o.inputLoadAuto =          (o) !-> @inputLoadAutoJs o\\n  o.inputLoadFilesAuto =     (o) !-> @inputLoadFilesAutoJs o\\n  o.inputLoadOthersAuto =    (o) !-> @inputLoadOthersAutoJs o\\n  \\n  #o.inputRefresh =         (o) !-> @inputRefreshJs o\\n  #o.inputLoadExts =        (o) !-> @inputLoadExtsJs o\\n  #o.inputLoadModes =       (o) !-> @inputLoadModesJs o\\n  #o.inputLoadEditors =     (o) !-> @inputLoadEditorsJs o\\n  #o.inputLoadAuto =        (o) !-> @inputLoadAutoJs o\\n  #o.inputCreateAll =       (o) !-> @inputCreateAllJs o\\n  #o.inputUpdateAll =       (o) !-> @inputUpdateAllJs o\\n  #o.inputDestroyAll =      (o) !-> @inputDestroyAllJs o\\n  \\n  o.initInputJs = !->\\n    _this = @; @consoleLog text: 'Input!'\\n    for let el, i in ['html' 'css' 'js']\\n      @inputMakeContainer do\\n        entity: el\\n        editor: @props.main.editors.inputs[el]\\n        file:   @props.main.files.inputs[el]\\n        ext:    @props.main.exts.inputs[el]\\n        mode:   @props.main.modes.inputs[el]\\n      @inputReset entity: el\\n    # ?\\n    @typing = 0;\\n    # ?\\n  \\n  o.inputGetJs = (o) -> # entity\\n    _this = @; @consoleLog text: 'Input:Get'\\n    input = @inputs[o.entity][@input[o.entity]]\\n    name: input.name\\n    src:  input.src\\n    ext:  input.ext\\n    mode: input.mode\\n  \\n  o.inputGetExtsJs = (o) -> # \\n    _this = @; @consoleLog text: 'Input:Get:Exts'\\n    _exts = {}; exts = []\\n    for let i, el of @inputs\\n      for let j, el_j of @inputs[i]\\n        _exts[el_j.ext] = ''\\n    for let i, el of _exts\\n      exts.push i\\n    exts\\n  \\n  o.inputSelectJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Input:Select'\\n    @input[o.entity] = o.file\\n    file = @inputs[o.entity][o.file]\\n    @fileSetValue   context: 'inputs', entity: o.entity, value: file.name\\n    @extSetValue    context: 'inputs', entity: o.entity, value: file.ext\\n    @modeSetValue   context: 'inputs', entity: o.entity, value: file.mode\\n    @editorSetMode  context: 'inputs', entity: o.entity, value: file.mode\\n    @editorSetValue context: 'inputs', entity: o.entity, value: file.src\\n    @lintSetValue   context: 'inputs', entity: o.entity, value: false\\n  \\n  o.inputCreateJs = (o) !-> # entity, file, ?src, ?ext, ?mode\\n    _this = @; @consoleLog text: 'Input:Create'\\n    _sample = 'Template - HTML, CSS, JS'\\n    sample  = @samples[_sample]['input_' + o.entity]['index']\\n    @inputs[o.entity][o.file] = do\\n      name: o.file\\n      src:  o.src  || '\\\\r\\\\n\\\\r\\\\n' # sample.src\\n      ext:  o.ext  || sample.ext\\n      mode: o.mode || sample.mode\\n    @fileCreate context: 'inputs', entity: o.entity, value: o.file\\n  \\n  o.inputUpdateJs = (o) !-> # entity, file, ?name, ?src, ?ext, ?mode\\n    _this = @; @consoleLog text: 'Input:Update'\\n    file = o.file || @fileGetValue entity: o.entity\\n    inputFile = @inputs[o.entity][file]\\n    if inputFile\\n      if o.name\\n        inputFile.name = o.name || o.file\\n      if o.src\\n        inputFile.src  = o.src\\n      if o.ext\\n        inputFile.ext  = o.ext\\n        @editorSetMode context: 'inputs', entity: o.entity, ext: o.ext\\n        mode = @editorGetMode context: 'inputs', entity: o.entity\\n        inputFile.mode = mode\\n        @modeSetValue context: 'inputs', entity: o.entity,  value: mode\\n      if o.mode\\n        inputFile.mode = o.mode\\n        @editorSetMode context: 'inputs', entity: o.entity, value: o.mode\\n      # ? lint\\n      @inputSave!\\n  \\n  o.inputDestroyJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Input:Destroy'\\n    if o.file != 'index'\\n      delete @inputs[o.entity][o.file]\\n      @fileDestroy context: 'inputs', entity: o.entity, value: o.file\\n      @inputSelect entity: o.entity, file: 'index'\\n    else\\n      _this = @; @consoleLog text: 'index cannot be deleted!'\\n  \\n  o.inputFindJs = (o) -> # entity, file\\n    _this = @; @consoleLog text: 'Input:Find'\\n    @inputs[o.entity][o.file]\\n  \\n  o.inputFindAllJs = (o) -> # entity\\n    _this = @; @consoleLog text: 'Input:Find:All'\\n    inputs = @inputs[o.entity]\\n    inputs\\n  \\n  o.inputResetJs = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Input:Reset'\\n    @fileClear  context: 'inputs', entity: o.entity\\n    @fileCreate context: 'inputs', entity: o.entity, value: 'index'\\n    _sample = 'Template - HTML, CSS, JS'\\n    sample = @samples[_sample]['input_' + o.entity]['index']\\n    @input[o.entity]  = 'index'\\n    @inputs[o.entity] = index: \\n      name: sample.name\\n      src:  '\\\\r\\\\n\\\\r\\\\n' #sample.src\\n      ext:  sample.ext\\n      mode: sample.mode\\n    @inputSelect entity: o.entity, file: 'index'\\n  \\n  o.inputMakeContainerJs = (o) !-> # entity, editor{}, file{}, ext{}, mode{}\\n    _this = @; @consoleLog text: 'Input:Make:Container'\\n    context = 'inputs'\\n    @editors[context][o.entity] = @editorMakeContainer o.editor\\n    @files[context][o.entity]   = @fileMakeContainer   o.file\\n    @exts[context][o.entity]    = @extMakeContainer    o.ext\\n    @modes[context][o.entity]   = @modeMakeContainer   o.mode\\n    \\n  o.inputOnFileChangeJs = (o) -> # entity, value\\n    _this = @; @consoleLog text: 'Input:On:File:Change'\\n    if o.value != ''\\n      @inputSelect entity: o.entity, file: o.value\\n    else \\n      o.value = 'index'\\n    o.value\\n    \\n  o.inputOnFileCreateJs = (o) -> # entity, value\\n    _this = @; @consoleLog text: 'Input:On:File:Create'\\n    @inputCreate entity: o.entity, file: o.value\\n    value: o.value, label: o.value\\n    \\n  o.inputOnFileCreateModalJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Input:On:File:Create:Modal'\\n    if !@inputs[o.entity][o.file]\\n      @inputCreate entity: o.entity, file: o.file\\n      @inputSelect entity: o.entity, file: o.file\\n    \\n  o.inputOnExtChangeJs = (o) -> # entity, value\\n    _this = @; @consoleLog text: 'Input:On:Ext:Change'\\n    file = @fileGetValue context: 'inputs', entity: o.entity\\n    _sample = 'Template - HTML, CSS, JS'\\n    sample = @samples[_sample]['input_' + o.entity]['index']\\n    if o.value != ''\\n      @inputUpdate entity: o.entity, file: file, ext: o.value\\n    else \\n      o.value = sample.ext\\n    o.value\\n    \\n  o.inputOnModeChangeJs = (o) -> # entity, value\\n    _this = @; @consoleLog text: 'Input:On:Mode:Change'\\n    file = @fileGetValue context: 'inputs', entity: o.entity\\n    _sample = 'Template - HTML, CSS, JS'\\n    sample = @samples[_sample]['input_' + o.entity]['index']\\n    if o.value != ''\\n      @inputUpdate entity: o.entity, file: file, mode: o.value\\n    else \\n      o.value = sample.mode\\n    o.value\\n    \\n  o.inputOnEditorChangeJs = (o) !-> # entity, value\\n    _this = @; @consoleLog text: 'Input:On:Editor:Change'\\n    file  = @fileGetValue   context: 'inputs', entity: o.entity\\n    value = @editorGetValue context: 'inputs', entity: o.entity\\n    @inputUpdate entity: o.entity, file: file, src: value\\n    @inputSave   entity: o.entity\\n    @inputRun    entity: o.entity\\n    # ? debounce\\n    #@typing = true\\n    #if @typing then setTimeout (!-> _this.typing = false), 3000\\n    @debounces.inputs[o.entity] = true\\n    setTimeout (!-> _this.debounces.inputs[o.entity] = false), 3000\\n    @inputTyping!\\n    # ? debounce\\n  \\n  o.inputTyping = (o) !-> # entity, value\\n    _this = @; @consoleLog text: 'Input:Typing'\\n    # ?\\n    @typing++\\n    setTimeout (!-> \\n      if _this.typing > 0\\n        _this.typing--\\n    ), 1000\\n    # ?\\n\\n  o.inputOnLintChangeJs = (o) !-> # entity, value\\n    _this = @; @consoleLog text: 'Input:On:Lint:Change'\\n    @editorToggleLint context: 'inputs', entity: o.entity, state: o.value\\n  \\n  o.inputSaveJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Input:Save'\\n    if @saveIsAuto && @saveIsAuto! \\n      setTimeout (!-> _this.saveById!), 300\\n  \\n  o.inputRunJs = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Input:Run'\\n    if @runIsAuto && @runIsAuto! \\n      setTimeout (!-> _this.runFront entity: o.entity), 300\\n  \\n  o.inputLoadJs = (o) !-> # inputs\\n    _this = @; @consoleLog text: 'Input:Load'\\n    for let entity, files of o.inputs\\n      @inputs[entity] = files\\n      @inputLoadFiles entity: entity, files: files\\n      #@inputLoadExts entity: entity\\n      #@inputLoadModes entity: entity\\n      #@inputLoadEditors entity: entity\\n      @inputSelect    entity: entity, file:  'index'\\n    \\n  o.inputLoadFilesJs = (o) !-> # entity, files\\n    _this = @; @consoleLog text: 'Input:Load:Files'\\n    @fileClear context: 'inputs', entity: o.entity\\n    for let file, props of o.files\\n      @fileCreate context: 'inputs', entity: o.entity, value: file\\n  \\n  o.inputLoadAutoJs = (o) !-> # inputs\\n    _this = @; @consoleLog text: 'Input:Load:Auto'\\n    for let entity, files of o.inputs\\n      # ?\\n      #@inputs[entity] = files # ?\\n      @inputs[entity] = {}\\n      for let file, props of files\\n        @inputs[entity][file] = props\\n      # ?\\n      @inputLoadFilesAuto entity: entity, files: files\\n      @inputLoadOthersAuto entity: entity\\n      #@inputSelect    entity: entity, file:  'index'\\n    \\n  o.inputLoadFilesAutoJs = (o) !-> # entity, files\\n    _this = @; @consoleLog text: 'Input:Load:Files:Auto'\\n    filesGlobal = o.files\\n    filesLocal  = @fileList context: 'inputs', entity: o.entity\\n    for let file, props of filesGlobal\\n      @fileCreate context: 'inputs', entity: o.entity, value: file\\n    for let file, props of filesLocal\\n      if !(filesGlobal.hasOwnProperty file)\\n        @fileDestroy context: 'inputs', entity: o.entity, value: file\\n        @inputSelect entity: o.entity, file:  'index'\\n    \\n  o.inputLoadOthersAutoJs = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Input:Load:Editors:Auto'\\n    for let entity, props of @inputs # html, css, js\\n      input      = @input[entity]\\n      input_src  = @inputs[entity][input].src\\n      input_ext  = @inputs[entity][input].ext\\n      input_mode = @inputs[entity][input].mode\\n      editor_val = @editorGetValue context: 'inputs', entity: entity\\n      ext_val    = @extGetValue    context: 'inputs', entity: entity\\n      mode_val   = @modeGetValue   context: 'inputs', entity: entity\\n      if input_src != editor_val\\n        # ? debounce\\n        if !@debounces.inputs[o.entity] && (@typing == 0) # AND IS NOT TYPING!\\n          @editorSetValue context: 'inputs', entity: entity, value: input_src\\n        # ? debounce\\n      if input_ext != ext_val\\n        @extSetValue    context: 'inputs', entity: entity, value: input_ext\\n        @editorSetMode  context: 'inputs', entity: entity, ext: input_ext\\n      if input_mode != mode_val\\n        @modeSetValue   context: 'inputs', entity: entity, value: input_mode\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/lint\":{\"name\":\"component/main/lint\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initLint =         !-> @initLintJs!\\n  \\n  o.lintMake =     (o)  -> @lintMakeJqIc o\\n  o.lintSetValue = (o) !-> @lintSetValueIc o\\n  o.lintGetValue = (o)  -> @lintGetValueIc o\\n  o.lintEnable =   (o) !-> @lintEnableIc o\\n  o.lintDisable =  (o) !-> @lintDisableIc o\\n  \\n  o.initLintJs = !->\\n    _this = @; @consoleLog text: 'Lint!'\\n    \\n    @lintMake @props.main.lint.inputs.html\\n    @lintMake @props.main.lint.inputs.css\\n    @lintMake @props.main.lint.inputs.js\\n    @lintMake @props.main.lint.outputs.index\\n    \\n  o.lintMakeJqIc = (o) !-> # id, context, entity, ?onChange\\n    _this = @; @consoleLog text: 'Lint:Make'\\n    $ '#' + o.id .iCheck checkboxClass: 'icheckbox_minimal'\\n    $ '#' + o.id .on 'ifChanged', !->\\n      checked = $ '#' + o.id .prop 'checked'\\n      if o.onChange\\n        _this[o.onChange] context: o.context, entity: o.entity, value: checked\\n    \\n  o.lintSetValueIc = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'Lint:Set:Value'\\n    ids = 'outputs': 'output', 'inputs': 'input'\\n    value = if o.value == true then 'check' else 'uncheck'\\n    $('#content__' + ids[o.context] + '__' + o.entity + '__lint').iCheck value\\n    \\n  o.lintGetValueIc = (o) -> # context, entity\\n    _this = @; @consoleLog text: 'Lint:Get:Value'\\n    ids = 'outputs': 'output', 'inputs': 'input'\\n    $('#content__' + ids[o.context] + '__' + o.entity + '__lint').prop 'checked'\\n    \\n  o.lintEnableIc = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Lint:Enable'\\n    ids = 'outputs': 'output', 'inputs': 'input'\\n    $('#content__' + ids[o.context] + '__' + o.entity + '__lint').iCheck 'enable'\\n    \\n  o.lintDisableIc = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Lint:Disable'\\n    ids = 'outputs': 'output', 'inputs': 'input'\\n    $('#content__' + ids[o.context] + '__' + o.entity + '__lint').iCheck 'disable'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/load\":{\"name\":\"component/main/load\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initLoad =             !-> @initLoadJqIc!\\n  \\n  o.loadById =         (o) !-> @loadByIdJs o\\n  o.loadByIdAuto =     (o) !-> @loadByIdAutoJs o\\n  o.loadReset =        (o) !-> @loadResetJs o\\n  o.loadIsAuto =       (o)  -> @loadIsAutoJq o\\n  o.loadAutoSetValue = (o) !-> @loadAutoSetValueIc o\\n  o.loadAutoGetValue = (o)  -> @loadAutoGetValueIc o\\n  o.loadAutoEnable =   (o) !-> @loadAutoEnableIc o\\n  o.loadAutoDisable =  (o) !-> @loadAutoDisableIc o\\n  \\n  o.initLoadJqIc = !->\\n    _this = @; @consoleLog text: 'Load!'\\n    $ '#content__load' .click !-> _this.loadById!\\n    $ '#content__load__auto' .iCheck checkboxClass: 'icheckbox_minimal'\\n    $ '#content__load__auto' .on 'ifChanged', !->\\n      checked = $ '#content__load__auto' .prop 'checked'\\n      _this.data.autoload _this, checked\\n  \\n  o.loadByIdJs = (o) -> # \\n    _this = @; @consoleLog text: 'Load:By:Id'\\n    if @id\\n      props = \\n        id: @id\\n        cb: (attrs) !->\\n          inputs =\\n            html: JSON.parse attrs.input_html\\n            css:  JSON.parse attrs.input_css\\n            js:   JSON.parse attrs.input_js\\n          _this.inputLoad inputs: inputs\\n      @dataFind props\\n  \\n  o.loadByIdAutoJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Load:By:Id:Auto'\\n    if @id\\n      props = \\n        id: @id\\n        cb: (attrs) !->\\n          inputs =\\n            html: JSON.parse attrs.input_html\\n            css:  JSON.parse attrs.input_css\\n            js:   JSON.parse attrs.input_js\\n          _this.inputLoadAuto inputs: inputs\\n      @dataFind props\\n    \\n  o.loadResetJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Load:Reset'\\n    @inputReset entity: 'html'\\n    @inputReset entity: 'css'\\n    @inputReset entity: 'js'\\n  \\n  o.loadIsAutoJq = (o) -> # \\n    _this = @; @consoleLog text: 'Load:Is:Auto'\\n    $ '#content__load__auto'  .prop 'checked'\\n    \\n  o.loadAutoSetValueIc = (o) !-> # value\\n    _this = @; @consoleLog text: 'Load:Auto:Set:Value'\\n    value = if o.value == true then 'check' else 'uncheck'\\n    $ '#content__load__auto' .iCheck value\\n    \\n  o.loadAutoGetValueIc = (o) -> # \\n    _this = @; @consoleLog text: 'Load:Auto:Get:Value'\\n    $ '#content__load__auto' .prop 'checked'\\n    \\n  o.loadAutoEnableIc = (o) !-> # \\n    _this = @; @consoleLog text: 'Load:Auto:Enable'\\n    $ '#content__load__auto' .iCheck 'enable'\\n    \\n  o.loadAutoDisableIc = (o) !-> # \\n    _this = @; @consoleLog text: 'Load:Auto:Disable'\\n    $ '#content__load__auto' .iCheck 'disable'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/mode\":{\"name\":\"component/main/mode\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initMode =              !-> @initModeJs!\\n  \\n  o.modeMakeContainer = (o)  -> @modeMakeContainerSz o\\n  o.modeSetValue =      (o) !-> @modeSetValueSz o\\n  o.modeGetValue =      (o)  -> @modeGetValueSz o\\n  o.modeGetFromExt =    (o)  -> @modeGetFromExtJs o\\n  o.modeEnable =        (o) !-> @modeEnableSz o\\n  o.modeDisable =       (o) !-> @modeDisableSz o\\n  \\n  o.initModeJs = !->\\n    _this = @; @consoleLog text: 'Mode!'\\n    \\n  o.modeMakeContainerSz = (o) -> # context, entity, id, options, ?onChange\\n    _this = @; @consoleLog text: 'Mode:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] context: o.context, entity: o.entity, value: value\\n      create: false\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.modeSetValueSz = (o) !-> # context, entity, ?value, ?ext\\n    _this = @; @consoleLog text: 'Mode:Set:Value'\\n    value = o.value || @modeGetFromExt ext: o.ext\\n    @modes[o.context][o.entity].setValue value, ->\\n\\n  o.modeGetValueSz = (o) -> # context, entity, value\\n    _this = @; @consoleLog text: 'Mode:Get:Value'\\n    @modes[o.context][o.entity].getValue!\\n\\n  o.modeGetFromExtJs = (o) -> # ext\\n    _this = @; @consoleLog text: 'Mode:Get:From:Ext'\\n    modes = \\n      # Default\\n      'txt': 'text/plain',\\n      'html': 'text/html', 'js': 'text/javascript', 'css': 'text/css',\\n      # Markdown\\n      'md': 'text/x-markdown', '++.md': 'text/x-markdown', 'remark.md': 'text/x-markdown'\\n      # Template\\n      'jade': 'text/x-jade',\\n      # Style\\n      'less': 'text/x-less', 'sass': 'text/x-sass', 'styl': 'text/x-styl'\\n      # Transpiler\\n      'ls': 'text/x-livescript', 'jsx': 'text/jsx',\\n      'babel.js': 'text/javascript', 'ts': 'text/typescript', 'cs': 'text/x-coffeescript',\\n      # Format\\n      'json': 'application/x-json', 'yaml': 'text/x-yaml', 'xml': 'text/xml',\\n    mode = modes[o.ext] || 'text/plain'\\n    mode\\n    \\n  o.modeEnableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Mode:Enable'\\n    @modes[o.context][o.entity].enable!\\n    \\n  o.modeDisableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Mode:Disable'\\n    @modes[o.context][o.entity].disable!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/output\":{\"name\":\"component/main/output\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initOutput =                    !-> @initOutputJs!\\n  \\n  o.outputRun =                 (o) !-> @outputRunJs o\\n  o.outputRunFrame =            (o)  -> @outputRunFrameJs o\\n  o.outputRunEditor =           (o) !-> @outputRunEditorJs o\\n  o.outputGetProps =            (o)  -> @outputGetPropsJs o\\n  o.outputReset =               (o) !-> @outputResetJs o\\n  \\n  o.outputMakeContainerFrame =  (o) !-> @outputMakeContainerFrameJs o\\n  o.outputMakeContainerEditor = (o) !-> @outputMakeContainerEditorJs o\\n  \\n  o.outputOnResultChange =      (o) !-> @outputOnResultChangeJs o\\n  o.outputOnUrlhashChange =     (o) !-> @outputOnUrlhashChangeJs o\\n  o.outputOnUrlhashCreate =     (o)  -> @outputOnUrlhashCreateJs o\\n  o.outputOnExtChange =         (o) !-> @outputOnExtChangeJs o\\n  o.outputOnModeChange =        (o) !-> @outputOnModeChangeJs o\\n  o.outputOnLintChange =        (o) !-> @outputOnLintChangeJs o\\n  \\n  o.initOutputJs = !->\\n    _this = @; @consoleLog text: 'Output!'\\n    \\n    @results.outputs.index = @resultMakeContainer @props.main.result.outputs.index\\n    @resultSetValue context: 'outputs', entity: 'index', value: 'frame'\\n    \\n    @exts.outputs.index = @extMakeContainer @props.main.exts.outputs.index\\n    @extSetValue context: 'outputs', entity: 'index', value: 'html'\\n    \\n    @modes.outputs.index = @modeMakeContainer @props.main.modes.outputs.index\\n    @modeSetValue context: 'outputs', entity: 'index', value: 'text/html'\\n    \\n    @outputMakeContainerFrame!\\n  \\n  o.outputRunJs = (o) !-> # src, ext, result, files, ?script, ?style, ?content\\n    _this = @; @consoleLog text: 'Output:Run'\\n    results = \\n      frame:   !-> _this.outputRunFrame  o\\n      editor:  !-> _this.outputRunEditor o\\n    results[o.result]!\\n    \\n  o.outputRunFrameJs = (o) !-> # src, ?export, ?editor\\n    _this = @; @consoleLog text: 'Output:Run:Frame'\\n    content  = o.src\\n    # ? cb for import / include (id)\\n    # ?\\n    if o.src\\n      content = @include content: content, tag: 'div', entity: 'html'\\n      #content = @includeMultiple content: content, tag: 'div', entity: 'html'\\n      content = @include content: content, tag: 'style', entity: 'css'\\n      #content = @includeMultiple content: content, tag: 'style', entity: 'css'\\n      content = @include content: content, tag: 'script', entity: 'js'\\n      #content = @includeMultiple content: content, tag: 'script', entity: 'html'\\n    if o.export\\n      o.export src: content\\n    else if o.editor\\n      @editorSetValue context: 'outputs', entity: 'index', value: content\\n    else\\n      @frameWrite write: content\\n      @frameMakeUrlhashListenable onHashChange: !->\\n        hashurl = @window.location.hash\\n        _this.urlhashCreate context: 'outputs', entity: 'index', value: hashurl\\n    \\n  o.outputRunEditorJs = (o) !-> # editor\\n    _this = @; @consoleLog text: 'Output:Run:Editor'\\n    @extSetValue    context: 'outputs', entity: 'index', value: 'html'\\n    @editorSetMode  context: 'outputs', entity: 'index', ext:   'html'\\n    @modeSetValue   context: 'outputs', entity: 'index', ext:   'text/html'\\n    o.editor = true\\n    @outputRunFrame o\\n    \\n  o.outputGetPropsJs = (o) -> # \\n    _this = @; @consoleLog text: 'Output:Get:Props'\\n    props = \\n      result: @resultGetValue context: 'outputs', entity: 'index'\\n      ext:    @extGetValue    context: 'outputs', entity: 'index'\\n    props\\n    \\n  o.outputResetJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Output:Reset'\\n    delete @editors.outputs.index\\n    delete @frames.outputs.index\\n    delete @urlhashes.outputs.index\\n    \\n  o.outputMakeContainerFrameJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Output:Make:Container:Frame'\\n    \\n    @extSetValue   context: 'outputs', entity: 'index', value: 'html'\\n    @extDisable    context: 'outputs', entity: 'index'\\n    @modeSetValue  context: 'outputs', entity: 'index', ext:   'html'\\n    @modeDisable   context: 'outputs', entity: 'index'\\n    @lintSetValue  context: 'outputs', entity: 'index', value: false\\n    @lintDisable   context: 'outputs', entity: 'index'\\n    \\n    @frameWriteCustom do\\n      id:      'content__output__index__holder'\\n      content: '<iframe id=\\\"content__output__index__frame\\\"></iframe>'\\n    \\n    @outputReset!\\n    \\n    @urlhashes.outputs.index = @urlhashMakeContainer do\\n      context: 'outputs', entity: 'index'\\n      id: 'content__output__index__urlhash'\\n      options: [{value: '#/'}]\\n      onChange: 'outputOnUrlhashChange', onCreate: 'outputOnUrlhashCreate'\\n    @urlhashEnable context: 'outputs', entity: 'index'\\n    @urlhashEnableButton id: 'content__output__index__urlhash__button'\\n    \\n  o.outputMakeContainerEditorJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Output:Make:Container:Editor'\\n    \\n    @extEnable      context: 'outputs', entity: 'index'\\n    @modeEnable     context: 'outputs', entity: 'index'\\n    @lintEnable     context: 'outputs', entity: 'index'\\n    @urlhashDisable context: 'outputs', entity: 'index'\\n    @urlhashClear   context: 'outputs', entity: 'index'\\n    @urlhashDisableButton id: 'content__output__index__urlhash__button'\\n    \\n    @frameWriteCustom do\\n      id:      'content__output__index__holder'\\n      content: '<textarea id=\\\"content__output__index__editor\\\"></textarea>'\\n    \\n    @outputReset!\\n    \\n    @editors.outputs.index = @editorMakeContainer do\\n      context: 'outputs', entity: 'index'\\n      id: 'content__output__index__editor'\\n      type: 'text/html', ext: 'html'\\n    \\n  o.outputOnResultChangeJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Output:On:Run:Change'\\n    run = \\n      frame:  !-> _this.outputMakeContainerFrame!\\n      editor: !-> _this.outputMakeContainerEditor!\\n    run[o.value]!\\n    \\n  o.outputOnUrlhashChangeJs = (o) !-> # value\\n    _this = @; @consoleLog text: 'Output:On:Urlhash:Change'\\n    @frameSetUrlhash value: o.value\\n    \\n  o.outputOnUrlhashCreateJs = (o) -> # value\\n    _this = @; @consoleLog text: 'Output:On:Urlhash:Create'\\n    woHashUrl = o.value.lastIndexOf '#/', 0 == 0\\n    if woHashUrl then o.value = '#/'\\n    value: o.value, label: o.value\\n    \\n  o.outputOnExtChangeJs = (o) -> # entity, value\\n    _this = @; @consoleLog text: 'Output:On:Ext:Change'\\n    @modeSetValue  context: 'outputs', entity: 'index', ext: o.value\\n    @editorSetMode context: 'outputs', entity: 'index', ext: o.value\\n    o.value\\n    \\n  o.outputOnModeChangeJs = (o) -> # entity, value\\n    _this = @; @consoleLog text: 'Output:On:Mode:Change'\\n    @editorSetMode context: 'outputs', entity: 'index', value: o.value\\n    o.value\\n  \\n  o.outputOnLintChangeJs = (o) !-> # entity, value\\n    _this = @; @consoleLog text: 'Output:On:Lint:Change'\\n    @editorToggleLint context: 'outputs', entity: o.entity, state: o.value\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/result\":{\"name\":\"component/main/result\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initResult =              !-> @initResultJs!\\n  \\n  o.resultMakeContainer = (o)  -> @resultMakeContainerSz o\\n  o.resultSetValue =      (o) !-> @resultSetValueSz o\\n  o.resultGetValue =      (o)  -> @resultGetValueSz o\\n  \\n  o.initResultJs = !->\\n    _this = @; @consoleLog text: 'Result!'\\n    \\n  o.resultMakeContainerSz = (o) -> # context, entity, id, options, ?onChange\\n    _this = @; @consoleLog text: 'Result:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] context: o.context, entity: o.entity, value: value\\n      create: false\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.resultSetValueSz = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'Result:Set:Value'\\n    @results[o.context][o.entity].setValue o.value, ->\\n\\n  o.resultGetValueSz = (o) -> # context, entity, value\\n    _this = @; @consoleLog text: 'Result:Get:Value'\\n    @results[o.context][o.entity].getValue!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run\":{\"name\":\"component/main/run\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initRun =               !-> @initRunJqIc!\\n  \\n  o.run =               (o)  -> @runJs o\\n  o.runFront =          (o) !-> @runFrontJs o\\n  o.runDisplay =        (o) !-> @runDisplayJs o\\n  o.runGetConfig =      (o)  -> @runGetConfigJs o\\n  o.runConcatFiles =    (o)  -> @runConcatFilesJs o\\n  o.runIsAuto =         (o)  -> @runIsAutoJq o\\n  \\n  o.initRunJqIc = !->\\n    _this = @; @consoleLog text: 'Run!'\\n    \\n    # Default\\n    (require './run/default/html.ls')            Component\\n    (require './run/default/css.ls')             Component\\n    (require './run/default/js.ls')              Component\\n    # Markdown\\n    (require './run/markdown/marked.ls')         Component\\n    # Template\\n    (require './run/template/jade.ls')           Component\\n    # Preprocessor\\n    (require './run/preprocessor/less.ls')       Component\\n    (require './run/preprocessor/sass.ls')       Component\\n    (require './run/preprocessor/stylus.ls')     Component\\n    # Transpiler\\n    (require './run/transpiler/livescript.ls')   Component\\n    (require './run/transpiler/typescript.ls')   Component\\n    (require './run/transpiler/babel.ls')        Component\\n    (require './run/transpiler/coffeescript.ls') Component\\n    \\n    @runs = \\n      # Default\\n      'html':      (o)  -> _this.runDefaultHtml o\\n      'css':       (o)  -> _this.runDefaultCss o\\n      'js':        (o)  -> _this.runDefaultJs o\\n      # Markdown\\n      'md':        (o)  -> _this.runMarkdownMarked o\\n      # Template\\n      'jade':      (o)  -> _this.runTemplateJade o\\n      # Preprocessor\\n      'less':      (o)  -> _this.runPreprocessorLess o\\n      'sass':      (o)  -> _this.runPreprocessorSass o\\n      'styl':      (o)  -> _this.runPreprocessorStylus o\\n      # Transpiler\\n      'babel.js':  (o)  -> _this.runTranspilerBabel o\\n      'ts':        (o)  -> _this.runTranspilerTypescript o\\n      'cs':        (o)  -> _this.runTranspilerCoffeescript o\\n      'ls':        (o)  -> _this.runTranspilerLivescript o\\n      \\n    $ '#content__run' .click !-> _this.runFront {}\\n    $ '#content__run__auto' .iCheck checkboxClass: 'icheckbox_minimal-blue'\\n  \\n  o.runJs = (o) -> # type, entity, file, ?export, ?src\\n    _this = @; @consoleLog text: 'Run'\\n    input  = @inputFind do\\n      entity: o.entity\\n      file:   o.file\\n    params =\\n      type:   o.type\\n      entity: o.entity\\n      name:   input.name\\n      src:    o.src    || input.src\\n      run:    input.ext\\n      export: o.export || false\\n    @runs[params.run] params\\n\\n  o.runFrontJs = (o) !-> # ?export\\n    _this = @; @consoleLog text: 'Run:Front'\\n    input          = @inputGet entity: 'html'\\n    output         = @outputGetProps!\\n    exts           = @inputGetExts!\\n    isExtsLoaded   = @scriptIsExtsLoaded exts: exts\\n    \\n    cb = !->\\n      exts         = _this.inputGetExts!\\n      isExtsLoaded = _this.scriptIsExtsLoaded exts: exts\\n      name         = if (_this.optionRunGetMode! == 'index') then 'index' else input.name\\n      if isExtsLoaded\\n        _this.run do\\n          type:   output.result\\n          entity: 'html'\\n          file:   name\\n          export: o.export || false\\n    \\n    if isExtsLoaded\\n      cb!\\n    else\\n      @scriptLoadExts exts: exts, cb: cb\\n\\n  o.runDisplayJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Run:Display'\\n    o.result = o.type\\n    @outputRun o\\n\\n  o.runConcatFilesJs = (o) -> # files, entity\\n    _this = @; @consoleLog text: 'Run:Concat:Files'\\n    str = ''\\n    for let fileOutput in o.files\\n      fileInput = @inputFind entity: o.entity, file: fileOutput\\n      str += fileInput.src + '\\\\r\\\\n'\\n    str\\n  \\n  o.runIsAutoJq = (o) -> # \\n    _this = @; @consoleLog text: 'Run:Is:Auto'\\n    $ '#content__run__auto'  .prop 'checked'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/save\":{\"name\":\"component/main/save\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initSave =                !-> @initSaveJqIc!\\n  \\n  o.saveById =            (o) !-> @saveByIdJs o\\n  o.saveIsAuto =          (o)  -> @saveIsAutoJq o\\n  o.saveAutoSetValue =    (o) !-> @saveAutoSetValueIc o\\n  o.saveAutoGetValue =    (o)  -> @saveAutoGetValueIc o\\n  o.saveAutoEnable =      (o) !-> @saveAutoEnableIc o\\n  o.saveAutoDisable =     (o) !-> @saveAutoDisableIc o\\n  \\n  o.initSaveJqIc = !->\\n    _this = @; @consoleLog text: 'Save!'\\n    $ '#content__save' .click !-> _this.saveById!\\n    $ '#content__save__auto' .iCheck checkboxClass: 'icheckbox_minimal'\\n    $ '#content__save__auto' .iCheck 'check'\\n  \\n  o.saveByIdJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Save:By:Id'\\n    if @id\\n      props = \\n        id: @id\\n        attrs:\\n          input_html: JSON.stringify @inputFindAll entity: 'html'\\n          input_css:  JSON.stringify @inputFindAll entity: 'css'\\n          input_js:   JSON.stringify @inputFindAll entity: 'js'\\n      @dataUpdate props\\n  \\n  o.saveIsAutoJq = (o) -> # \\n    _this = @; @consoleLog text: 'Save:Is:Auto'\\n    $ '#content__save__auto'  .prop 'checked'\\n    \\n  o.saveAutoSetValueIc = (o) !-> # value\\n    _this = @; @consoleLog text: 'Save:Auto:Set:Value'\\n    value = if o.value == true then 'check' else 'uncheck'\\n    $ '#content__save__auto' .iCheck value\\n    \\n  o.saveAutoGetValueIc = (o) -> # \\n    _this = @; @consoleLog text: 'Save:Auto:Get:Value'\\n    $ '#content__save__auto' .prop 'checked'\\n    \\n  o.saveAutoEnableIc = (o) !-> # \\n    _this = @; @consoleLog text: 'Save:Auto:Enable'\\n    $ '#content__save__auto' .iCheck 'enable'\\n    \\n  o.saveAutoDisableIc = (o) !-> # \\n    _this = @; @consoleLog text: 'Save:Auto:Disable'\\n    $ '#content__save__auto' .iCheck 'disable'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/script\":{\"name\":\"component/main/script\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initScript =                !-> @initScriptJs!\\n\\n  o.scriptIsExtsLoaded =    (o)  -> @scriptIsExtsLoadedJs o\\n  o.scriptCheckExtsLoaded = (o)  -> @scriptCheckExtsLoadedJqIc o\\n  o.scriptLoadExts =        (o) !-> @scriptLoadExtsJs o\\n  o.scriptGetIdFromExt =    (o)  -> @scriptGetIdFromExtJs o\\n  \\n  o.initScriptJs = !->\\n    _this = @; @consoleLog text: 'Script!'\\n      \\n    @onloads = \\n      # Default\\n      'html':      (o) !-> \\n      'css':       (o) !-> \\n      'js':        (o) !-> \\n      # Markdown\\n      'md':        (o) !-> \\n      # Template\\n      'jade':      (o) !-> \\n      # Preprocessor\\n      'less':      (o) !-> \\n        window.less.renderSync = (src) ->\\n          css = ''\\n          @render src, {}, (err, result) !->\\n            css := result.css\\n          css\\n      'sass':      (o) !-> \\n      'styl':      (o) !-> \\n        stylus = window['require'] 'stylus'\\n        stylus.renderSync = (src) ->\\n          css = ''\\n          @render src, {}, (err, result) !->\\n            css := result\\n          css\\n        window.stylus = stylus\\n      # Transpiler\\n      'ts':        (o) !-> \\n      'babel.js':  (o) !-> \\n      'cs':        (o) !-> \\n      'ls':        (o) !-> \\n        window.LiveScript = window['require'] 'LiveScript'\\n    \\n    @loadeds = \\n      # Default\\n      'html':      (o)  -> true\\n      'css':       (o)  -> true\\n      'js':        (o)  -> true\\n      # Markdown\\n      'md':        (o)  -> if window.marked then true else false\\n      # Template\\n      'jade':      (o)  -> if window.jade then true else false\\n      # Preprocessor\\n      'less':      (o)  -> if window.less then true else false\\n      'sass':      (o)  -> if window.Sass then true else false\\n      'styl':      (o)  -> if window.stylus then true else false\\n      # Transpiler\\n      'babel.js':  (o)  -> if window.babel then true else false\\n      'ts':        (o)  -> if window.ts then true else false\\n      'cs':        (o)  -> if window.CoffeeScript then true else false\\n      'ls':        (o)  -> if window.LiveScript then true else false\\n\\n    @scriptCheckExtsLoaded!\\n  \\n  o.scriptIsExtsLoadedJs = (o) -> # exts[]\\n    _this = @; @consoleLog text: 'Script:Is:Exts:Loaded'\\n    all = true\\n    for let el, i in o.exts\\n      if !@scripts[el]\\n        all := false\\n    all\\n  \\n  o.scriptCheckExtsLoadedJqIc = (o) -> # \\n    _this = @; @consoleLog text: 'Script:Check:Exts:Loaded'\\n    for let i, el of @scripts\\n      loaded = @loadeds[i]!\\n      if loaded\\n        @scripts[i] = true\\n        $ '#content__option__run__' + i .iCheck 'check'\\n        $ '#content__option__run__' + i .iCheck 'disable'\\n  \\n  o.scriptLoadExtsJs = (o) !-> # exts[], cb\\n    _this = @; @consoleLog text: 'Script:Load:Exts'\\n    for let el, i in o.exts\\n      if !@scripts[el]\\n        id = @scriptGetIdFromExt ext: el\\n        @optionRunLoadScript id: id, cb: o.cb\\n    \\n  o.scriptGetIdFromExtJs = (o) -> # ext\\n    _this = @; @consoleLog text: 'Script:Get:Id:From:Ext'\\n    ids = \\n      # Default\\n      #'txt': 'txt', 'html': 'html', 'js': 'js', 'css': 'css', \\n      # Markdown\\n      'md': 'md'\\n      # Template\\n      'jade': 'jade',\\n      # Style\\n      'less': 'less', 'sass': 'sass', 'styl': 'styl',\\n      # Transpiler\\n      'ls': 'ls', 'babel.js': 'babel', 'ts': 'ts', 'cs': 'cs',\\n    id = 'content__option__run__' + ids[o.ext]\\n    id\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/urlhash\":{\"name\":\"component/main/urlhash\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initUrlhash =              !-> @initUrlhashJs!\\n  \\n  o.urlhashMakeContainer = (o)  -> @urlhashMakeContainerSz o\\n  o.urlhashSetValue =      (o) !-> @urlhashSetValueSz o\\n  o.urlhashGetValue =      (o)  -> @urlhashGetValueSz o\\n  o.urlhashCreate =        (o)  -> @urlhashCreateSz o\\n  o.urlhashEnable =        (o) !-> @urlhashEnableSz o\\n  o.urlhashDisable =       (o) !-> @urlhashDisableSz o\\n  o.urlhashEnableButton =  (o) !-> @urlhashEnableButtonJq o\\n  o.urlhashDisableButton = (o) !-> @urlhashDisableButtonJq o\\n  o.urlhashClear =         (o) !-> @urlhashClearSz o\\n  \\n  o.initUrlhashJs = !->\\n    _this = @; @consoleLog text: 'Urlhash!'\\n    \\n  o.urlhashMakeContainerSz = (o) -> # context, entity, id, options, ?onChange, ?onCreate\\n    _this = @; @consoleLog text: 'Urlhash:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] context: o.context, entity: o.entity, value: value\\n      create: (value) ->\\n        if o.onCreate\\n          _this[o.onCreate] context: o.context, entity: o.entity, value: value\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.urlhashSetValueSz = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'Urlhash:Set:Value'\\n    @urlhashes[o.context][o.entity].setValue o.value, ->\\n\\n  o.urlhashGetValueSz = (o) -> # context, entity\\n    _this = @; @consoleLog text: 'Urlhash:Get:Value'\\n    @urlhashes[o.context][o.entity].getValue!\\n  \\n  o.urlhashCreateSz = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'Urlhash:Create'\\n    @urlhashes[o.context][o.entity].addOption value: o.value, label: o.value\\n    @urlhashes[o.context][o.entity].setValue o.value, ->\\n    \\n  o.urlhashEnableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Urlhash:Enable'\\n    @urlhashes[o.context][o.entity].enable!\\n    \\n  o.urlhashDisableSz = (o) !-> # context, entity\\n    _this = @; @consoleLog text: 'Urlhash:Disable'\\n    @urlhashes[o.context][o.entity].disable!\\n\\n  o.urlhashEnableButtonJq = (o) !-> # id\\n    _this = @; @consoleLog text: 'Urlhash:Enable:Button'\\n    $ '#' + o.id .prop 'disabled', false\\n\\n  o.urlhashDisableButtonJq = (o) !-> # id\\n    _this = @; @consoleLog text: 'Urlhash:Disable:Button'\\n    $ '#' + o.id .prop 'disabled', true\\n  \\n  o.urlhashClearSz = (o) -> # context, entity\\n    _this = @; @consoleLog text: 'Urlhash:Clear'\\n    @urlhashes[o.context][o.entity].clearOptions!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/default/css\":{\"name\":\"component/main/run/default/css\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runDefaultCss        = (o)  -> @runDefaultCssJs o\\n  o.runDefaultCssFrame   = (o) !-> @runDefaultCssFrameJs o\\n  o.runDefaultCssEditor  = (o) !-> @runDefaultCssEditorJs o\\n  o.runDefaultCssCompile = (o)  -> @runDefaultCssCompileJs o\\n  \\n  o.runDefaultCssJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Default:Css'\\n    types = \\n      frame:   !-> _this.runDefaultCssFrame   o\\n      editor:  !-> _this.runDefaultCssEditor  o\\n      compile:  -> _this.runDefaultCssCompile o\\n    types[o.type]!\\n    \\n  o.runDefaultCssFrameJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Css:Frame'\\n    o.style = @runDefaultCssCompile o\\n    o.src   = false\\n    @runDisplay o\\n  \\n  o.runDefaultCssEditorJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Css:Editor'\\n    o.src = @runDefaultCssCompile o\\n    o.ext = 'css'\\n    @runDisplay o\\n  \\n  o.runDefaultCssCompileJs = (o) -> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Css:Compile'\\n    o.src\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/default/html\":{\"name\":\"component/main/run/default/html\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runDefaultHtml        = (o)  -> @runDefaultHtmlJs o\\n  o.runDefaultHtmlFrame   = (o) !-> @runDefaultHtmlFrameJs o\\n  o.runDefaultHtmlEditor  = (o) !-> @runDefaultHtmlEditorJs o\\n  o.runDefaultHtmlCompile = (o)  -> @runDefaultHtmlCompileJs o\\n  \\n  o.runDefaultHtmlJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Default:Html'\\n    types = \\n      frame:   !-> _this.runDefaultHtmlFrame   o\\n      editor:  !-> _this.runDefaultHtmlEditor  o\\n      compile:  -> _this.runDefaultHtmlCompile o\\n    types[o.type]!\\n    \\n  o.runDefaultHtmlFrameJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Html:Frame'\\n    o.src = @runDefaultHtmlCompile o\\n    @runDisplay o\\n  \\n  o.runDefaultHtmlEditorJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Html:Editor'\\n    o.src = @runDefaultHtmlCompile o\\n    o.ext = 'html'\\n    @runDisplay o\\n  \\n  o.runDefaultHtmlCompileJs = (o) -> # src, ext\\n    _this = @; @consoleLog text: 'Run:Default:Html:Compile'\\n    o.src\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/default/js\":{\"name\":\"component/main/run/default/js\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runDefaultJs        = (o)  -> @runDefaultJsJs o\\n  o.runDefaultJsFrame   = (o) !-> @runDefaultJsFrameJs o\\n  o.runDefaultJsEditor  = (o) !-> @runDefaultJsEditorJs o\\n  o.runDefaultJsCompile = (o)  -> @runDefaultJsCompileJs o\\n  \\n  o.runDefaultJsJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Default:Js'\\n    types = \\n      frame:   !-> _this.runDefaultJsFrame   o\\n      editor:  !-> _this.runDefaultJsEditor  o\\n      compile:  -> _this.runDefaultJsCompile o\\n    types[o.type]!\\n    \\n  o.runDefaultJsFrameJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Js:Frame'\\n    o.script = @runDefaultJsCompile o\\n    o.src    = false\\n    @runDisplay o\\n  \\n  o.runDefaultJsEditorJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Js:Editor'\\n    o.src = @runDefaultJsCompile o\\n    o.ext = 'js'\\n    @runDisplay o\\n  \\n  o.runDefaultJsCompileJs = (o) -> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Default:Js:Compile'\\n    o.src\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/markdown/marked\":{\"name\":\"component/main/run/markdown/marked\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runMarkdownMarked        = (o)  -> @runMarkdownMarkedJs o\\n  o.runMarkdownMarkedIs      = (o) !-> @runMarkdownMarkedIsMd o\\n  o.runMarkdownMarkedFrame   = (o) !-> @runMarkdownMarkedFrameMd o\\n  o.runMarkdownMarkedEditor  = (o) !-> @runMarkdownMarkedEditorMd o\\n  o.runMarkdownMarkedCompile = (o)  -> @runMarkdownMarkedCompileMd o\\n  \\n  o.runMarkdownMarkedJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Markdown:Marked'\\n    types = \\n      frame:   !-> _this.runMarkdownMarkedFrame   o\\n      editor:  !-> _this.runMarkdownMarkedEditor  o\\n      compile:  -> _this.runMarkdownMarkedCompile o\\n    types[o.type]!\\n  \\n  o.runMarkdownMarkedIsMd = (o) -> # \\n    _this = @; @consoleLog text: 'Run:Markdown:Marked:Is'\\n    if window.marked then true else false\\n    \\n  o.runMarkdownMarkedFrameMd = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Markdown:Marked:Frame'\\n    o.src = marked o.src\\n    @runDisplay o\\n  \\n  o.runMarkdownMarkedEditorMd = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Markdown:Marked:Editor'\\n    o.src = marked o.src\\n    o.ext = 'html'\\n    @runDisplay o\\n  \\n  o.runMarkdownMarkedCompileMd = (o) -> # src, ext, ?global\\n    _this = @; @consoleLog text: 'Run:Markdown:Marked:Compile'\\n    marked o.src\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/preprocessor/less\":{\"name\":\"component/main/run/preprocessor/less\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runPreprocessorLess        = (o)  -> @runPreprocessorLessJs o\\n  o.runPreprocessorLessFrame   = (o) !-> @runPreprocessorLessFrameJs o\\n  o.runPreprocessorLessEditor  = (o) !-> @runPreprocessorLessEditorJs o\\n  o.runPreprocessorLessCompile = (o)  -> @runPreprocessorLessCompileLe o\\n  \\n  o.runPreprocessorLessJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Less'\\n    types = \\n      frame:   !-> _this.runPreprocessorLessFrame   o\\n      editor:  !-> _this.runPreprocessorLessEditor  o\\n      compile:  -> _this.runPreprocessorLessCompile o\\n    types[o.type]!\\n    \\n  o.runPreprocessorLessFrameJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Less:Frame'\\n    o.src = @runPreprocessorLessCompile o\\n    @runDisplay o\\n  \\n  o.runPreprocessorLessEditorJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Less:Editor'\\n    o.src = @runPreprocessorLessCompile o\\n    @runDisplay o\\n  \\n  o.runPreprocessorLessCompileLe = (o) -> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Less:Compile'\\n    less.renderSync o.src\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/preprocessor/sass\":{\"name\":\"component/main/run/preprocessor/sass\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runPreprocessorSass        = (o)  -> @runPreprocessorSassJs o\\n  o.runPreprocessorSassFrame   = (o) !-> @runPreprocessorSassFrameJs o\\n  o.runPreprocessorSassEditor  = (o) !-> @runPreprocessorSassEditorJs o\\n  o.runPreprocessorSassCompile = (o)  -> @runPreprocessorSassCompileSa o\\n  \\n  o.runPreprocessorSassJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Sass'\\n    types = \\n      frame:   !-> _this.runPreprocessorSassFrame   o\\n      editor:  !-> _this.runPreprocessorSassEditor  o\\n      compile:  -> _this.runPreprocessorSassCompile o\\n    types[o.type]!\\n    \\n  o.runPreprocessorSassFrameJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Sass:Frame'\\n    o.src = @runPreprocessorSassCompile o\\n    @runDisplay o\\n  \\n  o.runPreprocessorSassEditorJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Sass:Editor'\\n    o.src = @runPreprocessorSassCompile o\\n    @runDisplay o\\n  \\n  o.runPreprocessorSassCompileSa = (o) -> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Sass:Compile'\\n    Sass.compile o.src\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/preprocessor/stylus\":{\"name\":\"component/main/run/preprocessor/stylus\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runPreprocessorStylus        = (o)  -> @runPreprocessorStylusJs o\\n  o.runPreprocessorStylusFrame   = (o) !-> @runPreprocessorStylusFrameJs o\\n  o.runPreprocessorStylusEditor  = (o) !-> @runPreprocessorStylusEditorJs o\\n  o.runPreprocessorStylusCompile = (o)  -> @runPreprocessorStylusCompileSy o\\n  \\n  o.runPreprocessorStylusJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Stylus'\\n    types = \\n      frame:   !-> _this.runPreprocessorStylusFrame   o\\n      editor:  !-> _this.runPreprocessorStylusEditor  o\\n      compile:  -> _this.runPreprocessorStylusCompile o\\n    types[o.type]!\\n    \\n  o.runPreprocessorStylusFrameJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Stylus:Frame'\\n    o.src = @runPreprocessorStylusCompile o\\n    @runDisplay o\\n  \\n  o.runPreprocessorStylusEditorJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Stylus:Editor'\\n    o.src = @runPreprocessorStylusCompile o\\n    @runDisplay o\\n  \\n  o.runPreprocessorStylusCompileSy = (o) -> # src\\n    _this = @; @consoleLog text: 'Run:Preprocessor:Stylus:Compile'\\n    stylus o.src .render!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/template/jade\":{\"name\":\"component/main/run/template/jade\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runTemplateJade        = (o)  -> @runTemplateJadeJs o\\n  o.runTemplateJadeFrame   = (o) !-> @runTemplateJadeFrameJs o\\n  o.runTemplateJadeEditor  = (o) !-> @runTemplateJadeEditorJs o\\n  o.runTemplateJadeCompile = (o)  -> @runTemplateJadeCompileJd o\\n  \\n  o.runTemplateJadeJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Template:Jade'\\n    types = \\n      frame:   !-> _this.runTemplateJadeFrame   o\\n      editor:  !-> _this.runTemplateJadeEditor  o\\n      compile:  -> _this.runTemplateJadeCompile o\\n    types[o.type]!\\n    \\n  o.runTemplateJadeFrameJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Template:Jade:Frame'\\n    o.src = @runTemplateJadeCompile o\\n    @runDisplay o\\n  \\n  o.runTemplateJadeEditorJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Template:Jade:Editor'\\n    o.src = @runTemplateJadeCompile o\\n    @runDisplay o\\n  \\n  o.runTemplateJadeCompileJd = (o) -> # src\\n    _this = @; @consoleLog text: 'Run:Template:Jade:Compile'\\n    jade.render o.src, pretty:true\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/transpiler/babel\":{\"name\":\"component/main/run/transpiler/babel\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runTranspilerBabel        = (o)  -> @runTranspilerBabelJs o\\n  o.runTranspilerBabelFrame   = (o) !-> @runTranspilerBabelFrameJs o\\n  o.runTranspilerBabelEditor  = (o) !-> @runTranspilerBabelEditorJs o\\n  o.runTranspilerBabelCompile = (o)  -> @runTranspilerBabelCompileBb o\\n  \\n  o.runTranspilerBabelJs = (o) ->\\n    _this = @; @consoleLog text: 'Run:Transpiler:Babel:Frame'\\n    \\n    types = \\n      frame:   !-> _this.runTranspilerBabelFrame   o\\n      editor:  !-> _this.runTranspilerBabelEditor  o\\n      compile:  -> _this.runTranspilerBabelCompile o\\n    types[o.type]!\\n    \\n  o.runTranspilerBabelFrameJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Transpiler:Babel:Frame'\\n    o.script = @runTranspilerBabelCompile o\\n    o.src    = false\\n    @runDisplay o\\n  \\n  o.runTranspilerBabelEditorJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Run:Transpiler:Babel:Editor'\\n    o.src = @runTranspilerBabelCompile o\\n    o.ext = 'js'\\n    @runDisplay o\\n  \\n  o.runTranspilerBabelCompileBb = (o) -> # src\\n    _this = @; @consoleLog text: 'Run:Transpiler:Babel:Compile'\\n    babel.transform o.src, do\\n      stage: 2\\n      loose: 'all'\\n    .code\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/transpiler/coffeescript\":{\"name\":\"component/main/run/transpiler/coffeescript\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runTranspilerCoffeescript        = (o)  -> @runTranspilerCoffeescriptJs o\\n  o.runTranspilerCoffeescriptFrame   = (o) !-> @runTranspilerCoffeescriptFrameJs o\\n  o.runTranspilerCoffeescriptEditor  = (o) !-> @runTranspilerCoffeescriptEditorJs o\\n  o.runTranspilerCoffeescriptCompile = (o)  -> @runTranspilerCoffeescriptCompileTs o\\n  \\n  o.runTranspilerCoffeescriptJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Coffeescript'\\n    \\n    types = \\n      frame:   !-> _this.runTranspilerCoffeescriptFrame   o\\n      editor:  !-> _this.runTranspilerCoffeescriptEditor  o\\n      compile:  -> _this.runTranspilerCoffeescriptCompile o\\n    types[o.type]!\\n    \\n  o.runTranspilerCoffeescriptFrameJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Coffeescript:Frame'\\n    o.script = @runTranspilerCoffeescriptCompile o\\n    o.src    = false\\n    @runDisplay o\\n  \\n  o.runTranspilerCoffeescriptEditorJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Coffeescript:Editor'\\n    o.src = @runTranspilerCoffeescriptCompile o\\n    o.ext = 'js'\\n    @runDisplay o\\n  \\n  o.runTranspilerCoffeescriptCompileTs = (o) -> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Coffeescript:Compile'\\n    CoffeeScript.compile o.src, bare: true\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/transpiler/typescript\":{\"name\":\"component/main/run/transpiler/typescript\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runTranspilerLivescript        = (o)  -> @runTranspilerLivescriptJs o\\n  o.runTranspilerLivescriptFrame   = (o) !-> @runTranspilerLivescriptFrameJs o\\n  o.runTranspilerLivescriptEditor  = (o) !-> @runTranspilerLivescriptEditorJs o\\n  o.runTranspilerLivescriptCompile = (o)  -> @runTranspilerLivescriptCompileLs o\\n  \\n  o.runTranspilerLivescriptJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript'\\n    \\n    types = \\n      frame:   !-> _this.runTranspilerLivescriptFrame   o\\n      editor:  !-> _this.runTranspilerLivescriptEditor  o\\n      compile:  -> _this.runTranspilerLivescriptCompile o\\n    types[o.type]!\\n    \\n  o.runTranspilerLivescriptFrameJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript:Frame'\\n    o.script = @runTranspilerLivescriptCompile o\\n    o.src    = false\\n    @runDisplay o\\n  \\n  o.runTranspilerLivescriptEditorJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript:Editor'\\n    o.src = @runTranspilerLivescriptCompile o\\n    o.ext = 'js'\\n    @runDisplay o\\n  \\n  o.runTranspilerLivescriptCompileLs = (o) -> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript:Compile'\\n    LiveScript.compile o.src, bare: true\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/element\":{\"name\":\"component/admin/element\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initElement =                  !-> @initElementJs!\\n\\n  o.elementMakeData =          (o) !-> @elementMakeDataJs o\\n  o.elementMakeContainer =     (o) !-> @elementMakeContainerJs o\\n  o.elementMakeRoutes =        (o) !-> @elementMakeRoutesJs o\\n\\n  o.elementSelectById =        (o) !-> @elementSelectByIdJs o\\n  o.elementSelectByName =      (o) !-> @elementSelectByNameJs o\\n  o.elementCreate =            (o) !-> @elementCreateJs o\\n  o.elementUpdate =            (o) !-> @elementUpdateJs o\\n  o.elementDestroy =           (o) !-> @elementDestroyJs o\\n  o.elementFind =              (o) !-> @elementFindJs o\\n  o.elementFindAll =           (o) !-> @elementFindAllJs o\\n  o.elementRefresh =           (o) !-> @elementRefreshJs o\\n  o.elementClone =             (o) !-> @elementCloneJs o\\n  o.elementReplace =           (o) !-> @elementReplaceJs o\\n  o.elementClear =             (o) !-> @elementClearJs o\\n  \\n  o.elementOnSrcChange =       (o) !-> @elementOnSrcChangeJs o\\n  o.elementOnSelectChange =    (o) !-> @elementOnSelectChangeJs o\\n  o.elementOnSelectCreate =    (o)  -> @elementOnSelectCreateJs o\\n  o.elementOnRouteId =         (o) !-> @elementOnRouteIdJs o\\n  #o.elementOnRouteName =       (o) !-> @elementOnRouteNameJs o\\n  #o.elementOnRouteCreate =     (o) !-> @elementOnRouteCreateJs o\\n  #o.elementOnRouteUpdate =     (o) !-> @elementOnRouteUpdateJs o\\n  #o.elementOnRouteDestroy =    (o) !-> @elementOnRouteDestroyJs o\\n  o.elementOnRouteData =       (o) !-> @elementOnRouteDataJs o\\n  o.elementOnRouteDataStatic = (o) !-> @elementOnRouteDataStaticJs o\\n  #o.elementOnRouteMeta    =    (o) !-> @elementOnRouteMetaJs o\\n  o.elementOnSampleChange =    (o) !-> @elementOnSampleChangeJs o\\n  o.elementOnViewChange =      (o) !-> @elementOnViewChangeJs o\\n  \\n  o.initElementJs = !->\\n    _this = @; @consoleLog text: 'Element!'\\n    \\n    @elementMakeData!\\n\\n    @elementMakeContainer do\\n      src:    @props.admin.src\\n      select: @props.admin.select\\n      sample: @props.admin.sample\\n      view:   @props.admin.view\\n    \\n    @elementMakeRoutes!\\n\\n    @elementOnViewChange value: @viewGetValue!\\n  \\n  o.elementMakeDataJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Element:Make:Data'\\n    config  = @configGet config: 'store_data'\\n    adapter = config.index\\n    params  = config[adapter]\\n    @dataMake adapter: adapter, params: params\\n  \\n  o.elementMakeContainerJs = (o) !-> # src{}, select{}, route{}, sample{}, view{}\\n    _this = @; @consoleLog text: 'Element:Make:Container'\\n    # Src\\n    @src =       @srcMakeContainer o.src\\n    #@srcDisable!\\n    @srcSetValue value: @optionStoreGetValue config: 'store_data'\\n    # Select\\n    o.select.options_clone = o.sample.options\\n    @select = @selectMakeContainer o.select\\n    # Sample\\n    @sample = @sampleMakeContainer o.sample\\n    @sampleSetValue value: o.sample.options.0.value\\n    # View\\n    @view = @viewMakeContainer o.view\\n    @viewSetValue value: o.view.options.0.value\\n    # \\n    @elementRefresh!\\n    @headerSet {}\\n  \\n  o.elementMakeRoutesJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Element:Make:Routes'\\n    routes =\\n      '/id/:id': (id) !-> \\n        _this.elementOnRouteId id: id\\n      #'/name/?((\\\\w|.)*)': (name) !-> _this.elementOnName name: name\\n      '/data/:adapter/?((\\\\w|.)*)': (adapter, params) !-> \\n        _this.elementOnRouteData adapter: adapter, params: params\\n      '/data-static/?((\\\\w|.)*)': (db_url) !-> \\n        _this.elementOnRouteDataStatic db_url: db_url\\n      '/data-script/?((\\\\w|.)*)': (db_url) !-> \\n        _this.elementOnRouteDataStatic db_url: db_url, script: true\\n    @routeMake routes: routes\\n  \\n  o.elementSelectByIdJs = (o) !-> # id\\n    _this = @; @consoleLog text: 'Element:Select:By:Id'\\n    cb = (attrs) !->\\n      if attrs.id != _this.id\\n        _this.id   = attrs.id   || ''\\n        _this.name = attrs.name || ''\\n        _this.headerSet {}\\n        # Load\\n        _this.loadReset!\\n        _this.loadById!\\n        # Select\\n        _this.selectSetValue value: attrs.id\\n        # Route\\n        try\\n          if attrs.id then _this.routeSet route: 'id/' + attrs.id else _this.routeClear!\\n        catch e\\n          console.log e\\n    @child = null # ? firebase\\n    @loadAutoSetValue value: false\\n    @elementFind id: o.id, cb: cb\\n  \\n  o.elementSelectByNameJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Element:Select:By:Name'\\n  \\n  o.elementCreateJs = (o) !-> # attrs{}, cb\\n    _this = @; @consoleLog text: 'Element:Create'\\n    sample = @sampleGetValue!\\n    for let i, el of @samples[sample]\\n      o.attrs[i] = JSON.stringify el # JSON.stringify\\n    cb = (item) !->\\n      o.cb item\\n      #_this.refresh!\\n      _this.elementRefresh!\\n    @dataCreate attrs: o.attrs, cb: cb\\n  \\n  o.elementUpdateJs = (o) !-> # ?id, attrs{}, cb\\n    _this = @; @consoleLog text: 'Element:Update'\\n    id = o.id || @id\\n    cb = o.cb || !-> _this.elementRefresh!\\n    @dataUpdate id: id, attrs: o.attrs, cb: cb\\n  \\n  o.elementDestroyJs = (o) !-> # id, ?cb, ?ids\\n    _this = @; @consoleLog text: 'Element:Destroy'\\n    selected = @selected!\\n    cb = !->\\n      _this.id = null; _this.name = null\\n      _this.headerSet {}\\n      _this.loadReset!\\n      _this.elementRefresh!\\n    if (selected.length == 0) && o.id\\n      @dataDestroy id: o.id, cb: cb\\n    else if (selected.length > 0)\\n      for let el, i in selected\\n        if i == selected.length - 1\\n          _cb = cb\\n        else\\n          _cb = !->\\n        @dataDestroy id: el, cb: _cb\\n  \\n  o.elementFindJs = (o) !-> # id, cb\\n    _this = @; @consoleLog text: 'Element:Find'\\n    @dataFind id: o.id, cb: o.cb\\n  \\n  o.elementFindAllJs = (o) !-> # cb\\n    _this = @; @consoleLog text: 'Element:Find:All'\\n    @dataFindAll cb: o.cb\\n  \\n  o.elementRefreshJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Element:Refresh'\\n    @elementClear!\\n    @refresh!\\n    cb = (list) !->\\n      for el, i in list\\n        option = id: el.id, name: (el.name || '')\\n        _this.selectCreate option: option\\n      # ?\\n      if _this.id\\n        _this.selectSetValue value: _this.id\\n        _this.routeSet       route: 'id/' + _this.id\\n      # ?\\n    @elementFindAll cb: cb\\n  \\n  o.elementCloneJs = (o) !-> # ?options\\n    _this = @; @consoleLog text: 'Element:Clone'\\n    @samples['Clone'] = {}\\n    for let input, files of @inputs\\n      @samples['Clone']['input_' + input] = {}\\n      for let file, props of files\\n        @samples['Clone']['input_' + input][file] = do\\n          name: props.name, ext: props.ext, mode: props.mode, src: props.src\\n    options = o.options || @admin.select.options_clone\\n    @sampleRefresh options: options, value: 'Clone'\\n    @headerSetEditModal id: 'clone'\\n  \\n  o.elementReplaceJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Element:Replace'\\n    sample = @sampleGetValue!\\n    inputs = {}\\n    for let entity, i in ['html' 'css' 'js']\\n      inputs[entity] = {}\\n      for let file, props of @samples[sample]['input_' + entity]\\n        inputs[entity][file] = {}\\n        for let prop, val of props\\n          inputs[entity][file][prop] = val\\n    @inputLoad inputs: inputs\\n    @saveById!\\n  \\n  o.elementClearJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Element:Clear'\\n    @id   = null\\n    @name = null\\n    @headerSet {}\\n    for let el, i in ['html' 'css' 'js']\\n      @inputReset entity: el\\n    @selectClear!\\n    @routeClear!\\n  \\n  o.elementOnSrcChangeJs = (o) !-> # value\\n    _this = @; @consoleLog text: 'Element:On:Src:Change'\\n    @optionStoreSetValue config: 'store_data', value: o.value\\n    @optionStoreSetDataHeader title: o.value\\n    @elementClear!\\n    @elementMakeData!\\n    @elementRefresh!\\n  \\n  o.elementOnSelectChangeJs = (o) !-> # value\\n    _this = @; @consoleLog text: 'Element:On:Select:Change'\\n    @elementSelectById  id: o.value\\n  \\n  o.elementOnSampleChangeJs = (o) !-> # value\\n    _this = @; @consoleLog text: 'Element:On:Sample:Change'\\n    @headerSetEditModal id: 'replace', value: o.value\\n\\n  o.elementOnViewChangeJs = (o) !-> # value\\n    _this = @; @consoleLog text: 'Element:On:View:Change'\\n    view  = o.value\\n    views = \\n      'Tree': \\n        refresh:   !-> _this.treeDataRefresh!\\n        selected:   -> []\\n        template:  @templates.admin.tree_data\\n        container: !-> _this.treeDataMakeContainer _this.admin.tree.data\\n      'List': \\n        refresh:   !-> _this.listDataRefresh!\\n        selected:   -> _this.listDataGetSelected!\\n        template:  @templates.admin.list_data\\n        container: !-> _this.listDataRefresh!; _this.listDataMakeSearchable!\\n    @refresh  = views[view].refresh\\n    @selected = views[view].selected\\n    $ '#content__admin' .html ''\\n    $ '#content__admin' .html views[view].template\\n    views[view].container!\\n    #@refresh!\\n  \\n  o.elementOnSelectCreateJs = (o) -> # value\\n    _this = @; @consoleLog text: 'Element:On:Select:Create'\\n    if o.value\\n      cb = (attrs) !->\\n        _this.selectCreate   option: {id: attrs.id, name: attrs.name}\\n        _this.selectSetValue value: attrs.id\\n        _this.elementSelectById  id: attrs.id\\n      @elementCreate attrs: {name: o.value}, cb: cb\\n      null\\n  \\n  o.elementOnRouteIdJs = (o) !-> # id\\n    _this = @; @consoleLog text: 'Element:On:Route:Id'\\n    @elementSelectById id: o.id\\n  \\n  o.elementOnRouteDataJs = (o) !-> # adapter, ?params\\n    _this = @; @consoleLog text: 'Element:On:Route:Data'\\n    params = {}\\n    title  = @optionStoreMatchAliasToTitle alias: o.adapter\\n    try\\n      params = JSON.parse o.params\\n    catch e\\n      console.log e\\n    if title != ''\\n      if params.db_url\\n        @config.store_data[o.adapter].db_url = params.db_url\\n      if params.table\\n        @config.store_data[o.adapter].table  = params.table\\n      if params.others\\n        @config.store_data[o.adapter].others = JSON.stringify params.others\\n      @srcSetValue value: title\\n      @elementOnSrcChange value: title\\n    else\\n      @elementClear!\\n  \\n  o.elementOnRouteDataStaticJs = (o) !-> # db_url, ?script\\n    _this = @; @consoleLog text: 'Element:On:Route:Data:Static'\\n    @config.store_data['static'].db_url = o.db_url\\n    if o.script\\n      @config.store_data['static'].others = '{\\\"script\\\": true}'\\n    @srcSetValue value: 'Static'\\n    @elementOnSrcChange value: 'Static'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/header\":{\"name\":\"component/admin/header\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initHeader =            !-> @initHeaderJs!\\n  \\n  o.headerSet =          (o) !-> @headerSetJs o\\n  o.headerSetIdName =    (o) !-> @headerSetIdNameJq o\\n  o.headerSetSaveLoad =  (o) !-> @headerSetSaveLoadJq o\\n  o.headerSetEditModal = (o) !-> @headerSetEditModalJq o\\n  #o.headerSetRefresh =  (o) !-> @headerSetRefreshJq o\\n  \\n  o.initHeaderJs = !->\\n    _this = @; @consoleLog text: 'Header!'\\n  \\n  o.headerSetJs = (o) !-> # ?id, ?name\\n    _this = @; @consoleLog text: 'Header:Set:'\\n    @headerSetIdName   id:   (o.id || @id), name: (o.name || @name)\\n    @headerSetSaveLoad save: (o.id || @id), load: (o.id || @id)\\n  \\n  o.headerSetIdNameJq = (o) !-> # ?id, ?name\\n    _this = @; @consoleLog text: 'Header:Set:Id:Name'\\n    id   = if (o.id || @id) then (o.id || @id) + ' : ' else ''\\n    name = if (o.name || @name) then (o.name || @name) else ''\\n    $ '#header__id' .html (id + name)\\n    # ?\\n    $ '#content__admin__select__edit__text' .val name\\n    # ?\\n  \\n  o.headerSetSaveLoadJq = (o) !-> # ?save, ?load\\n    _this = @; @consoleLog text: 'Header:Set:Save:Load'\\n    save = if (o.save || @id) then false else true\\n    load = if (o.load || @id) then false else true\\n    $ '#content__save' .prop 'disabled', save\\n    $ '#content__load' .prop 'disabled', load\\n    if save then @saveAutoDisable! else @saveAutoEnable!\\n    if load then @loadAutoDisable! else @loadAutoEnable!\\n  \\n  o.headerSetEditModalJq = (o) !-> # id, ?value\\n    _this = @; @consoleLog text: 'Header:Set:Modal:Clone'\\n    value = o.value || (@id + ' : ' + @name)\\n    $ '#content__admin__select__' + o.id + '__text' .val value\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/list\":{\"name\":\"component/admin/list\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initList =                 !-> @initListJs!\\n  \\n  o.initListJs = !->\\n    if @debug then console.log 'List!'\\n    \\n    (require './list/data.ls') Component\\n    /*\\n    @listMainDataMakeContainer      @props.admin.list.default\\n    */\\n\\nif typeof module == 'object' then module.exports = Component\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/list/data\":{\"name\":\"component/admin/list/data\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.listDataMakeContainer =    (o) !-> @listDataMakeContainerDt o\\n  o.listDataMakeHolder =       (o) !-> @listDataMakeHolderJq o\\n  o.listDataGetSelected =      (o)  -> @listDataGetSelectedJq o\\n  o.listDataFormatRows =       (o)  -> @listDataFormatRowsJs o\\n  o.listDataFormatRow  =       (o)  -> @listDataFormatRowJs o\\n  o.listDataGetColumns =       (o)  -> @listDataGetColumnsJs o\\n  o.listDataClearInputs =      (o) !-> @listDataClearInputsJq o\\n  o.listDataRefresh =          (o) !-> @listDataRefreshJs o\\n  \\n  o.listDataMakeSearchable =   (o) !-> @listDataMakeSearchableJq o\\n  o.listDataMakeRefreshable =  (o) !-> @listDataMakeRefreshableJq o\\n  o.listDataMakeEditable =     (o) !-> @listDataMakeEditableJq o\\n  o.listDataMakeCheckallable = (o) !-> @listDataMakeCheckallableJq o\\n  \\n  o.listDataMakeContainerDt = (o) !-> \\n    # id, creatable, destroyable, searchable, refreshable, editable, checkallable\\n    _this = @; @consoleLog text: 'List:Data:Make:Container'\\n    cb = (list) !->\\n      table = \\n        data:           _this.listDataFormatRows  list: list\\n        columns:        _this.listDataGetColumns!\\n        order:          [[ 1, 'desc' ]]\\n      _this.list = $ '#' + o.id .DataTable table\\n      #_this.elementRefresh!\\n    if o.searchable   then _this[o.searchable] o\\n    if o.editable     then _this[o.editable] o\\n    if o.checkallable then _this[o.checkallable] o\\n    @elementFindAll cb: cb\\n  \\n  o.listDataMakeHolderJq = (o) !-> # id\\n    $ '#content__list_wrapper' .html '\\n      <table id=\\\"content__list\\\" class=\\\"table table-bordered table-hover\\\"></table>\\n    '\\n  \\n  o.listDataGetSelectedJq = (o) ->\\n    _this = @; @consoleLog text: 'List:Data:Get:Selected'\\n    ids = []\\n    $ '#content__list tbody tr input:checked' .each (key, val) !->\\n      id = $ @ .attr 'data-id'\\n      ids.push id\\n    ids\\n  \\n  o.listDataFormatRowsJs = (o) -> # list\\n    _this = @; @consoleLog text: 'List:Data:Format:Rows' # [] of {} -> [] of []\\n    rows = [] \\n    for let item, i in o.list\\n      row = [\\n        '<input type=\\\"checkbox\\\" data-id=\\\"' + item.id + '\\\">'\\n        '<a onclick=\\\"app.component.elementSelectById({id: \\\\'' + item.id + '\\\\'})\\\">' + item.id + '</a>'\\n        @listDataFormatRow id: item.id, val: (item.name       || ''), attr: 'name'\\n        @listDataFormatRow id: item.id, val: (item.date       || ''), attr: 'date'\\n      ]\\n      rows.push row\\n    rows\\n  \\n  o.listDataFormatRowJs = (o) -> # id, val, attr\\n    _this = @; @consoleLog text: 'List:Data:Format:Row'\\n    '<span data-id=\\\"' + o.id + \\n    '\\\" data-attr=\\\"' + o.attr + \\n    '\\\">' + o.val + \\n    '</span>'\\n  \\n  o.listDataGetColumnsJs = (o) -> # \\n    _this = @; @consoleLog text: 'List:Data:Get:Columns'\\n    columns = \\n      * title: '<input type=\\\"checkbox\\\">', width: '5%', 'orderable': false\\n      * title: '#', width: '5%'\\n      * title: 'Name', width: '20%'\\n      * title: 'Date', width: '5%'\\n      ...\\n    columns\\n  \\n  o.listDataClearInputsJq = (o) !-> # \\n    _this = @; @consoleLog text: 'List:Data:Clear:Inputs'\\n    $ '#content__list input[type=\\\"text\\\"]' .each !-> $ @ .val ''\\n  \\n  o.listDataRefreshJs = (o) !-> # \\n    _this = @; @consoleLog text: 'List:Refresh'\\n    @listDataClearInputs o\\n    @listDataMakeHolder  o\\n    @listDataMakeContainer do\\n      id: 'content__list', name: 'index'\\n      editable: 'listDataMakeEditable' checkallable: 'listDataMakeCheckallable'\\n  \\n  o.listDataMakeEditableJq = (o) !-> # \\n    _this = @; @consoleLog text: 'List:Data:Make:Editable'\\n    $ '#content__list' .on 'click', 'tbody tr :not(:first-child):not(:nth-child(2))', (e) !->\\n      td   = $ @\\n      val  = td .find 'span' .html!\\n      id   = td .find 'span' .attr 'data-id'\\n      attr = td .find 'span' .attr 'data-attr'\\n      $ td .find 'span' .editable do\\n        type: 'textarea'\\n        success: (response, val) !->\\n          attrs = {}\\n          attrs[attr] = val\\n          cb   = !-> \\n            _this.elementRefresh!\\n          _this.dataUpdate id: id, attrs: attrs, cb: cb\\n  \\n  o.listDataMakeCheckallableJq = (o) !-> # \\n    _this = @; @consoleLog text: 'List:Data:Make:Checkallable'\\n    $ '#content__list' .on 'change', 'thead tr th input[type=\\\"checkbox\\\"]:first-child', !->\\n      if $ @ .is ':checked'\\n        $ '#content__list tbody tr input:first-child' .each !->\\n          $ @ .prop 'checked', true\\n      else\\n        $ '#content__list tbody tr input:first-child' .each !->\\n          $ @ .prop 'checked', false\\n  \\n  o.listDataMakeSearchableJq = (o) !-> # \\n    _this = @; @consoleLog text: 'List:Data:Make:Searchable'\\n    $ '#content__list__id'   .on 'keyup', !->\\n      _this.list .column 1 .search @value, regex: true .draw!\\n    $ '#content__list__name' .on 'keyup', !->\\n      _this.list .column 2 .search @value, regex: true .draw!\\n    $ '#content__list__date' .on 'keyup', !->\\n      _this.list .column 3 .search @value, regex: true .draw!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/route\":{\"name\":\"component/admin/route\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initRoute =              !-> @initRouteJs!\\n  \\n  o.routeMake =          (o) !-> @routeMakeDr o\\n  o.routeSet =           (o) !-> @routeSetDr o\\n  o.routeClear =         (o) !-> @routeClearDr o\\n  \\n  o.initRouteJs = !->\\n    _this = @; @consoleLog text: 'Route!'\\n      \\n  o.routeMakeDr = (o) !-> # routes{!->}\\n    _this = @; @consoleLog text: 'Route:Make'\\n    @router = Router o.routes\\n    @router.init!\\n    \\n  o.routeSetDr = (o) !-> # route\\n    _this = @; @consoleLog text: 'Route:Set'\\n    if @router.setRoute then @router.setRoute (o.route + '')\\n    \\n  o.routeClearDr = (o) !-> # \\n    _this = @; @consoleLog text: 'Route:Clear'\\n    if @router.setRoute then @router.setRoute ''\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/sample\":{\"name\":\"component/admin/sample\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initSample =              !-> @initSampleJs!\\n  \\n  o.sampleMakeContainer = (o)  -> @sampleMakeContainerSz o\\n  o.sampleSetValue =      (o) !-> @sampleSetValueSz o\\n  o.sampleGetValue =      (o)  -> @sampleGetValueSz o\\n  o.sampleRefresh =       (o)  -> @sampleRefreshJs o\\n  o.sampleRenderValue =   (o)  -> @sampleRenderValueJs o\\n  o.sampleRenderOption =  (o)  -> @sampleRenderOptionJs o\\n  \\n  o.initSampleJs = !->\\n    _this = @; @consoleLog text: 'Sample!'\\n    \\n  o.sampleMakeContainerSz = (o) -> # id, options, ?onChange\\n    _this = @; @consoleLog text: 'Sample:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] value: value\\n      create: false\\n      render: \\n        item: (item, escape) ->\\n          _this.sampleRenderValue item: item \\n        option: (item, escape) ->\\n          _this.sampleRenderOption item: item \\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.sampleSetValueSz = (o) !-> # value\\n    _this = @; @consoleLog text: 'Sample:Set:Value'\\n    @sample.setValue o.value, ->\\n\\n  o.sampleGetValueSz = (o) -> # \\n    _this = @; @consoleLog text: 'Sample:Get:Value'\\n    @sample.getValue!\\n\\n  o.sampleRefreshJs = (o) -> # options, value\\n    _this = @; @consoleLog text: 'Sample:Refresh'\\n    @sample.clearOptions!\\n    for el, i in o.options\\n      option = value: el.value\\n      @sample.addOption option\\n    @sampleSetValue value: o.value || o.options.0\\n    \\n  o.sampleRenderValueJs = (o) -> # item\\n    _this = @; @consoleLog text: 'Sample:Render:Value'\\n    value = o.item.value; _value = ''\\n    if (value == 'Clone' && @id != null)\\n      _id    = (@id + '').substring(0, 8)\\n      _name  = if @name then ' : ' + (@name + '').substring(0, 8) else ''\\n      _value = ' - ' + _id + _name\\n    '<div>' + \\n    '<span>' + value + _value + '</span> ' + \\n    '</div>'\\n    \\n  o.sampleRenderOptionJs = (o) -> # item\\n    _this = @; @consoleLog text: 'Sample:Render:Option'\\n    value = o.item.value; _value = ''\\n    if (value == 'Clone' && @id != null)\\n      _id    = (@id + '').substring(0, 8)\\n      _name  = if @name then ' : ' + (@name + '').substring(0, 8) else ''\\n      _value = ' - ' + _id + _name\\n    '<div>' + \\n    '<span>' + value + _value + '</span> ' + \\n    '</div>'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/select\":{\"name\":\"component/admin/select\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initSelect =                !-> @initSelectJs!\\n  \\n  o.selectMakeContainer =   (o)  -> @selectMakeContainerSz o\\n  o.selectMakeRefreshable = (o) !-> @selectMakeRefreshableJq o\\n  o.selectMakeDestroyable = (o) !-> @selectMakeDestroyableJq o\\n  o.selectMakeCreatable =   (o) !-> @selectMakeCreatableJq o\\n  o.selectMakeUpdatable =   (o) !-> @selectMakeUpdatableJq o\\n  o.selectMakeClonable =    (o) !-> @selectMakeClonableJq o\\n  o.selectMakeReplaceable = (o) !-> @selectMakeReplaceableJq o\\n\\n  o.selectSetValue =        (o) !-> @selectSetValueSz o\\n  o.selectGetValue =        (o)  -> @selectGetValueSz o\\n  o.selectClear =           (o) !-> @selectClearSz o\\n  o.selectCreate =          (o) !-> @selectCreateSz o\\n  o.selectDestroy =         (o) !-> @selectDestroySz o\\n  o.selectRenderValue =     (o)  -> @selectRenderValueJs o\\n  o.selectRenderOption =    (o)  -> @selectRenderOptionJs o\\n  o.selectReset =           (o) !-> @selectResetSzJq o\\n  \\n  o.initSelectJs = !->\\n    _this = @; @consoleLog text: 'Select!'\\n    \\n  o.selectMakeContainerSz = (o) -> # id, options_clone, ?onChange, ?onCreate, ?destroyable, ?clonable, ?creatable\\n    _this = @; @consoleLog text: 'Select:Make:Container'\\n    config = ->\\n      valueField: 'id', labelField:   'name', \\n      sortField:  'id', searchField:   ['id' 'name'], \\n      options:    [],   sortDirection: 'desc' \\n      maxItems:   1, \\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] value: value\\n      create: (value) ->\\n        if o.onCreate\\n          value = _this[o.onCreate] value: value\\n      render: \\n        item: (item, escape) ->\\n          _this.selectRenderValue item: item \\n        option: (item, escape) ->\\n          _this.selectRenderOption item: item \\n    if o.refreshable\\n      @selectMakeRefreshable do\\n        id: o.id + '__refresh', refreshable: o.refreshable\\n    if o.creatable\\n      @selectMakeCreatable do\\n        id: o.id + '__create', creatable: o.creatable\\n    if o.updatable\\n      @selectMakeUpdatable do\\n        id: o.id + '__edit', id_edit: o.id, updatable: o.updatable\\n    if o.clonable\\n      @selectMakeClonable do\\n        id: o.id + '__clone', id_edit: o.id, clonable: o.clonable, options: o.options_clone\\n    if o.replaceable\\n      @selectMakeReplaceable do\\n        id: o.id + '__replace', id_edit: o.id, replaceable: o.replaceable\\n    if o.destroyable\\n      @selectMakeDestroyable do\\n        id: o.id + '__destroy', destroyable: o.destroyable\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n    \\n  o.selectMakeRefreshableJq = (o) !-> # id, refreshable\\n    _this = @; @consoleLog text: 'Select:Make:Refreshable'\\n    $ '#' + o.id .click !-> \\n      cb = !-> \\n      _this[o.refreshable] cb: cb\\n    \\n  o.selectMakeDestroyableJq = (o) !-> # id, destroyable\\n    _this = @; @consoleLog text: 'Select:Make:Destroyable'\\n    $ '#' + o.id .click !-> \\n      value = _this.selectGetValue!\\n      _this[o.destroyable] id: value\\n    \\n  o.selectMakeCreatableJq = (o) !-> # id, creatable\\n    _this = @; @consoleLog text: 'Select:Make:Creatable'\\n    $ '#' + o.id + '__button' .click !-> \\n      $ '#' + o.id + '__modal' .modal 'hide'\\n      data = $ '#' + o.id + '__text' .val!\\n      _this[o.creatable] value: data\\n      $ '#' + o.id + '__text' .val ''\\n    \\n  o.selectMakeUpdatableJq = (o) !-> # id, updatable\\n    _this = @; @consoleLog text: 'Select:Make:Updatable'\\n    $ '#' + o.id + '__button' .click !-> \\n      $ '#' + o.id + '__modal' .modal 'hide'\\n      data = $ '#' + o.id + '__text' .val!\\n      _this[o.updatable] attrs: {name: data}\\n      $ '#' + o.id + '__text' .val ''\\n    \\n  o.selectMakeClonableJq = (o) !-> # id, id_edit, clonable, ?options\\n    _this = @; @consoleLog text: 'Select:Make:Clonable'\\n    $ '#' + o.id + '__button' .click !-> \\n      $ '#' + o.id_edit + '__edit__modal' .modal 'hide'\\n      _this[o.clonable] options: o.options\\n    \\n  o.selectMakeReplaceableJq = (o) !-> # id, id_edit, replaceable\\n    _this = @; @consoleLog text: 'Select:Make:Replaceable'\\n    $ '#' + o.id + '__button' .click !-> \\n      $ '#' + o.id_edit + '__edit__modal' .modal 'hide'\\n      _this[o.replaceable] {}\\n\\n  o.selectSetValueSz = (o) !-> # value\\n    _this = @; @consoleLog text: 'Select:Set:Value'\\n    @select.setValue o.value, ->\\n\\n  o.selectGetValueSz = (o) -> # \\n    _this = @; @consoleLog text: 'Select:Get:Value'\\n    @select.getValue!\\n\\n  o.selectClearSz = (o) !-> # \\n    _this = @; @consoleLog text: 'Select:Clear'\\n    if @select.clearOptions then @select.clearOptions!\\n\\n  o.selectCreateSz = (o) !-> # option\\n    _this = @; @consoleLog text: 'Select:Create'\\n    @select.addOption o.option\\n\\n  o.selectDestroySz = (o) !-> # value\\n    _this = @; @consoleLog text: 'Select:Destroy'\\n    @select.removeOption o.value\\n    \\n  o.selectRenderValueJs = (o) -> # item\\n    _this = @; @consoleLog text: 'Select:Render:Value'\\n    '<div>' + \\n    '<span>' + (o.item.id + '').substring(0, 8)   + ' :</span> ' + \\n    '<span>' + (o.item.name || '') + '</span> ' + \\n    '</div>'\\n    \\n  o.selectRenderOptionJs = (o) -> # item\\n    _this = @; @consoleLog text: 'Select:Render:Option'\\n    '<div>' + \\n    '<span>' + (o.item.id + '').substring(0, 8)   + ' :</span> ' + \\n    '<span>' + (o.item.name || '') + '</span> ' + \\n    '</div>'\\n\\n  o.selectResetSzJq = (o) !-> #\\n    _this = @; @consoleLog text: 'Select:Reset'\\n    @select.destroy!\\n    @select = null\\n    \\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/src\":{\"name\":\"component/admin/src\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initSrc =           !-> @initSrcJs!\\n  \\n  o.srcMakeContainer = (o)  -> @srcMakeContainerSz o\\n  o.srcSetValue =      (o) !-> @srcSetValueSz o\\n  o.srcGetValue =      (o)  -> @srcGetValueSz o\\n  o.srcEnable =        (o) !-> @srcEnableSz o\\n  o.srcDisable =       (o) !-> @srcDisableSz o\\n  \\n  o.initSrcJs = !->\\n    _this = @; @consoleLog text: 'Src!'\\n    \\n  o.srcMakeContainerSz = (o) -> # context, entity, id, options, ?onChange, option_store_id, option_store_inputs\\n    _this = @; @consoleLog text: 'Src:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] do\\n            value: value, option_store_id: o.option_store_id, option_store_inputs: o.option_store_inputs\\n      create: false\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.srcSetValueSz = (o) !-> # src, value\\n    _this = @; @consoleLog text: 'Src:Set:Value'\\n    @src.setValue o.value, ->\\n\\n  o.srcGetValueSz = (o) -> # src, value\\n    _this = @; @consoleLog text: 'Src:Get:Value'\\n    @src.getValue!\\n    \\n  o.srcEnableSz = (o) !-> # \\n    _this = @; @consoleLog text: 'Src:Enable'\\n    @src.enable!\\n    \\n  o.srcDisableSz = (o) !-> # \\n    _this = @; @consoleLog text: 'Src:Disable'\\n    @src.disable!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/tree\":{\"name\":\"component/admin/tree\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initTree =                 !-> @initTreeJs!\\n  \\n  o.initTreeJs = !->\\n    if @debug then console.log 'Tree!'\\n    \\n    (require './tree/main/data.ls') Component\\n    /*\\n    @treeMainDataMakeContainer      @props.admin.tree.default\\n    */\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/tree/data\":{\"name\":\"component/admin/tree/data\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.treeDataMakeContainer =   (o) !-> @treeDataMakeContainerJt o\\n  o.treeDataMakeEventable =   (o) !-> @treeDataMakeEventableJqJt o\\n  o.treeDataMakeSearchable =  (o) !-> @treeDataMakeSearchableJq o\\n  o.treeDataMakeRefreshable = (o) !-> @treeDataMakeRefreshableJq o\\n  \\n  o.treeDataRefresh =         (o) !-> @treeDataRefreshJq o\\n  o.treeDataGetMenuFunc =     (o)  -> @treeDataGetMenuFuncJqJt o\\n  \\n  o.treeDataMakeContainerJt = (o) -> # \\n    _this = @; @consoleLog text: 'Tree:Data:Make:Container'\\n    config = \\n      core: \\n        check_callback: true\\n        strings: 'New node': 'new_node'\\n      plugins : ['search' 'contextmenu' 'sort']\\n      contextmenu: items: @treeDataGetMenuFunc!\\n    $ '#content__tree' .jstree config\\n    if o.eventable   then _this[o.eventable] o\\n    if o.searchable  then _this[o.searchable] o\\n    @elementRefresh!\\n  \\n  o.treeDataMakeEventableJqJt = (o) ->\\n    _this = @; @consoleLog text: 'Tree:Data:Make:Eventable'\\n    # Select\\n    $ '#content__tree' .on 'select_node.jstree', (e, elem) ->\\n      _this.elementSelectById id: elem.node.li_attr.data_id\\n    # Add / Update\\n    $ '#content__tree' .on 'rename_node.jstree', (e, elem) ->\\n      tree = $ '#content__tree' .jstree true\\n      parent_id = elem.node.parent\\n      new_id    = elem.text\\n      if (new_id.substr 0, 3) == '../' # tree backtracking\\n        parent_id_new = parent_id.substr 0, (parent_id.lastIndexOf '/') # ?\\n        new_id_new    = new_id.substr 3\\n        parent_id     = if parent_id_new == '' then '#' else parent_id_new\\n        new_id        = new_id_new\\n      id        = parent_id + '/' + new_id\\n      data_id   = elem.node.li_attr.data_id\\n      data      = if parent_id == '#' then new_id \\n        else (parent_id.substr 14, parent_id.length) + '/' + new_id\\n      if elem.node.data == null   # Add\\n        tree.set_id elem.node, id # Set node id\\n        elem.node.data = data     # Set node data\\n        attrs = name: data\\n        cb   = (id) !->\\n          elem.node.li_attr.data_id = id # Set node id (data)\\n          _this.elementRefresh!\\n        _this.elementCreate attrs: attrs, cb: cb\\n      else # Update\\n        attrs = name: data\\n        cb   = !-> # ? same name as parent problem !\\n          children_parent_old = elem.node.data\\n          for let el, i in elem.node.children_d\\n            child      = tree.get_node '#' + el\\n            child_id   = child.li_attr.data_id\\n            child_data = child.data\\n            attrs      = name: child_data.replace children_parent_old, data\\n            _this.dataUpdate id: child_id, attrs: attrs, cb: !-> \\n          _this.elementRefresh!\\n        _this.dataUpdate id: data_id, attrs: attrs, cb: cb\\n  \\n  o.treeDataMakeSearchableJq = (o) ->\\n    _this = @; @consoleLog text: 'Tree:Data:Make:Searchable'\\n    searchTimeout = false\\n    $ '#content__tree__name' .keyup !->\\n      clearTimeout searchTimeout if searchTimeout\\n      searchTimeout := setTimeout !->\\n        $ '#content__tree' .jstree true .search ($ '#content__tree__name' .val!)\\n      , 250\\n  \\n  o.treeDataMakeRefreshableJq = (o) ->\\n    _this = @; @consoleLog text: 'Tree:Data:Make:Refreshable'\\n    $ '#content__tree__refresh' .click !-> _this.treeDataRefresh!\\n  \\n  o.treeDataRefreshJq = (o) !->\\n    _this = @; @consoleLog text: 'Tree:Data:Refresh'\\n    $ '#content__tree' .jstree 'deselect_all'\\n    cb = (data) !->\\n      _data = []\\n      for let item, i in data\\n        _item = {}\\n        if item.name\\n          _text_index     = item.name.lastIndexOf '/'\\n          _item.id         = 'content__tree_' + item.name\\n          _item.data       = item.name\\n          _item.text       = if _text_index > 0 then (item.name.substr _text_index + 1, item.name.length) else item.name\\n          _item.li_attr    = data_id: item.id\\n          _item.parent     = if _text_index > 0 then ('content__tree_' + item.name.substr 0, _text_index) else '#'\\n          _data.push _item\\n      #$ '#content__tree' .html '<div id=\\\"content__tree\\\"></div>'\\n      $ '#content__tree' .jstree true .settings .core .data = _data\\n      $ '#content__tree' .jstree true .refresh!\\n    @dataFindAll cb: cb\\n  \\n  o.treeDataGetMenuFuncJqJt = (o) ->\\n    _this = @; @consoleLog text: 'Tree:Data:Get:Menu:Func'\\n    menu = (node) -> # node is original / parent\\n      tree = $ '#content__tree' .jstree true\\n      items = \\n        create:\\n          separator_before: false, separator_after: false, label: 'Create Child'\\n          action: (obj) -> # can't be done here because of input elem\\n            _node = tree.create_node node\\n            tree.edit _node\\n        sibling:\\n          separator_before: false, separator_after: false, label: 'Create Sibling'\\n          action: (obj) ->\\n            _node = tree.create_node node.parent, {}\\n            tree.edit _node\\n        rename:\\n          separator_before: false, separator_after: false, label: 'Rename'\\n          action: (obj) -> # can't be done here because of input elem\\n            tree.edit node\\n        remove:\\n          separator_before: false, separator_after: false, label: 'Remove'\\n          action: (obj) ->\\n            children = []\\n            children.push node.li_attr.data_id\\n            for let el, i in node.children_d\\n              child    = tree.get_node '#' + el\\n              child_id = child.li_attr.data_id\\n              children.push child_id\\n            for let el, i in children\\n              if i == children.length - 1\\n                cb = !-> \\n                  _this.treeDataRefresh!\\n              else\\n                cb = !->\\n              _this.dataDestroy id: el, cb: cb\\n            tree.delete_node node\\n        clone:\\n          separator_before: false, separator_after: false, label: 'Clone'\\n          action: (obj) ->\\n            _this.elementClone {}\\n        replace:\\n          separator_before: false, separator_after: false, label: 'Replace'\\n          action: (obj) ->\\n            _this.elementReplace {}\\n    menu\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/admin/view\":{\"name\":\"component/admin/view\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initView =              !-> @initViewJs!\\n  \\n  o.viewMakeContainer = (o)  -> @viewMakeContainerSz o\\n  o.viewSetValue =      (o) !-> @viewSetValueSz o\\n  o.viewGetValue =      (o)  -> @viewGetValueSz o\\n  \\n  o.initViewJs = !->\\n    if @debug then console.log 'View!'\\n    \\n  o.viewMakeContainerSz = (o) -> # id, options, onChange\\n    if @debug then console.log 'View:Make:Container'\\n    _this = @\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n        if o.onChange\\n          value = _this[o.onChange] value: value\\n      create: false\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.viewSetValueSz = (o) !-> # value\\n    if @debug then console.log 'View:Set:Value'\\n    @view.setValue o.value, ->\\n\\n  o.viewGetValueSz = (o) -> # value\\n    if @debug then console.log 'View:Get:Value'\\n    @view.getValue!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/format\":{\"name\":\"component/util/format\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initFormat =                   !-> @initFormatJs!\\n  \\n  o.formatMakeContainer =      (o)  -> @formatMakeContainerSz o\\n  o.formatSetValue =           (o) !-> @formatSetValueSz o\\n  o.formatGetValue =           (o)  -> @formatGetValueSz o\\n  o.formatOnImportDataChange = (o) !-> @formatOnImportDataChangeJq o\\n  \\n  o.initFormatJs = !->\\n    _this = @; @consoleLog text: 'Format!'\\n    \\n    for let el, i in ['html' 'css' 'js']\\n      @formats.inputs[el] = @formatMakeContainer @props.util.formats.inputs[el]\\n      @formatSetValue do\\n        context: 'inputs', entity: [el], value: @props.util.formats.inputs[el].options.0.value\\n\\n    @formats.admin.index = @formatMakeContainer @props.util.formats.admin.index\\n    @formatSetValue do\\n      context: 'admin', entity: 'index', value: @props.util.formats.admin.index.options.0.value\\n    \\n  o.formatMakeContainerSz = (o) -> # context, entity, id, options, ?onChange\\n    _this = @; @consoleLog text: 'Format:Make:Container'\\n    config = ->\\n      maxItems: 1, valueField: 'value', labelField: 'value', sortField: 'value', searchField: 'value'\\n      options:  o.options\\n      onChange: (value) !->\\n       if o.onChange\\n         _this[o.onChange] value: value\\n      create: false\\n    $ '#' + o.id .selectize (config!) .0 .selectize\\n\\n  o.formatSetValueSz = (o) !-> # context, entity, value\\n    _this = @; @consoleLog text: 'Format:Set:Value'\\n    @formats[o.context][o.entity].setValue o.value, ->\\n\\n  o.formatGetValueSz = (o) -> # context, entity\\n    _this = @; @consoleLog text: 'Format:Get:Value'\\n    @formats[o.context][o.entity].getValue!\\n\\n  o.formatOnImportDataChangeJq = (o) !-> # value\\n    _this = @; @consoleLog text: 'Format:On:Import:Data:Change'\\n    $ '#content__admin__import' .prop 'disabled', (o.value == 'zip')\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/export\":{\"name\":\"component/util/export\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initExport =           !-> @initExportJs!\\n  \\n  o.export =           (o) !-> @exportMmBlFs o\\n  o.exportMakeInput =  (o) !-> @exportMakeInputJq o\\n  o.exportMakeOutput = (o) !-> @exportMakeOutputJq o\\n  o.exportMakeData =   (o) !-> @exportMakeDataJq o\\n  \\n  o.initExportJs = !->\\n    _this = @; @consoleLog text: 'Export!'\\n    \\n    (require './export/input.ls')  Component\\n    (require './export/output.ls') Component\\n    (require './export/data.ls')   Component\\n    \\n    @exportMakeInput  entity: 'html'\\n    @exportMakeInput  entity: 'css'\\n    @exportMakeInput  entity: 'js'\\n    @exportMakeOutput entity: 'index'\\n    @exportMakeData!\\n  \\n  o.exportMmBlFs = (o) !-> # blob, name, ext\\n    _this = @; @consoleLog text: 'Export'\\n    blob = new Blob [o.blob]\\n    date = (moment! .format 'MMM[]Do-h[]mm[]a')\\n    name = o.name + '-' + date + '.' + o.ext\\n    saveAs blob, 'rcx-' + name\\n  \\n  o.exportMakeInputJq = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Export:Make:Input'\\n    $ '#content__input__' + o.entity + '__export' .click !-> \\n      format   = _this.formatGetValue context: 'inputs', entity: o.entity\\n      exporter =\\n        editor: !-> _this.exportInputEditor o\\n        json:   !-> _this.exportInputJson   o\\n        zip:    !-> _this.exportInputZip    o\\n      exporter[format]!\\n  \\n  o.exportMakeOutputJq = (o) !-> # \\n    _this = @; @consoleLog text: 'Export:Make:Output'\\n    $ '#content__output__index__export' .click !-> \\n      format   = _this.resultGetValue context: 'outputs', entity: 'index'\\n      exporter =\\n        frame:  !-> _this.exportOutputFrame  o\\n        editor: !-> _this.exportOutputEditor o\\n      exporter[format]!\\n  \\n  o.exportMakeDataJq = (o) !-> # \\n    _this = @; @consoleLog text: 'Export:Make:Data'\\n    $ '#content__admin__export' .click !-> \\n      format   = _this.formatGetValue context: 'admin', entity: 'index' # 'json'\\n      exporter =\\n        json:   !-> _this.exportDataJson o\\n        zip:    !-> _this.exportDataZip  o\\n      exporter[format]!\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/export/data\":{\"name\":\"component/util/export/data\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.exportDataJson =       (o) !-> @exportDataJsonJs o\\n  o.exportDataZip =        (o) !-> @exportDataZipJz o\\n  o.exportDataFilterList = (o)  -> @exportDataFilterListJs o\\n  \\n  o.exportDataJsonJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Export:Data:Json'\\n    cb = (list) !->\\n      list = _this.exportDataFilterList list: list\\n      blob = JSON.stringify list, null, 2\\n      _this.export blob: blob, name: 'data', ext: 'json'\\n    @dataFindAll cb: cb\\n  \\n  o.exportDataZipJz = (o) !-> # \\n    _this = @; @consoleLog text: 'Export:Data:Zip'\\n    zip = new JSZip!\\n    cb = (list) !->\\n      list = _this.exportDataFilterList list: list\\n      for let el, i in list\\n        for let entity in ['html' 'css' 'js']\\n          for let j, file of (JSON.parse el['input_' + entity])\\n            zip.file el.id + '/' + file.name + '.' + file.ext, file.src\\n      blob = zip.generate type: 'blob'\\n      _this.export blob: blob, name: 'data', ext: 'zip'\\n    @dataFindAll cb: cb\\n\\n  o.exportDataFilterListJs = (o) -> # list\\n    _this = @; @consoleLog text: 'Export:Data:Filter:List'\\n    list     = []\\n    selected = @selected!\\n    if selected.length == 0\\n      list = o.list\\n    else\\n      for el, i in o.list\\n        id = el.id\\n        if (selected.indexOf (el.id + '')) != -1\\n          list.push el\\n    list\\n      \\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/export/input\":{\"name\":\"component/util/export/input\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.exportInputEditor = (o) !-> @exportInputEditorJs o\\n  o.exportInputJson =   (o) !-> @exportInputJsonJs o\\n  o.exportInputZip =    (o) !-> @exportInputZipJz o\\n  \\n  o.exportInputEditorJs = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Export:Input:Editor'\\n    file = @inputGet entity: o.entity\\n    @export blob: file.src, name: file.ext, ext: file.ext\\n  \\n  o.exportInputJsonJs = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Export:Input:Json'\\n    blob = JSON.stringify (@inputs), null, 2\\n    @export blob: blob, name: 'inputs', ext: 'json'\\n  \\n  o.exportInputZipJz = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Export:Input:Zip'\\n    zip = new JSZip!\\n    for let input, props of @inputs\\n      for let j, file of @inputFindAll entity: input\\n        zip.file file.name + '.' + file.ext, file.src\\n    blob = zip.generate type: 'blob'\\n    @export blob: blob, name: 'inputs', ext: 'zip'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/export/output\":{\"name\":\"component/util/export/output\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.exportOutputFrame =  (o) !-> @exportOutputFrameJs o\\n  o.exportOutputEditor = (o) !-> @exportOutputEditorJs o\\n  \\n  o.exportOutputFrameJs = (o) !-> # src\\n    _this = @; @consoleLog text: 'Export:Output:Frame'\\n    cb = (o) !->\\n      _this.export blob: o.src, name: 'output', ext: 'html'\\n    @runFront entity: 'notes', export: cb\\n  \\n  o.exportOutputEditorJs = (o) !-> # \\n    _this = @; @consoleLog text: 'Export:Output:Editor'\\n    file = @editorGetValue context: 'outputs', entity: 'index'\\n    @export blob: file, name: 'output', ext: 'html'\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/import\":{\"name\":\"component/util/import\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.initImport =           !-> @initImportJs!\\n  \\n  o.import =           (o) !-> @importJs o\\n  o.importMakeInput =  (o) !-> @importMakeInputJqFr o\\n  o.importMakeOutput = (o) !-> @importMakeOutputJqFr o\\n  o.importMakeAdmin =  (o) !-> @importMakeAdminJqFr o\\n  o.importMakeData =   (o) !-> @importMakeDataJqFr o\\n  \\n  o.initImportJs = !->\\n    _this = @; @consoleLog text: 'Import!'\\n    \\n    (require './import/input.ls')  Component\\n    (require './import/output.ls') Component\\n    (require './import/data.ls')   Component\\n    \\n    @importMakeInput  entity: 'html'\\n    @importMakeInput  entity: 'css'\\n    @importMakeInput  entity: 'js'\\n    @importMakeOutput entity: 'index'\\n    @importMakeData!\\n  \\n  o.importMakeInputJqFr = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Import:Make:Input'\\n    read_as = \\n      editor: 'readAsText', json: 'readAsText', zip: 'readAsArrayBuffer'\\n    $ '#content__input__' + o.entity + '__import' .change !-> \\n      format   = _this.formatGetValue context: 'inputs', entity: o.entity\\n      importer = \\n        editor: (o) !-> _this.importInputEditor o\\n        json:   (o) !-> _this.importInputJson   o\\n        zip:    (o) !-> _this.importInputZip    o\\n      reader = new FileReader!\\n      reader[read_as[format]] @files[0]\\n      reader.onload = (e) !->\\n        file   = e.target.result\\n        importer[format] file: file, entity: o.entity\\n  \\n  o.importMakeOutputJqFr = (o) !-> # entity\\n    _this = @; @consoleLog text: 'Import:Make:Output'\\n    read_as = \\n      frame: 'readAsText', editor: 'readAsText', json: 'readAsText', zip: 'readAsArrayBuffer'\\n    $ '#content__output__index__import' .change !-> \\n      format   = _this.resultGetValue context: 'outputs', entity: 'index'\\n      importer = \\n        frame:  (o) !-> _this.importOutputFrame  o\\n        editor: (o) !-> _this.importOutputEditor o\\n      reader = new FileReader!\\n      reader[read_as[format]] @files[0]\\n      reader.onload = (e) !->\\n        file   = e.target.result\\n        importer[format] file: file, entity: 'index'\\n  \\n  o.importMakeDataJqFr = (o) !-> # \\n    _this = @; @consoleLog text: 'Import:Make:Data'\\n    $ '#content__admin__import' .change !-> \\n      format   = 'json'\\n      importer =\\n        json:   (o) !-> _this.importDataJson o\\n      reader   = new FileReader!\\n      reader.readAsText @files[0]\\n      reader.onload = (e) !->\\n        file   = e.target.result\\n        importer[format] file: file\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/import/data\":{\"name\":\"component/util/import/data\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.importDataJson = (o) !-> @importDataJsonJs o\\n  \\n  o.importDataJsonJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Import:Data:Json'\\n    list  = JSON.parse o.file\\n    cb    = !->\\n      _this.elementRefresh!\\n    @dataImportTable list: list, cb: cb\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/import/output\":{\"name\":\"component/util/import/output\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.importOutputEditor = (o) !-> @importOutputEditorJs o\\n  o.importOutputFrame =  (o) !-> @importOutputFrameJs o\\n  \\n  o.importOutputFrameJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Import:Output:Frame'\\n    @frameWrite write: o.file\\n  \\n  o.importOutputEditorJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Import:Output:Editor'\\n    @editorSetValue context: 'outputs', entity: 'index', value: o.file\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/util/import/input\":{\"name\":\"component/util/import/input\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.importInputEditor = (o) !-> @importInputEditorJs o\\n  o.importInputJson =   (o) !-> @importInputJsonJs o\\n  o.importInputZip =    (o) !-> @importInputZipJs o\\n  \\n  o.importInputEditorJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Import:Input:Editor'\\n    @editorSetValue context: 'inputs', entity: o.entity, value: o.file\\n  \\n  o.importInputJsonJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Import:Input:Json'\\n    inputs = JSON.parse o.file\\n    @inputLoad inputs: inputs\\n  \\n  o.importInputZipJs = (o) !-> # entity, file\\n    _this = @; @consoleLog text: 'Import:Input:Zip'\\n    /*\\n    zip = new JSZip o.file\\n    inputs = \\n      notes: {}\\n    $.each zip.files, (index, zipEntry) !->\\n      dot  = index.indexOf '.'\\n      name = index.substring 0, dot\\n      src  = zipEntry.asText!\\n      ext  = index.substring dot + 1, index.length\\n      if !_this.extIsValid ext: ext then ext = '++.md'\\n      if name != ''\\n        inputs.notes[name] = \\n          name: name\\n          src:  src\\n          ext:  ext\\n          mode: (_this.modeGetFromExt ext: ext) || 'text/x-markdown'\\n    if !inputs.notes.index \\n      inputs.notes.index = name: 'index', src: '\\\\n\\\\n', ext: '++.md', mode: 'text/x-markdown'\\n    @inputLoad inputs: inputs\\n    */\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"},\"component/main/run/transpiler/livescript\":{\"name\":\"component/main/run/transpiler/livescript\",\"src\":\"\\nComponent = (Component) !->\\n  o = Component::\\n  \\n  o.runTranspilerLivescript        = (o)  -> @runTranspilerLivescriptJs o\\n  o.runTranspilerLivescriptFrame   = (o) !-> @runTranspilerLivescriptFrameJs o\\n  o.runTranspilerLivescriptEditor  = (o) !-> @runTranspilerLivescriptEditorJs o\\n  o.runTranspilerLivescriptCompile = (o)  -> @runTranspilerLivescriptCompileLs o\\n  \\n  o.runTranspilerLivescriptJs = (o) -> # src, type, ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript'\\n    \\n    types = \\n      frame:   !-> _this.runTranspilerLivescriptFrame   o\\n      editor:  !-> _this.runTranspilerLivescriptEditor  o\\n      compile:  -> _this.runTranspilerLivescriptCompile o\\n    types[o.type]!\\n    \\n  o.runTranspilerLivescriptFrameJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript:Frame'\\n    o.script = @runTranspilerLivescriptCompile o\\n    o.src    = false\\n    @runDisplay o\\n  \\n  o.runTranspilerLivescriptEditorJs = (o) !-> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript:Editor'\\n    o.src = @runTranspilerLivescriptCompile o\\n    o.ext = 'js'\\n    @runDisplay o\\n  \\n  o.runTranspilerLivescriptCompileLs = (o) -> # src, ?ext\\n    _this = @; @consoleLog text: 'Run:Transpiler:Livescript:Compile'\\n    LiveScript.compile o.src, bare: true\\n\\nif typeof module == 'object' then module.exports = Component\\n\",\"ext\":\"ls\",\"mode\":\"text/x-livescript\"}}",
    "date": "18/07/2016",
    "id": 2
  },
  ]
})